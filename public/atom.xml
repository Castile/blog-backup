<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Castile</title>
  
  
  <link href="https://castile.github.io/atom.xml" rel="self"/>
  
  <link href="https://castile.github.io/"/>
  <updated>2024-06-05T15:52:28.295Z</updated>
  <id>https://castile.github.io/</id>
  
  <author>
    <name>朱宏梁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL实战45讲精华</title>
    <link href="https://castile.github.io/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/"/>
    <id>https://castile.github.io/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/</id>
    <published>2024-06-05T15:52:28.000Z</published>
    <updated>2024-06-05T15:52:28.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-一条SQL查询语句是如何执行的"><a href="#01-一条SQL查询语句是如何执行的" class="headerlink" title="01 一条SQL查询语句是如何执行的"></a>01 一条SQL查询语句是如何执行的</h2><p>见 <a href="https://castile.github.io/2021/07/23/mysql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/">https://castile.github.io/2021/07/23/mysql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</a></p><h2 id="02-日志系统：一条SQL更新语句是如何执行的"><a href="#02-日志系统：一条SQL更新语句是如何执行的" class="headerlink" title="02 日志系统：一条SQL更新语句是如何执行的"></a>02 日志系统：一条SQL更新语句是如何执行的</h2><p>更新语句：<code> update T set c=c+1 where ID=2;</code></p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717170384442.png" class width="1717170384442"><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log使用WAL技术（Write-Ahead Logging），也就是先写日志再写磁盘。 具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717170442866.png" class width="1717170442866"><p> write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。 </p><p> redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<strong>crash-safe</strong>。 </p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>与redo log的区别：</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>更新语句执行流程图：</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717170669560.png" class width="1717170669560"><p>注意，这里使用了两阶段提交。是因为要保证 数据库的状态和用它的日志恢复出来的库的一致。</p><h2 id="03-事务隔离"><a href="#03-事务隔离" class="headerlink" title="03  事务隔离"></a>03  事务隔离</h2><h3 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h3><p>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）。</p><p> SQL 标准的事务隔离级别包括： 读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><h3 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h3><p>在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。</p><p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717170896058.png" class width="1717170896058"><p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。 </p><p>当没有事务再需要用到这些回滚日志时，回滚日志会被删除，因此尽量不要使用长事务。 <strong>由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间</strong> </p><h3 id="查询事务"><a href="#查询事务" class="headerlink" title="查询事务"></a>查询事务</h3><p> 可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure><h3 id="如何避免长事务对业务的影响？"><a href="#如何避免长事务对业务的影响？" class="headerlink" title="如何避免长事务对业务的影响？"></a>如何避免长事务对业务的影响？</h3><p><strong>首先，从应用开发端来看：</strong></p><ol><li>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。</li><li>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</li></ol><p><strong>其次，从数据库端来看：</strong></p><ol><li>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；</li><li>Percona 的 pt-kill 这个工具不错，推荐使用；</li><li>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</li><li>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</li></ol><h2 id="04-深入浅出索引（上）"><a href="#04-深入浅出索引（上）" class="headerlink" title="04 深入浅出索引（上）"></a>04 深入浅出索引（上）</h2><p> <strong>索引的出现其实就是为了提高数据查询的效率，就像书的目录一样</strong> </p><h3 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h3><p>常见的有哈希表、有序数组和搜索树。 </p><ul><li><p>哈希索引： 通过hash函数计算key所在的位置从而找到value，冲突后后面挂了一条链表。 <strong>哈希表这种结构适用于只有等值查询的场景</strong> ， 区间查询需要遍历全部，查询很慢。</p></li><li><p>有序数组：  <strong>有序数组在等值查询和范围查询场景中的性能就都非常优秀</strong> ，  但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。  所以，<strong>有序数组索引只适用于静态存储引擎</strong>，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717171297503.png" class width="1717171297503"></li><li><p> 二叉搜索树 ：  O(log(N)) 的查询复杂度 ， 新的时间复杂度也是 O(log(N))。 </p></li></ul>  <img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717171369348.png" class width="1717171369348"><h3 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h3><p> 在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为<strong>索引组织表</strong> </p><p> nnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的， 每一个索引在 InnoDB 里面对应一棵 B+ 树。 <strong>B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数</strong> </p><p>建表语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table T(</span><br><span class="line">id int primary key, </span><br><span class="line">k int not null, </span><br><span class="line">name varchar(16),</span><br><span class="line">index (k))engine=InnoDB;</span><br></pre></td></tr></table></figure><p> 表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)， </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717171588759.png" class width="1717171588759"><p> 根据叶子节点的内容，索引类型分为主键索引和非主键索引 </p><ul><li><p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p></li><li><p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）</p></li></ul><p> <strong>基于主键索引和普通索引的查询有什么区别？</strong> </p><ul><li>如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；</li><li>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为<strong>回表</strong>。</li></ul><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><h3 id="索引如何维护"><a href="#索引如何维护" class="headerlink" title="索引如何维护"></a>索引如何维护</h3><p>插入数据的时候就需要维护索引B+树，可能会涉及到页分裂、合并操作。</p><p>*<strong>哪些场景下应该使用自增主键，而哪些场景下不应该？</strong></p><p>自增主键：  插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值；  每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂 </p><p>有的 业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p><p>除了考虑性能外，我们还可以从存储空间的角度来看， <strong>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小</strong> </p><blockquote><p>“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。 </p></blockquote><h2 id="05-深入浅出索引（下）"><a href="#05-深入浅出索引（下）" class="headerlink" title="05 深入浅出索引（下）"></a>05 深入浅出索引（下）</h2><p>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table T (</span><br><span class="line">ID int primary key,</span><br><span class="line">k int NOT NULL DEFAULT 0, </span><br><span class="line">s varchar(16) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">index k(k))</span><br><span class="line">engine=InnoDB;</span><br><span class="line"> </span><br><span class="line">insert into T values(100,1, &#x27;aa&#x27;),(200,2,&#x27;bb&#x27;),(300,3,&#x27;cc&#x27;),(500,5,&#x27;ee&#x27;),(600,6,&#x27;ff&#x27;),(700,7,&#x27;gg&#x27;);</span><br></pre></td></tr></table></figure><p> 执行<code>select * from T where k between 3 and 5</code>，需要执行几次树的搜索操作，会扫描多少行？ </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717172560950.png" class width="1717172560950"><ol><li>在 k 索引树上找到 k=3 的记录，取得 ID = 300；</li><li>再到 ID 索引树查到 ID=300 对应的 R3；</li><li>在 k 索引树取下一个值 k=5，取得 ID=500；</li><li>再回到 ID 索引树查到 ID=500 对应的 R4；</li><li>在 k 索引树取下一个值 k=6，不满足条件，循环结束。</li></ol><p> 可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。 </p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p> 如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。 </p><p> <strong>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</strong> </p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p> <strong>B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</strong> </p><p> 用（name，age）这个联合索引来分析。  索引项是按照索引定义里面出现的字段顺序排序的。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717173042998.png" class width="1717173042998"><p> 当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果.</p><p>如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是”where name like ‘张 %’”。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止 </p><p>这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。 </p><p> <strong>在建立联合索引的时候，如何安排索引内的字段顺序</strong>?</p><p>这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，<strong>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</strong> </p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>最左前缀可以用于在索引中定位记录，那些不符合最左前缀的部分，会怎么样呢？ </p><p> 市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tuser where name like &#x27;张 %&#x27; and age=10 and ismale=1;</span><br></pre></td></tr></table></figure><p> 搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3， 后面只能从ID3开始回表操作，找出数据行再比较字段值。</p><p>在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717173602091.png" class width="1717173602091"><p>InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次 </p><h2 id="06-全局锁和表锁"><a href="#06-全局锁和表锁" class="headerlink" title="06 全局锁和表锁"></a>06 全局锁和表锁</h2><p> <strong>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类</strong> </p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。 </p><p><strong>全局锁的典型使用场景是，做全库逻辑备份。</strong>也就是把整库每个表都 select 出来存成文本。 </p><p>全库备份的方式</p><p>1、   Flush tables with read lock (FTWRL)</p><p>2、使用可重复读的事务隔离级别。 逻辑备份工具是 mysqldump。  使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。  <strong>但前提是引擎要支持这个隔离级别。</strong>比如，对于 MyISAM 这种不支持事务的引擎。</p><p>3、 <strong>全库只读，为什么不使用 set global readonly=true 的方式呢</strong>？但是建议使用FTWRL，原因如下：</p><ul><li>一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。</li><li>二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</li></ul><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。 </p><p> <strong>表锁的语法是 lock tables … read/write</strong>。 可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。</p><p><strong>另一类表级的锁是 MDL（metadata lock)。</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。 </p><p>当要对表做结构变更操作的时候，加 MDL 写锁。</p><ul><li>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</li></ul><p><strong>事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</strong> </p><p> <strong>如何安全地给小表加字段？</strong> </p><p>1、 我们要解决长事务，事务不提交，就会一直占着 MDL 锁。 如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。 </p><p> 如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？ </p><blockquote><p>在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name NOWAIT add column ...</span><br><span class="line">ALTER TABLE tbl_name WAIT N add column ... </span><br></pre></td></tr></table></figure><h2 id="07-行锁功过：怎么减少行锁对性能的影响？"><a href="#07-行锁功过：怎么减少行锁对性能的影响？" class="headerlink" title="07 行锁功过：怎么减少行锁对性能的影响？"></a>07 行锁功过：怎么减少行锁对性能的影响？</h2><p>行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。 </p><p> <strong>InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong> 因此， <strong>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong> </p><h3 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h3><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717426107205.png" class width="1717426107205"><p> 事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略： </p><ul><li><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。默认是50s</p></li><li><p>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</p></li></ul><p>那种好用呢？</p><p>如果采用第一种，使用默认值的话，出现了死锁要等待50s才能超时退出，对于在线服务来说是无法接受的。但是如果值设置成1s，太短，会出现误伤。</p><p>采用第二种的话，如果客户端并发更新1000次，死锁检查就要执行100w次（每个线程都需要循环判断1000次，所以是10的6次方），那么死锁检测就需要大量的cpu， 你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。 </p><p><strong>解决方法：</strong></p><p>1、 <strong>确保这个业务一定不会出现死锁，可以临时把死锁检测关掉</strong> ： innodb_deadlock_detect = off</p><p>2、 <strong>控制并发度</strong> ：  对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。 </p><p>3、 冗余行设计： 减少冲突概率，减少锁等待次数，也就减少了死锁检测的CPU消耗。</p><p>如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：</p><ul><li>第一种，直接执行 delete from T limit 10000;</li><li>第二种，在一个连接中循环执行 20 次 delete from T limit 500;</li><li>第三种，在 20 个连接中同时执行 delete from T limit 500。</li></ul><p>你会选择哪一种方法呢？为什么呢？</p><p>第二种好一点。</p><p> 第一种方式： 单个语句占用时间长，锁的时间也比较长；而且大事务还会导致主从延迟。 </p><p> 第三种方式 ： 会人为造成锁冲突</p><h2 id="08-事务到底是隔离的还是不隔离的？"><a href="#08-事务到底是隔离的还是不隔离的？" class="headerlink" title="08 事务到底是隔离的还是不隔离的？"></a>08 事务到底是隔离的还是不隔离的？</h2><h3 id="“快照”在-MVCC-里是怎么工作的？"><a href="#“快照”在-MVCC-里是怎么工作的？" class="headerlink" title="“快照”在 MVCC 里是怎么工作的？"></a>“快照”在 MVCC 里是怎么工作的？</h3><p> 可重复读隔离级别： 一个事务在启动的时候看到的数据，在整个事务过程中看到的数据是一致的。</p><p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，<strong>这个快照是基于整库的</strong>。        </p><h4 id="快照的实现"><a href="#快照的实现" class="headerlink" title="快照的实现"></a>快照的实现</h4><p>每个事务有一个唯一的事务 ID，叫作 transaction id，且是严格递增的。</p><p>每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。也就是说数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717596918523.png" class width="1717596918523"><blockquote><p> 虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。 </p></blockquote><p>三个虚线箭头，就是 undo log(回滚日志)；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 依次执行 U3、U2 算出来。</p><p> InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。  </p><p>数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。 这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。</p><p>而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717597097920.png" class title="数据版本可见性规则"><p>对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：</p><ol><li>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；</li><li>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；</li><li>如果落在黄色部分，那就包括两种情况：<ul><li>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见； </li><li>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。</li></ul></li></ol><p> <strong>InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</strong> </p><h3 id="事务的可重复读的能力是怎么实现的"><a href="#事务的可重复读的能力是怎么实现的" class="headerlink" title="事务的可重复读的能力是怎么实现的"></a><strong>事务的可重复读的能力是怎么实现的</strong></h3><p>可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用<strong>当前读</strong>。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。 </p><p>而读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是： </p><ul><li>在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；</li><li>在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。</li></ul><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `t` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `k` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line">insert into t(id, k) values(1,1),(2,2);</span><br></pre></td></tr></table></figure><h4 id="可重复读隔离级别下"><a href="#可重复读隔离级别下" class="headerlink" title="可重复读隔离级别下"></a>可重复读隔离级别下</h4><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717599590908.png" class width="1717599590908"><p>这里，我们不妨做如下假设：</p><ol><li>事务 A 开始前，系统里面只有一个活跃事务 ID 是 99；</li><li>事务 A、B、C 的版本号分别是 100、101、102，且当前系统里只有这四个事务；</li><li>三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。</li></ol><p>这样，事务 A 的视图数组就是 [99,100], 事务 B 的视图数组是 [99,100,101], 事务 C 的视图数组是 [99,100,101,102]。</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717599642597.png" class width="1717599642597"><p>事务 A 查询语句的读数据流程是这样的：</p><ul><li>找到 (1,3) 的时候，判断出 row trx_id=101，比高水位大，处于红色区域，不可见；</li><li>接着，找到上一个历史版本，一看 row trx_id=102，比高水位大，处于红色区域，不可见；</li><li>再往前找，终于找到了（1,1)，它的 row trx_id=90，比低水位小，处于绿色区域，可见。</li></ul><p><strong>总结就是：一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：</strong></p><ol><li><strong>版本未提交，不可见；</strong></li><li><strong>版本已提交，但是是在视图创建后提交的，不可见；</strong></li><li><strong>版本已提交，而且是在视图创建前提交的，可见。</strong></li></ol><h4 id="更新逻辑"><a href="#更新逻辑" class="headerlink" title="更新逻辑"></a>更新逻辑</h4><p> 用到了这样一条规则：<strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读”（current read）。</strong> </p><p>因此，在更新的时候，当前读拿到的数据是 (1,2)，更新后生成了新版本的数据 (1,3)，这个新版本的 row trx_id 是 101。</p><p>所以，在执行事务 B 查询语句的时候，一看自己的版本号是 101，最新数据的版本号也是 101，是自己的更新，可以直接使用，所以查询得到的 k 的值是 3。</p><h4 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h4><p> 事务 C 不是马上提交的，而是变成了下面的事务 C’，会怎么样呢？  更新后并没有马上提交，在它提交前，事务 B 的更新语句先发起了。</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717599761178.png" class width="1717599761178"><p>事务 C’没提交，也就是说 (1,2) 这个版本上的写锁还没释放。而事务 B 是当前读，必须要读最新版本，而且必须加锁，因此就被锁住了，必须等到事务 C’释放这个锁，才能继续它的当前读。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717599793215.png" class width="1717599793215"><p>本地验证结果也符合预期：</p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717599909603.png" class width="1717599909603"><h4 id="读提交隔离级别下的情况"><a href="#读提交隔离级别下的情况" class="headerlink" title="读提交隔离级别下的情况"></a>读提交隔离级别下的情况</h4><p> 在读提交隔离级别下，事务 A 和事务 B 的查询语句查到的 k，分别应该是多少呢？ </p><blockquote><p>在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。</p></blockquote><p> “start transaction with consistent snapshot; ”的意思是从这个语句开始，创建一个持续整个事务的一致性快照。所以，在读提交隔离级别下，这个用法就没意义了，等效于普通的 start transaction。 </p><img src="/2024/06/05/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%B2%BE%E5%8D%8E/1717600004535.png" class title="读提交隔离级别下的事务状态图"><p>事务 A 的查询语句的视图数组是在执行这个语句的时候创建的，时序上 (1,2)、(1,3) 的生成时间都在创建这个视图数组的时刻之前。但是，在这个时刻：</p><ul><li>(1,3) 还没提交，属于情况 1，不可见；</li><li>(1,2) 提交了，属于情况 3，可见。</li></ul><p>所以，这时候事务 A 查询语句返回的是 k=2。</p><p>显然地，事务 B 查询结果 k=3。</p><h2 id="09-普通索引和唯一索引，应该怎么选择？"><a href="#09-普通索引和唯一索引，应该怎么选择？" class="headerlink" title="09 普通索引和唯一索引，应该怎么选择？"></a>09 普通索引和唯一索引，应该怎么选择？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;01-一条SQL查询语句是如何执行的&quot;&gt;&lt;a href=&quot;#01-一条SQL查询语句是如何执行的&quot; class=&quot;headerlink&quot; title=&quot;01 一条SQL查询语句是如何执行的&quot;&gt;&lt;/a&gt;01 一条SQL查询语句是如何执行的&lt;/h2&gt;&lt;p&gt;见 &lt;a h</summary>
      
    
    
    
    <category term="MySQL" scheme="https://castile.github.io/categories/MySQL/"/>
    
    
    <category term="mysql" scheme="https://castile.github.io/tags/mysql/"/>
    
    <category term="数据库" scheme="https://castile.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://castile.github.io/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://castile.github.io/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2024-04-19T14:37:58.000Z</published>
    <updated>2024-04-19T14:37:58.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-道之伊始"><a href="#一-道之伊始" class="headerlink" title="一. 道之伊始"></a>一. 道之伊始</h1><p>宇宙初开之际，混沌之气笼罩着整个宇宙，一切模糊不清。</p><p>然后，盘古开天，女娲造人：日月乃出、星辰乃现，山川蜿蜒、江河奔流、生灵万物，欣欣向荣。此日月、星辰、山川、江河、生灵万物，谓之【对象】，皆随时间而化。</p><p>然而：日月之行、星汉灿烂、山川起伏、湖海汇聚，冥冥中有至理藏其中。名曰【道】，乃万物遵循之规律，亦谓之【函数】，它无问东西，亘古不变</p><p>作为<strong>设计宇宙洪荒</strong>的程序员</p><ul><li>造日月、筑山川、划江河、开湖海、演化生灵万物、令其生生不息，则必用面向【对象】之手段</li><li>若定规则、求本源、追纯粹，论不变，则当选【函数】编程之思想</li></ul><p>下面就让我们从【函数】开始。</p><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>什么是函数呢？函数即规则</p><p>数学上：</p><img src="/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20240129152419304.png" class title="image-20240129152419304"><p>例如：</p><table><thead><tr><th>INPUT</th><th>f(x)</th><th>OUTPUT</th></tr></thead><tbody><tr><td>1</td><td>?</td><td>1</td></tr><tr><td>2</td><td>?</td><td>4</td></tr><tr><td>3</td><td>?</td><td>9</td></tr><tr><td>4</td><td>?</td><td>16</td></tr><tr><td>5</td><td>?</td><td>25</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><ul><li>$f(x) = x^2$ 是一种规律， input 按照此规律变化为 output</li><li>很多规律已经由人揭示，例如 $e = m \cdot c^2$</li><li>程序设计中<strong>更</strong>可以自己去制定规律，一旦成为规则的制定者，你就是神</li></ul><h2 id="大道无情"><a href="#大道无情" class="headerlink" title="大道无情"></a>大道无情</h2><h3 id="无情"><a href="#无情" class="headerlink" title="无情"></a>无情</h3><p>何为无情：</p><ul><li>只要输入相同，无论多少次调用，无论什么时间调用，输出相同。</li></ul><h3 id="佛祖成道"><a href="#佛祖成道" class="headerlink" title="佛祖成道"></a>佛祖成道</h3><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMutable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(pray(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        System.out.println(pray(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        System.out.println(pray(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Buddha</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Buddha</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Buddha buddha = <span class="keyword">new</span> Buddha(<span class="string">&quot;佛祖&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">pray</span><span class="params">(String person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (person + <span class="string">&quot;向[&quot;</span> + buddha.name + <span class="string">&quot;]虔诚祈祷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 pray 的执行结果，除了参数变化外，希望函数的执行规则永远不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三向[佛祖]虔诚祈祷</span><br><span class="line">张三向[佛祖]虔诚祈祷</span><br><span class="line">张三向[佛祖]虔诚祈祷</span><br></pre></td></tr></table></figure><p>然而，由于设计上的缺陷，函数引用了外界可变的数据，如果这么使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buddha.name = <span class="string">&quot;魔王&quot;</span>;</span><br><span class="line">System.out.println(pray(<span class="string">&quot;张三&quot;</span>));</span><br></pre></td></tr></table></figure><p>结果就会是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三向[魔王]虔诚祈祷</span><br></pre></td></tr></table></figure><p>问题出在哪儿呢？函数的目的是除了参数能变化，其它部分都要不变，这样才能成为规则的一部分。佛祖要成为规则的一部分，也要保持不变</p><p>改正方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Buddha</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Buddha</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Buddha</span><span class="params">(String name)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>不是说函数不能引用外界的数据，而是它引用的数据必须也能作为规则的一部分</li><li>让佛祖不变，佛祖才能成为规则</li></ul><h3 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h3><p>方法本质上也是函数。不过方法绑定在对象之上，它是对象个人法则</p><p>函数是</p><ul><li>函数（对象数据，其它参数）</li></ul><p>而方法是</p><ul><li>对象数据.方法（其它参数）</li></ul><h3 id="不变的好处"><a href="#不变的好处" class="headerlink" title="不变的好处"></a>不变的好处</h3><p>只有不变，才能在滚滚时间洪流中屹立不倒，成为规则的一部分。</p><p>多线程编程中，不变意味着线程安全</p><h3 id="合格的函数无状态"><a href="#合格的函数无状态" class="headerlink" title="合格的函数无状态"></a>合格的函数无状态</h3><h2 id="大道无形"><a href="#大道无形" class="headerlink" title="大道无形"></a>大道无形</h2><h3 id="函数化对象"><a href="#函数化对象" class="headerlink" title="函数化对象"></a>函数化对象</h3><p>函数本无形，也就是它代表的规则：位置固定、不能传播。</p><p>若要有形，让函数的规则能够传播，需要将函数化为对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Lambda add = (a, b) -&gt; a + b; <span class="comment">// 它已经变成了一个 lambda 对象</span></span><br></pre></td></tr></table></figure><p>区别在哪？</p><ul><li>前者是纯粹的一条两数加法规则，它的位置是固定的，要使用它，需要通过 MyClass.add 找到它，然后执行</li><li>而后者（add 对象）就像长了腿，它的位置是可以变化的，想去哪里就去哪里，哪里要用到这条加法规则，把它传递过去</li><li>接口的目的是为了将来用它来执行函数对象，此接口中只能有一个方法定义</li></ul><p>函数化为对象做个比喻</p><ul><li>之前是大家要统一去西天取经</li><li>现在是每个菩萨、罗汉拿着经书，入世传经</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;server start...&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Socket s = ss.accept();</span><br><span class="line">                Thread.ofVirtual().start(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(s.getInputStream());</span><br><span class="line">                        Lambda lambda = (Lambda) is.readObject();</span><br><span class="line">                        <span class="keyword">int</span> a = ThreadLocalRandom.current().nextInt(<span class="number">10</span>);</span><br><span class="line">                        <span class="keyword">int</span> b = ThreadLocalRandom.current().nextInt(<span class="number">10</span>);</span><br><span class="line">                        System.out.printf(<span class="string">&quot;%s %d op %d = %d%n&quot;</span>,</span><br><span class="line">                   s.getRemoteSocketAddress().toString(), a, b, lambda.calculate(a, b));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>(Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))&#123;</span><br><span class="line">                Lambda lambda = (Lambda &amp; Serializable) (a, b) -&gt; a + b;</span><br><span class="line">                ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line">                os.writeObject(lambda);</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>(Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))&#123;</span><br><span class="line">                Lambda lambda = (Lambda &amp; Serializable) (a, b) -&gt; a - b;</span><br><span class="line">                ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line">                os.writeObject(lambda);</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>(Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))&#123;</span><br><span class="line">                Lambda lambda = (Lambda &amp; Serializable) (a, b) -&gt; a * b;</span><br><span class="line">                ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line">                os.writeObject(lambda);</span><br><span class="line">                os.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的例子做了一些简单的扩展，可以看到不同的客户端可以上传自己的计算规则</li></ul><blockquote><p><em><strong>P.S.</strong></em></p><ul><li>大部分文献都说 lambda 是匿名函数，但我觉得需要在这个说法上进行补充</li><li>至少在 java 里，虽然 lambda 表达式本身不需要起名字，但不得提供一个对应接口嘛</li></ul></blockquote><h3 id="行为参数化"><a href="#行为参数化" class="headerlink" title="行为参数化"></a>行为参数化</h3><p>已知学生类定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对一组学生集合，筛选出男学生，下面的代码实现如何，评价一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; students = List.of(</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;杨不悔&quot;</span>, <span class="number">16</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="number">19</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    System.out.println(filter(students)); <span class="comment">// 能得到 张无忌，宋青书</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Student&gt; <span class="title">filter</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span> (student.sex.equals(<span class="string">&quot;男&quot;</span>)) &#123;</span><br><span class="line">            result.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需求再变动一下，要求找到 18 岁以下的学生，上面代码显然不能用了，改动方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Student&gt; <span class="title">filter</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span> (student.age &lt;= <span class="number">18</span>) &#123;</span><br><span class="line">            result.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(filter(students)); <span class="comment">// 能得到 张无忌，杨不悔</span></span><br></pre></td></tr></table></figure><p>那么需求如果再要变动，找18岁以下男学生，怎么改？显然上述做法并不太好… 更希望一个方法能处理各种情况，仔细观察以上两个方法，找不同。</p><p>不同在于筛选条件部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.sex.equals(<span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.age &lt;= <span class="number">18</span></span><br></pre></td></tr></table></figure><p>既然它们就是不同，那么能否把它作为参数传递进来，这样处理起来不就一致了吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Student&gt; <span class="title">filter</span><span class="params">(List&lt;Student&gt; students, ???)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span> (???) &#123;</span><br><span class="line">            result.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它俩要判断的逻辑不同，那这两处不同的逻辑必然要用函数来表示，将来这两个函数都需要用到 student 对象来判断，都应该返回一个 boolean 结果，怎么描述函数的长相呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法可以统一成下述代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Student&gt; <span class="title">filter</span><span class="params">(List&lt;Student&gt; students, Lambda lambda)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lambda.test(student)) &#123;</span><br><span class="line">            result.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好，最后怎么给它传递不同实现呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(students, student -&gt; student.sex.equals(<span class="string">&quot;男&quot;</span>));</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(students, student -&gt; student.age &lt;= <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>还有新需求也能满足</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(students, student -&gt; student.sex.equals(<span class="string">&quot;男&quot;</span>) &amp;&amp; student.age &lt;= <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这样就实现了以不变应万变，而变换即是一个个函数对象，也可以称之为行为参数化</p><h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><p>在记录日志时，假设日志级别是 INFO，debug 方法会遇到下面的问题：</p><ul><li>本不需要记录日志，但 expensive 方法仍被执行了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = LogManager.getLogger();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(logger.getLevel());</span><br><span class="line">    logger.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, expensive());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">expensive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行耗时操作&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;结果&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(logger.isDebugEnabled())</span><br><span class="line">    logger.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, expensive());</span><br></pre></td></tr></table></figure><p>显然这么做，很多类似代码都要加上这样 if 判断，很不优雅</p><p>改进方法2：</p><p>在 debug 方法外再套一个新方法，内部逻辑大概是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">final</span> String msg, <span class="keyword">final</span> Supplier&lt;?&gt; lambda)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.debug(msg, lambda.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, () -&gt; expensive());</span><br></pre></td></tr></table></figure><p>expensive() 变成了不是立刻执行，在未来 if 条件成立时才执行</p><h3 id="函数对象的不同类型"><a href="#函数对象的不同类型" class="headerlink" title="函数对象的不同类型"></a>函数对象的不同类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Student&gt; c = </span><br><span class="line">    (Student s1, Student s2) -&gt; Integer.compare(s1.age, s2.age);</span><br><span class="line">        </span><br><span class="line">BiFunction&lt;Student, Student, Integer&gt; f = </span><br><span class="line">                (Student s1, Student s2) -&gt; Integer.compare(s1.age, s2.age);</span><br></pre></td></tr></table></figure><h1 id="二-函数编程语法"><a href="#二-函数编程语法" class="headerlink" title="二. 函数编程语法"></a>二. 函数编程语法</h1><h2 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式"></a>表现形式</h2><p>在 Java 语言中，lambda 对象有两种形式：lambda 表达式与方法引用</p><p>lambda 对象的类型是由它的行为决定的，如果有一些 lambda 对象，它们的入参类型、返回值类型都一致，那么它们可以看作是同一类的 lambda 对象，它们的类型，用函数式接口来表示</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>练习：将 lambda 对象分类，见 PPT</p><p>函数接口的命名规律</p><ul><li>带有 Unary 是一元的意思，表示一个参数</li><li>带有 Bi 或 Binary 是二元的意思，表示两个参数</li><li>Ternary 三元</li><li>Quatenary 四元</li><li>…</li></ul><p>方法引用也是类似，入参类型、返回值类型都一致的话，可以看作同一类的对象，也是用函数式接口表示</p><h2 id="六种方法引用"><a href="#六种方法引用" class="headerlink" title="六种方法引用"></a>六种方法引用</h2><h3 id="1）类名-静态方法名"><a href="#1）类名-静态方法名" class="headerlink" title="1）类名::静态方法名"></a>1）类名::静态方法名</h3><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此静态方法</li><li>因此这个静态方法需要什么参数，函数对象也提供相应的参数即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type2Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：挑选出所有男性学生</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Stream.of(</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .filter(Type2Test::isMale)</span><br><span class="line">                .forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>filter 这个高阶函数接收的函数类型（Predicate）是：一个 T 类型的入参，一个 boolean 的返回值<ul><li>因此我们只需要给它提供一个相符合的 lambda 对象即可</li></ul></li><li>isMale 这个静态方法有入参 Student 对应 T，有返回值 boolean 也能对应上，所以可以直接使用</li></ul><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student[name=张无忌, sex=男]</span><br><span class="line">Student[name=宋青书, sex=男]</span><br></pre></td></tr></table></figure><h3 id="2）类名-非静态方法名"><a href="#2）类名-非静态方法名" class="headerlink" title="2）类名::非静态方法名"></a>2）类名::非静态方法名</h3><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此非静态方法</li><li>因此这个函数对象需要提供一个额外的对象参数，以便能够调用此非静态方法</li><li>非静态方法的剩余参数，与函数对象的剩余参数一一对应</li></ul><p>例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type3Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        highOrder(Student::hello);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">highOrder</span><span class="params">(Type3 lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.transfer(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>), <span class="string">&quot;你好&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Type3</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">transfer</span><span class="params">(Student stu, String message)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">&quot; say: &quot;</span> + message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中函数类型的</p><ul><li>参数1 对应着 hello 方法所属类型 Student</li><li>参数2 对应着 hello 方法自己的参数 String</li><li>返回值对应着 hello 方法自己的返回值 String</li></ul><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三 say: 你好</span><br></pre></td></tr></table></figure><p>例2：改写之前根据性别过滤的需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type2Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：挑选出所有男性学生</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Stream.of(</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .filter(Student::isMale)</span><br><span class="line">                .forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>filter 这个高阶函数接收的函数类型（Predicate）是：一个 T 类型的入参，一个 boolean 的返回值<ul><li>因此我们只需要给它提供一个相符合的 lambda 对象即可</li></ul></li><li>它的入参1 T 对应着 isMale 非静态方法的所属类型 Student</li><li>它没有其它参数，isMale 方法也没有参数</li><li>返回值都是 boolean</li></ul><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student[name=张无忌, sex=男]</span><br><span class="line">Student[name=宋青书, sex=男]</span><br></pre></td></tr></table></figure><p>例3：将学生对象仅保留学生的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type2Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream.of(</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .map(Student::name)</span><br><span class="line">                .forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map 这个高阶函数接收的函数类型是（Function）是：一个 T 类型的参数，一个 R 类型的返回值</li><li>它的入参1 T 对应着 name 非静态方法的所属类型 Student</li><li>它没有剩余参数，name 方法也没有参数</li><li>它的返回值 R 对应着 name 方法的返回值 String</li></ul><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张无忌</span><br><span class="line">周芷若</span><br><span class="line">宋青书</span><br></pre></td></tr></table></figure><h3 id="3）对象-非静态方法名"><a href="#3）对象-非静态方法名" class="headerlink" title="3）对象::非静态方法名"></a>3）对象::非静态方法名</h3><p>如何理解：</p><ul><li>函数对象的逻辑部分是：调用此非静态方法</li><li>因为对象已提供，所以不必作为函数对象参数的一部分</li><li>非静态方法的剩余参数，与函数对象的剩余参数一一对应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type4Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Util util = <span class="keyword">new</span> Util(); <span class="comment">// 对象</span></span><br><span class="line">        Stream.of(</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">                        <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .filter(util::isMale)</span><br><span class="line">                .map(util::getName)</span><br><span class="line">                .forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> student.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">String <span class="title">getName</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> student.name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实较为典型的一个应用就是 <code>System.out</code> 对象中的非静态方法，最后的输出可以修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>这是因为 </p><ul><li>forEach  这个高阶函数接收的函数类型（Consumer）是一个 T 类型参数，void 无返回值</li><li>而 System.out 对象中有非静态方法 void println(Object x) 与之一致，因此可以将此方法化为 lambda 对象给 forEach 使用</li></ul><h3 id="4）类名-new"><a href="#4）类名-new" class="headerlink" title="4）类名::new"></a>4）类名::new</h3><p>对于构造方法，也有专门的语法把它们转换为 lambda 对象</p><p>函数类型应满足</p><ul><li>参数部分与构造方法参数一致</li><li>返回值类型与构造方法所在类一致</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type5Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">&quot;某人&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Type51</span> </span>&#123;</span><br><span class="line">        <span class="function">Student <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Type52</span> </span>&#123;</span><br><span class="line">        <span class="function">Student <span class="title">create</span><span class="params">(String name)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Type53</span> </span>&#123;</span><br><span class="line">        <span class="function">Student <span class="title">create</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hiOrder((Type51) Student::<span class="keyword">new</span>);</span><br><span class="line">        hiOrder((Type52) Student::<span class="keyword">new</span>);</span><br><span class="line">        hiOrder((Type53) Student::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hiOrder</span><span class="params">(Type51 creator)</span> </span>&#123;</span><br><span class="line">        System.out.println(creator.create());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hiOrder</span><span class="params">(Type52 creator)</span> </span>&#123;</span><br><span class="line">        System.out.println(creator.create(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hiOrder</span><span class="params">(Type53 creator)</span> </span>&#123;</span><br><span class="line">        System.out.println(creator.create(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）this-非静态方法名"><a href="#5）this-非静态方法名" class="headerlink" title="5）this::非静态方法名"></a>5）this::非静态方法名</h3><p>算是形式2的特例，只能用在类内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type6Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Util util = <span class="keyword">new</span> UtilExt();</span><br><span class="line">        util.hiOrder(Stream.of(</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">&quot;宋青书&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> student.sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isFemale</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> student.sex.equals(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">hiOrder</span><span class="params">(Stream&lt;Student&gt; stream)</span> </span>&#123;</span><br><span class="line">            stream</span><br><span class="line">                    .filter(<span class="keyword">this</span>::isMale)</span><br><span class="line">                    .forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6）super-非静态方法名"><a href="#6）super-非静态方法名" class="headerlink" title="6）super::非静态方法名"></a>6）super::非静态方法名</h3><p>算是形式2的特例，只能用在类内部（用在要用 super 区分重载方法时）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type6Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilExt</span> <span class="keyword">extends</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">hiOrder</span><span class="params">(Stream&lt;Student&gt; stream)</span> </span>&#123;</span><br><span class="line">            stream</span><br><span class="line">                    .filter(<span class="keyword">super</span>::isFemale)</span><br><span class="line">                    .forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）特例"><a href="#7）特例" class="headerlink" title="7）特例"></a>7）特例</h3><p>函数接口和方法引用之间，可以差一个返回值，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable task1 = ExceptionTest::print1;</span><br><span class="line">        Runnable task2 = ExceptionTest::print2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;task1 running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;task2 running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到 Runnable 接口不需要返回值，而实际的函数对象多出的返回值也不影响使用</li></ul><h2 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（Closure）</h2><p>何为闭包，闭包就是<strong>函数对象</strong>与<strong>外界变量</strong>绑定在一起，形成的整体。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosureTest1</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        highOrder(y -&gt; x + y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">highOrder</span><span class="params">(Lambda lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.add(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码中的 $y \rightarrow x + y$ 和 $x = 10$，就形成了一个闭包</li><li>可以想象成，函数对象有个背包，背包里可以装变量随身携带，将来函数对象甭管传递到多远的地方，包里总装着个 $x = 10$</li><li>有个限制，局部变量 x 必须是 final 或 effective final 的，effective final 意思就是，虽然没有用 final 修饰，但就像是用 final 修饰了一样，不能重新赋值，否则就语法错误。<ul><li>意味着闭包变量，在装进包里的那一刻，就不能变化了</li><li>道理也简单，为了保证函数的不变性，防止破坏成道</li></ul></li><li>闭包是一种给函数执行提供数据的手段，函数执行既可以使用函数入参，还可以使用闭包变量</li></ul><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosureTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 闭包作用：给函数对象提供参数以外的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 10 个任务对象，并且每个任务对象给一个任务编号</span></span><br><span class="line">        List&lt;Runnable&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i + <span class="number">1</span>;</span><br><span class="line">            Runnable task </span><br><span class="line">                = () -&gt; System.out.println(Thread.currentThread()+<span class="string">&quot;:执行任务&quot;</span> + k);</span><br><span class="line">            list.add(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">        <span class="keyword">for</span> (Runnable task : list) &#123;</span><br><span class="line">            service.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柯里化（Carrying）"><a href="#柯里化（Carrying）" class="headerlink" title="柯里化（Carrying）"></a>柯里化（Carrying）</h2><p>柯里化的作用是让函数对象分步执行（本质上是利用多个函数对象和闭包）</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Carrying1Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        highOrder(a -&gt; b -&gt; a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">highOrder</span><span class="params">(Step1 step1)</span> </span>&#123;</span><br><span class="line">        Step2 step2 = step1.exec(<span class="number">10</span>);</span><br><span class="line">        System.out.println(step2.exec(<span class="number">20</span>));</span><br><span class="line">        System.out.println(step2.exec(<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Step1</span> </span>&#123;</span><br><span class="line">        <span class="function">Step2 <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Step2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中</p><ul><li> $a \rightarrow …$ 是第一个函数对象，它的返回结果  $b \rightarrow …$ 是第二个函数对象</li><li>后者与前面的参数 a 构成了闭包</li><li>step1.exec(10) 确定了 a 的值是 10，返回第二个函数对象 step2，a 被放入了 step2 对象的背包记下来了</li><li>step2.exec(20) 确定了 b 的值是 20，此时可以执行 a + b 的操作，得到结果 30</li><li>step2.exec(50) 分析过程类似</li></ul><h2 id="高阶函数（Higher-Order-Functions）"><a href="#高阶函数（Higher-Order-Functions）" class="headerlink" title="高阶函数（Higher-Order Functions）"></a>高阶函数（Higher-Order Functions）</h2><h3 id="1-内循环"><a href="#1-内循环" class="headerlink" title="1) 内循环"></a>1) 内循环</h3><p>不想写集合便利代码</p><p>不知道那种遍历效率高</p><p>对集合的元素只读</p><h3 id="2-遍历二叉树"><a href="#2-遍历二叉树" class="headerlink" title="2) 遍历二叉树"></a>2) 遍历二叉树</h3><h3 id="3-简单流"><a href="#3-简单流" class="headerlink" title="3) 简单流"></a>3) 简单流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.castile.functional.hiorder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Castile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2024-04-17 20:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleStream</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Collection&lt;T&gt; collection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        SimpleStream.of(list)</span><br><span class="line">                .filter(x -&gt; (x &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                .map(x -&gt; x * x)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;T&gt; consumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T t : collection) &#123;</span><br><span class="line">            consumer.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleStream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;T&gt; predicate)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (T t : collection) &#123;</span><br><span class="line">            <span class="keyword">if</span> (predicate.test(t)) &#123;</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleStream&lt;&gt;(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;U&gt; <span class="function">SimpleStream&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;T, U&gt; function)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;U&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (T t : collection) &#123;</span><br><span class="line">            list.add(function.apply(t));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleStream&lt;&gt;(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">SimpleStream&lt;T&gt; <span class="title">of</span><span class="params">(Collection&lt;T&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleStream&lt;&gt;(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleStream</span><span class="params">(Collection&lt;T&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collection = collection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-简单流-化简"><a href="#4-简单流-化简" class="headerlink" title="4) 简单流-化简"></a>4) 简单流-化简</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">reduce</span><span class="params">(T init, BinaryOperator&lt;T&gt; operator)</span> </span>&#123;</span><br><span class="line">       T p = init;</span><br><span class="line">       <span class="keyword">for</span> (T t : collection) &#123;</span><br><span class="line">           p = operator.apply(p, t);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-简单流-收集"><a href="#5-简单流-收集" class="headerlink" title="5) 简单流-收集"></a>5) 简单流-收集</h3><h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><p>✅❌</p><h3 id="1）判断语法正确性"><a href="#1）判断语法正确性" class="headerlink" title="1）判断语法正确性"></a>1）判断语法正确性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lambda1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lambda2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">op</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Lambda1 lambda = a, b -&gt; a - b</code>  ❌</li><li><code>Lambda1 lambda = (c, d) -&gt; c * d</code> ✅</li><li><code>Lambda1 lambda = (int a, b) -&gt; a + b</code> ❌</li><li><code>Lambda2 lambda = Object a -&gt; System.out.println(a)</code> ❌</li></ol><h3 id="2）写出等价的-lambda-表达式"><a href="#2）写出等价的-lambda-表达式" class="headerlink" title="2）写出等价的 lambda 表达式"></a>2）写出等价的 lambda 表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>Math::random</code>   </p><p><code>()-&gt;Math.random()</code></p></li><li><p><code>Math::sqrt</code></p><p><code>(double number)-&gt;Math.sqrt(number)</code></p></li><li><p><code>Student::getName</code></p><p><code>(Student stu)-&gt;stu.getName()</code></p></li><li><p><code>Student::setName</code></p><p><code>(Student stu, String newName) -&gt; stu.setName(newName)</code></p></li><li><p><code>Student::hashCode</code></p><p><code>(Student stu) -&gt; stu.hashCode()</code></p></li><li><p><code>Student::equals</code></p><p><code>(Student stu, Object o) -&gt; stu.equals(o)</code></p></li></ol><p>假设已有对象 <code>Student stu = new Student(&quot;张三&quot;);</code></p><ol><li><p><code>stu::getName</code></p><p><code>()-&gt;stu.getName()</code></p></li><li><p><code>stu::setName</code></p><p><code>(String newName)-&gt;stu.setName(newName)</code></p></li><li><p><code>Student::new</code></p><p><code>(String name)-&gt;new Student(name)</code></p></li></ol><h3 id="3）使用函数接口解决问题"><a href="#3）使用函数接口解决问题" class="headerlink" title="3）使用函数接口解决问题"></a>3）使用函数接口解决问题</h3><p>把下列方法中，可能存在变化的部分，抽象为函数对象，从外界传递进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title">filter</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer number : list) &#123;</span><br><span class="line">        <span class="comment">// 筛选：判断是否是偶数，但以后可能改变判断规则</span></span><br><span class="line">        <span class="keyword">if</span>((number &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">map</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer number : list) &#123;</span><br><span class="line">        <span class="comment">// 转换：将数字转为字符串，但以后可能改变转换规则</span></span><br><span class="line">        result.add(String.valueOf(number));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer number : list) &#123;</span><br><span class="line">        <span class="comment">// 消费：打印，但以后可能改变消费规则</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title">supply</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 生成：随机数，但以后可能改变生成规则</span></span><br><span class="line">        result.add(ThreadLocalRandom.current().nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）写出等价的方法引用"><a href="#4）写出等价的方法引用" class="headerlink" title="4）写出等价的方法引用"></a>4）写出等价的方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; lambda = (String s) -&gt; Integer.parseInt(s);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BiPredicate&lt;List&lt;String&gt;, String&gt; lambda = (list, element) -&gt; list.contains(element);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BiPredicate&lt;Student, Object&gt; lambda = (stu, obj) -&gt; stu.equals(obj);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;File&gt; lambda = (file) -&gt; file.exists();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">Supplier&lt;Long&gt; lambda = () -&gt; runtime.freeMemory();</span><br></pre></td></tr></table></figure><h3 id="5）补充代码"><a href="#5）补充代码" class="headerlink" title="5）补充代码"></a>5）补充代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Color</span><span class="params">(Integer red, Integer green, Integer blue)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>如果想用 <code>Color::new</code> 来构造 Color 对象，还应当补充哪些代码</p><h3 id="6）实现需求"><a href="#6）实现需求" class="headerlink" title="6）实现需求"></a>6）实现需求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">highOrder</span><span class="params">(Predicate&lt;Student&gt; predicate)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; list = List.of(</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">17</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (Student stu : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(stu)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;通过测试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入参数时，分别用</p><ul><li>类名::静态方法名</li><li>类名::非静态方法名</li></ul><p>来表示【学生年龄大于等于18】的条件</p><h1 id="三-Stream-API"><a href="#三-Stream-API" class="headerlink" title="三. Stream API"></a>三. Stream API</h1><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Fruit</span><span class="params">(String cname, String name, String category, String color)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">Stream.of(</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;Strawberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;红色&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;桑葚&quot;</span>, <span class="string">&quot;Mulberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;紫色&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;杨梅&quot;</span>, <span class="string">&quot;Waxberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;红色&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;核桃&quot;</span>, <span class="string">&quot;Walnut&quot;</span>, <span class="string">&quot;坚果&quot;</span>, <span class="string">&quot;棕色&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;Peanut&quot;</span>, <span class="string">&quot;坚果&quot;</span>, <span class="string">&quot;棕色&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> Fruit(<span class="string">&quot;蓝莓&quot;</span>, <span class="string">&quot;Blueberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;蓝色&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/1.png" class><p>找到所有浆果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(f -&gt; f.category.equals(<span class="string">&quot;浆果&quot;</span>))</span><br></pre></td></tr></table></figure><p>找到蓝色的浆果</p><p>方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(f -&gt; f.category().equals(<span class="string">&quot;浆果&quot;</span>) &amp;&amp; f.color().equals(<span class="string">&quot;蓝色&quot;</span>))</span><br></pre></td></tr></table></figure><p>方法2：让每个 lambda 只做一件事，两次 filter 相对于并且关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.filter(f -&gt; f.category.equals(<span class="string">&quot;浆果&quot;</span>))</span><br><span class="line">.filter(f -&gt; f.color().equals(<span class="string">&quot;蓝色&quot;</span>))</span><br></pre></td></tr></table></figure><p>方法3：让每个 lambda 只做一件事，不过比方法2强的地方可以 or，and，nagate 运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.filter(((Predicate&lt;Fruit&gt;) f -&gt; f.category.equals(<span class="string">&quot;浆果&quot;</span>)).and(f -&gt; f.color().equals(<span class="string">&quot;蓝色&quot;</span>)))</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><img src="/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2.png" class title="映射"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map(f -&gt; f.cname() + <span class="string">&quot;酱&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h2><p>例1</p><img src="/2024/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20240301105938703.png" class title="image-20240301105938703"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(</span><br><span class="line">        List.of(</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;Strawberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;红色&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;桑葚&quot;</span>, <span class="string">&quot;Mulberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;紫色&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;杨梅&quot;</span>, <span class="string">&quot;Waxberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;红色&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;蓝莓&quot;</span>, <span class="string">&quot;Blueberry&quot;</span>, <span class="string">&quot;浆果&quot;</span>, <span class="string">&quot;蓝色&quot;</span>)</span><br><span class="line">        ),</span><br><span class="line">        List.of(</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;核桃&quot;</span>, <span class="string">&quot;Walnut&quot;</span>, <span class="string">&quot;坚果&quot;</span>, <span class="string">&quot;棕色&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Fruit(<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;Peanut&quot;</span>, <span class="string">&quot;坚果&quot;</span>, <span class="string">&quot;棕色&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line">    </span><br><span class="line">.flatMap(Collection::stream)    </span><br></pre></td></tr></table></figure><ul><li>这样把坚果和浆果两个集合变成了含六个元素的水果流</li></ul><p>例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Order(<span class="number">1</span>, List.of(</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">6499</span>, <span class="number">1</span>, <span class="string">&quot;HUAWEI MateBook 14s&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">6999</span>, <span class="number">1</span>, <span class="string">&quot;HUAWEI Mate 60 Pro&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">1488</span>, <span class="number">1</span>, <span class="string">&quot;HUAWEI WATCH GT 4&quot;</span>)</span><br><span class="line">        )),</span><br><span class="line">        <span class="keyword">new</span> Order(<span class="number">1</span>, List.of(</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">8999</span>, <span class="number">1</span>, <span class="string">&quot;Apple MacBook Air 13&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">7999</span>, <span class="number">1</span>, <span class="string">&quot;Apple iPhone 15 Pro&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Item(<span class="number">2999</span>, <span class="number">1</span>, <span class="string">&quot;Apple Watch Series 9&quot;</span>)</span><br><span class="line">        ))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>想逐一处理每个订单中的商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.flatMap(order -&gt; order.items().stream())</span><br></pre></td></tr></table></figure><p>这样把一个有两个元素的订单流，变成了一个有六个元素的商品流</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>根据已有的数组构建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(array)</span><br></pre></td></tr></table></figure><p>根据已有的 Collection 构建流（包括 List，Set 等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>).stream()</span><br></pre></td></tr></table></figure><p>把一个对象变成流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;d&quot;</span>)</span><br></pre></td></tr></table></figure><p>把多个对象变成流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>两个流拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>), Stream.of(<span class="string">&quot;d&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>), Stream.of(<span class="string">&quot;d&quot;</span>))</span><br><span class="line">    .skip(<span class="number">1</span>)</span><br><span class="line">    .limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>skip 是跳过几个元素</li><li>limit 是限制处理的元素个数</li></ul><ul><li><p>dropWhile 是 drop 流中元素，直到条件不成立，留下剩余元素</p></li><li><p>takeWhile 是 take 流中元素，直到条件不成立，舍弃剩余元素</p></li></ul><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>生成从 0 ~ 9 的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.rangeClosed(<span class="number">0</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>如果想订制，可以用 iterate 方法，例如下面生成奇数序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>参数1 是初始值</li><li>参数2 是一个特殊 Function，即参数类型与返回值相同，它会根据上一个元素 x 的值计算出当前元素</li><li>需要用 limit 限制元素个数</li></ul><p>也可以用 iterate 的重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.iterate(<span class="number">1</span>, x -&gt; x &lt; <span class="number">10</span>, x -&gt; x + <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>参数1 是初始值</li><li>参数2 用来限制元素个数，一旦不满足此条件，流就结束</li><li>参数3 相当于上个方法的参数2</li></ul><p>iterate 的特点是根据上一个元素计算当前元素，如果不需要依赖上一个元素，可以改用 generate 方法</p><p>例如下面是生成 5 个随机 int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.generate(()-&gt; ThreadLocalRandom.current().nextInt()).limit(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>不过如果只是生成随机数的话，有更简单的办法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalRandom.current().ints(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>如果要指定上下限，例如下面是生成从 0~9 的100个随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalRandom.current().ints(<span class="number">100</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="查找与判断"><a href="#查找与判断" class="headerlink" title="查找与判断"></a>查找与判断</h2><p>下面的代码找到流中任意（Any）一个偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.stream(array)</span><br><span class="line">    .filter(x -&gt; (x &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    .findAny()</span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>注意 findAny 返回的是 OptionalInt 对象，因为可能流中不存在偶数</li><li>对于 OptionalInt 对象，一般需要用 ifPresent 或 orElse（提供默认值）来处理</li></ul><p>与 findAny 比较类似的是 firstFirst，它俩的区别</p><ul><li>findAny 是找在流中任意位置的元素，不需要考虑顺序，对于上例返回 6 也是可以的</li><li>findFirst 是找第一个出现在元素，需要考虑顺序，对于上例只能返回 4</li><li>findAny 在顺序流中与 findFirst 表现相同，区别在于并行流下会更快</li></ul><p>判断流中是否存在任意一个偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(array).anyMatch(x -&gt; (x &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>它返回的是 boolean 值，可以直接用来判断</li></ul><p>判断流是否全部是偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(array).allMatch(x -&gt; (x &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>同样，它返回的是 boolean 值，可以直接用来判断</li></ul><p>判断流是否全部不是偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(array).noneMatch(x -&gt; (x &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>noneMatch 与 allMatch 含义恰好相反</li></ul><h2 id="排序与去重"><a href="#排序与去重" class="headerlink" title="排序与去重"></a>排序与去重</h2><p>已知有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">int</span> strength)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">Stream.of(</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;独孤求败&quot;</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;令狐冲&quot;</span>, <span class="number">90</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;风清扬&quot;</span>, <span class="number">98</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;东方不败&quot;</span>, <span class="number">98</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;方证&quot;</span>, <span class="number">92</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;任我行&quot;</span>, <span class="number">92</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;冲虚&quot;</span>, <span class="number">90</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;向问天&quot;</span>, <span class="number">88</span>),</span><br><span class="line">    <span class="keyword">new</span> Hero(<span class="string">&quot;不戒&quot;</span>, <span class="number">88</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>要求，首先按 strength 武力排序（逆序），武力相同的，按姓名长度排序（正序）</p><p>仅用 lambda 来解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.sorted((a,b)-&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> res = Integer.compare(b.strength(), a.strength());</span><br><span class="line">    <span class="keyword">return</span> (res == <span class="number">0</span>) ? Integer.compare(a.nameLength(), b.nameLength()) : res; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法引用改写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.sorted(</span><br><span class="line">    Comparator.comparingInt(Hero::strength)</span><br><span class="line">      .reversed()</span><br><span class="line">      .thenComparingInt(Hero::nameLength)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>comparingInt 接收一个 key 提取器（说明按对象中哪部分来比较），返回一个比较器</li><li>reversed 返回一个顺序相反的比较器</li><li>thenComparingInt 接收一个 key 提取器，返回一个新比较器，新比较器在原有比较器结果相等时执行新的比较逻辑</li></ul><p>增加一个辅助方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">int</span> strength)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nameLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.sorted((e, f) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> res =</span><br><span class="line">        ((Comparator&lt;Hero&gt;) (c, d) -&gt;</span><br><span class="line">            ((Comparator&lt;Hero&gt;) (a, b) -&gt; Integer.compare(a.strength(), b.strength()))</span><br><span class="line">                .compare(d, c))</span><br><span class="line">            .compare(e, f);</span><br><span class="line">    <span class="keyword">return</span> (res == <span class="number">0</span>) ? Integer.compare(e.nameLength(), f.nameLength()) : res;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果不好看，改成下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.sorted(step3(step2(step1())))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Comparator&lt;Hero&gt; <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a, b) -&gt; Integer.compare(a.strength(), b.strength());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Comparator&lt;Hero&gt; <span class="title">step2</span><span class="params">(Comparator&lt;Hero&gt; step1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c, d) -&gt; step1.compare(d, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Comparator&lt;Hero&gt; <span class="title">step3</span><span class="params">(Comparator&lt;Hero&gt; step2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (e, f) -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> res = step2.compare(e, f);</span><br><span class="line">        <span class="keyword">return</span> (res == <span class="number">0</span>) ? Integer.compare(e.nameLength(), f.nameLength()) : res;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h2><p><code>reduce(init, (p,x) -&gt; r)</code></p><ul><li>init 代表初始值</li><li><code>(p,x) -&gt; r</code> 是一个 BinaryOperator，作用是根据上次化简结果 p 和当前元素 x，得到本次化简结果 r</li></ul><p>这样两两化简，可以将流中的所有元素合并成一个结果</p><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><p>collect( supplier, accumulator, combiner)</p><ul><li>supplier 是描述如何创建收集容器 c ：<code>()-&gt; c</code></li><li>accumulator 是描述如何向容器 c 添加元素 x：<code>(c, x) -&gt; void</code></li><li>combiner 是描述如何合并两个容器：<code>(c1, c2) -&gt; void</code><ul><li>串行流下不需要合并容器</li><li>并行流如果用的是并发容器，也不需要合并</li></ul></li></ul><h2 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h2><p>Collectors 类中提供了很多现成的收集器，详情见网页</p><h2 id="下游收集器"><a href="#下游收集器" class="headerlink" title="下游收集器"></a>下游收集器</h2><p>做 groupingBy 分组收集时，组内可能需要进一步的数据收集，称为下游收集器，详情见网页</p><h2 id="基本流"><a href="#基本流" class="headerlink" title="基本流"></a>基本流</h2><p>基本类型流指 IntStream、LongStream 和 DoubleStream，它们在做数值计算时有更好的性能。</p><p>转换成基本流</p><ul><li>mapToInt</li><li>mapToLong</li><li>mapToDouble</li><li>flatMapToInt</li><li>flatMapToLong</li><li>flatMapToDouble</li><li>mapMultiToInt</li><li>mapMultiToLong</li><li>mapMultiToDouble</li></ul><p>基本流转对象流</p><ul><li>mapToObj</li><li>boxed</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>一次使用：流只能使用一次（终结方法只能调用一次）</li><li>两类操作：<ol><li>中间操作，lazy 懒惰的</li><li>终结操作，eager 迫切的</li></ol></li></ol><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .parallel()</span><br><span class="line">    .collect(Collector.of(</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-12s %s%n&quot;</span>,simple(),<span class="string">&quot;create&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            &#125;,</span><br><span class="line">            (list, x) -&gt; &#123;</span><br><span class="line">                List&lt;Integer&gt; old = <span class="keyword">new</span> ArrayList&lt;&gt;(list);</span><br><span class="line">                list.add(x);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-12s %s.add(%d)=&gt;%s%n&quot;</span>,simple(), old, x, list);</span><br><span class="line">            &#125;,</span><br><span class="line">            (list1, list2) -&gt; &#123;</span><br><span class="line">                List&lt;Integer&gt; old = <span class="keyword">new</span> ArrayList&lt;&gt;(list1);</span><br><span class="line">                list1.addAll(list2);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-12s %s.add(%s)=&gt;%s%n&quot;</span>, simple(),old, list2, list1);</span><br><span class="line">                <span class="keyword">return</span> list1;</span><br><span class="line">            &#125;,</span><br><span class="line">            list -&gt; list,</span><br><span class="line">            Collector.Characteristics.IDENTITY_FINISH</span><br><span class="line">    ));</span><br></pre></td></tr></table></figure><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><h3 id="1-数组求和"><a href="#1-数组求和" class="headerlink" title="1) 数组求和"></a>1) 数组求和</h3><p>其中</p><ul><li>primitive 用 loop 循环对 int 求和</li><li>intStream 用 IntStream 对 int 求和</li><li>boxed 用 loop 循环对 Integer 求和</li><li>stream 用 Stream 对 Integer 求和</li></ul><p>元素个数 100</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>25.424</td><td>± 0.782</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>47.482</td><td>± 1.145</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>72.457</td><td>± 4.136</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>465.141</td><td>± 4.891</td><td>ns/op</td></tr></tbody></table><p>元素个数 1000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>270.556</td><td>± 1.277</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>292.467</td><td>± 10.987</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>583.929</td><td>± 57.338</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>5948.294</td><td>± 2209.211</td><td>ns/op</td></tr></tbody></table><p>元素个数 10000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T01Sum.primitive</td><td>avgt</td><td>5</td><td>2681.651</td><td>± 12.614</td><td>ns/op</td></tr><tr><td>T01Sum.intStream</td><td>avgt</td><td>5</td><td>2718.408</td><td>± 52.418</td><td>ns/op</td></tr><tr><td>T01Sum.boxed</td><td>avgt</td><td>5</td><td>6391.285</td><td>± 358.154</td><td>ns/op</td></tr><tr><td>T01Sum.stream</td><td>avgt</td><td>5</td><td>44414.884</td><td>± 3213.055</td><td>ns/op</td></tr></tbody></table><p>结论：</p><ul><li>做数值计算，优先挑选基本流（IntStream 等）在数据量较大时，它的性能已经非常接近普通 for 循环</li><li>做数值计算，应当避免普通流（Stream）性能与其它几种相比，慢一个数量级</li></ul><h3 id="2-求最大值"><a href="#2-求最大值" class="headerlink" title="2) 求最大值"></a>2) 求最大值</h3><p>其中（原始数据都是 int，没有包装类）</p><ul><li>custom 自定义多线程并行求最大值</li><li>parallel 并行流求最大值</li><li>sequence 串行流求最大值</li><li>primitive loop 循环求最大值</li></ul><p>元素个数 100</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>39619.796</td><td>± 1263.036</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>6754.239</td><td>± 79.894</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>29.538</td><td>± 3.056</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>80.170</td><td>± 1.940</td><td>ns/op</td></tr></tbody></table><p>元素个数 10000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>41656.093</td><td>± 1537.237</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>11218.573</td><td>± 1994.863</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>2217.562</td><td>± 80.981</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>5682.482</td><td>± 264.645</td><td>ns/op</td></tr></tbody></table><p>元素个数 1000000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>T02Parallel.custom</td><td>avgt</td><td>5</td><td>194984.564</td><td>± 25794.484</td><td>ns/op</td></tr><tr><td>T02Parallel.parallel</td><td>avgt</td><td>5</td><td>298940.794</td><td>± 31944.959</td><td>ns/op</td></tr><tr><td>T02Parallel.primitive</td><td>avgt</td><td>5</td><td>325178.873</td><td>± 81314.981</td><td>ns/op</td></tr><tr><td>T02Parallel.sequence</td><td>avgt</td><td>5</td><td>618274.062</td><td>± 5867.812</td><td>ns/op</td></tr></tbody></table><p>结论：</p><ul><li>并行流相对自己用多线程实现分而治之更简洁</li><li>并行流只有在数据量非常大时，才能充分发力，数据量少，还不如用串行流</li></ul><h3 id="3-并行-发-收集"><a href="#3-并行-发-收集" class="headerlink" title="3) 并行(发)收集"></a>3) 并行(发)收集</h3><p>元素个数 100</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>1312.389</td><td>±  90.683</td><td>ns/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>1776.391</td><td>± 255.271</td><td>ns/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>1727.739</td><td>±  28.821</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>27654.004</td><td>± 496.970</td><td>ns/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>16320.113</td><td>± 344.766</td><td>ns/op</td></tr></tbody></table><p>元素个数 10000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ns/op)</th><th>Error (ns/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>211526.546</td><td>± 13549.703</td><td>ns/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>203794.146</td><td>± 3525.972</td><td>ns/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>237688.651</td><td>±  7593.483</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>527203.976</td><td>±  3496.107</td><td>ns/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>369630.728</td><td>± 20549.731</td><td>ns/op</td></tr></tbody></table><p>元素个数 1000000</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score (ms/op)</th><th>Error (ms/op)</th><th>Units</th></tr></thead><tbody><tr><td>loop1</td><td>avgt</td><td>5</td><td>69.154</td><td>± 3.456</td><td>ms/op</td></tr><tr><td>loop2</td><td>avgt</td><td>5</td><td>83.815</td><td>± 2.307</td><td>ms/op</td></tr><tr><td>sequence</td><td>avgt</td><td>5</td><td>103.585</td><td>± 0.834</td><td>ns/op</td></tr><tr><td>parallelNoConcurrent</td><td>avgt</td><td>5</td><td>167.032</td><td>± 15.406</td><td>ms/op</td></tr><tr><td>parallelConcurrent</td><td>avgt</td><td>5</td><td>52.326</td><td>± 1.501</td><td>ms/op</td></tr></tbody></table><p>结论：</p><ul><li>sequence 是一个容器单线程收集，数据量少时性能占优</li><li>parallelNoConcurrent 是多个容器多线程并行收集，时间应该花费在合并容器上，性能最差</li><li>parallelConcurrent 是一个容器多线程并发收集，在数据量大时性能较优</li></ul><h3 id="4）MethodHandle-性能"><a href="#4）MethodHandle-性能" class="headerlink" title="4）MethodHandle 性能"></a>4）MethodHandle 性能</h3><p>正常方法调用、反射、MethodHandle、Lambda 的性能对比</p><table><thead><tr><th>Benchmark</th><th>Mode</th><th>Cnt</th><th>Score</th><th>Error</th><th>Units</th></tr></thead><tbody><tr><td>Sample2.lambda</td><td>thrpt</td><td>5</td><td>389307532.881</td><td>± 332213073.039</td><td>ops/s</td></tr><tr><td>Sample2.method</td><td>thrpt</td><td>5</td><td>157556577.611</td><td>± 4048306.620</td><td>ops/s</td></tr><tr><td>Sample2.origin</td><td>thrpt</td><td>5</td><td>413287866.949</td><td>± 65182730.966</td><td>ops/s</td></tr><tr><td>Sample2.reflection</td><td>thrpt</td><td>5</td><td>91640751.456</td><td>± 37969233.369</td><td>ops/s</td></tr></tbody></table><h2 id="综合练习-1"><a href="#综合练习-1" class="headerlink" title="综合练习"></a>综合练习</h2><ol><li><p>将 filter 的课堂例题修改为方法引用方式实现</p></li><li><p>takeWhile 与 filter 的区别</p></li><li><p>三级排序</p></li><li><p>包含 null 值的排序</p></li><li><p>二维流扁平映射</p></li><li><p>三维流扁平映射</p></li><li><p>用 stream 打印九九乘法表</p></li><li><p>用 stream 生成斐波那契数列的前 10 项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, x -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x[<span class="number">1</span>], x[<span class="number">0</span>] + x[<span class="number">1</span>]&#125;)</span><br><span class="line">    .map(x -&gt; x[<span class="number">0</span>])</span><br><span class="line">    .limit(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>自定义 Collector 求平均 </p></li></ol><h1 id="四-实际应用"><a href="#四-实际应用" class="headerlink" title="四. 实际应用"></a>四. 实际应用</h1><h2 id="数据统计分析"><a href="#数据统计分析" class="headerlink" title="数据统计分析"></a>数据统计分析</h2><h3 id="1）每月的销售量"><a href="#1）每月的销售量" class="headerlink" title="1）每月的销售量"></a>1）每月的销售量</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1970-01 订单数1307</span><br><span class="line">2020-01 订单数14270</span><br><span class="line">2020-02 订单数17995</span><br><span class="line">2020-03 订单数18688</span><br><span class="line">2020-04 订单数11868</span><br><span class="line">2020-05 订单数40334</span><br><span class="line">2020-06 订单数41364</span><br><span class="line">2020-07 订单数76418</span><br><span class="line">2020-08 订单数100007</span><br><span class="line">2020-09 订单数70484</span><br><span class="line">2020-10 订单数104063</span><br><span class="line">2020-11 订单数66060</span><br></pre></td></tr></table></figure><ul><li>其中 1970-01 应该是数据的问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; YearMonth.from(formatter.parse(a[TIME])), </span><br><span class="line">                        TreeMap::<span class="keyword">new</span>, counting()))</span><br><span class="line">    .forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot; 订单数 &quot;</span> + v);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="2）销量最高的月份"><a href="#2）销量最高的月份" class="headerlink" title="2）销量最高的月份"></a>2）销量最高的月份</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1970-01 订单数1307</span><br><span class="line">2020-01 订单数14270</span><br><span class="line">2020-02 订单数17995</span><br><span class="line">2020-03 订单数18688</span><br><span class="line">2020-04 订单数11868</span><br><span class="line">2020-05 订单数40334</span><br><span class="line">2020-06 订单数41364</span><br><span class="line">2020-07 订单数76418</span><br><span class="line">2020-08 订单数100007</span><br><span class="line">2020-09 订单数70484</span><br><span class="line">2020-10 订单数104063  *</span><br><span class="line">2020-11 订单数66060</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; YearMonth.from(formatter.parse(a[TIME])), counting()))</span><br><span class="line">    .entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .max(Comparator.comparingLong(Map.Entry::getValue))</span><br><span class="line">    <span class="comment">// 也可以用 Map.Entry.comparingByValue()</span></span><br><span class="line">    .orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="3）求销量最高的商品"><a href="#3）求销量最高的商品" class="headerlink" title="3）求销量最高的商品"></a>3）求销量最高的商品</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1515966223517846928=2746</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; a[PRODUCT_ID], counting()))</span><br><span class="line">    .entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .max(Comparator.comparingLong(Map.Entry::getValue))</span><br><span class="line">    .orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="4）下单最多的前10用户"><a href="#4）下单最多的前10用户" class="headerlink" title="4）下单最多的前10用户"></a>4）下单最多的前10用户</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.515915625512423e+18 订单数1092</span><br><span class="line">1.5159156255121183e+18 订单数1073</span><br><span class="line">1.515915625512378e+18 订单数1040</span><br><span class="line">1.515915625512377e+18 订单数1028</span><br><span class="line">1.5159156255136955e+18 订单数1002</span><br><span class="line">1.515915625512422e+18 订单数957</span><br><span class="line">1.515915625513446e+18 订单数957</span><br><span class="line">1.515915625513447e+18 订单数928</span><br><span class="line">1.515915625514598e+18 订单数885</span><br><span class="line">1.5159156255147195e+18 订单数869</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; a[USER_ID], counting()))</span><br><span class="line">    .entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted(Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())</span><br><span class="line">    .limit(<span class="number">10</span>).forEach(e -&gt; &#123;</span><br><span class="line">        System.out.println(e.getKey() + <span class="string">&quot; 订单数 &quot;</span> + e.getValue());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(comparator);</span><br><span class="line">        <span class="keyword">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> r = <span class="keyword">super</span>.offer(e);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; max) &#123;</span><br><span class="line">            <span class="keyword">this</span>.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; a[USER_ID], counting()))</span><br><span class="line">    .entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .parallel()</span><br><span class="line">    .collect(</span><br><span class="line">            () -&gt; <span class="keyword">new</span> MyQueue&lt;&gt;(Map.Entry.comparingByValue(), <span class="number">10</span>),</span><br><span class="line">            MyQueue::offer,</span><br><span class="line">            AbstractQueue::addAll</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="5-1）每个地区下单最多的用户"><a href="#5-1）每个地区下单最多的用户" class="headerlink" title="5.1）每个地区下单最多的用户"></a>5.1）每个地区下单最多的用户</h3><p>结果应为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">上海=Optional[1.5159156255127636e+18=634]</span><br><span class="line">广东=Optional[1.515915625512377e+18=1028]</span><br><span class="line">天津=Optional[1.5159156255120858e+18=530]</span><br><span class="line">四川=Optional[1.5159156255121551e+18=572]</span><br><span class="line">浙江=Optional[1.5159156255121183e+18=564]</span><br><span class="line">重庆=Optional[1.515915625512764e+18=632]</span><br><span class="line">湖北=Optional[1.5159156255121183e+18=509]</span><br><span class="line">湖南=Optional[1.5159156255120548e+18=545]</span><br><span class="line">江苏=Optional[1.5159156255122386e+18=551]</span><br><span class="line">海南=Optional[1.5159156255121178e+18=556]</span><br><span class="line">北京=Optional[1.5159156255128172e+18=584]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(line -&gt; line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(array -&gt; array[USER_REGION], </span><br><span class="line">                        groupingBy(array -&gt; array[USER_ID], counting())))</span><br><span class="line">    .entrySet().stream()</span><br><span class="line">    .map(e -&gt; Map.entry(</span><br><span class="line">            e.getKey(),</span><br><span class="line">            e.getValue().entrySet().stream().max(Map.Entry.comparingByValue())</span><br><span class="line">    ))</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="5-2）每个地区下单最多的前3用户"><a href="#5-2）每个地区下单最多的前3用户" class="headerlink" title="5.2）每个地区下单最多的前3用户"></a>5.2）每个地区下单最多的前3用户</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">上海</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255127636e+18=634</span><br><span class="line">1.515915625512118e+18=583</span><br><span class="line">1.515915625512422e+18=561</span><br><span class="line">广东</span><br><span class="line">--------------------------</span><br><span class="line">1.515915625512377e+18=1028</span><br><span class="line">1.5159156255121544e+18=572</span><br><span class="line">1.5159156255120845e+18=571</span><br><span class="line">天津</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255120858e+18=530</span><br><span class="line">1.5159156255122383e+18=504</span><br><span class="line">1.5159156255123333e+18=481</span><br><span class="line">四川</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255121551e+18=572</span><br><span class="line">1.5159156255123768e+18=568</span><br><span class="line">1.515915625512055e+18=552</span><br><span class="line">浙江</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255121183e+18=564</span><br><span class="line">1.515915625513058e+18=520</span><br><span class="line">1.515915625512423e+18=513</span><br><span class="line">重庆</span><br><span class="line">--------------------------</span><br><span class="line">1.515915625512764e+18=632</span><br><span class="line">1.5159156255121188e+18=572</span><br><span class="line">1.515915625512085e+18=562</span><br><span class="line">湖北</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255121183e+18=509</span><br><span class="line">1.515915625512818e+18=508</span><br><span class="line">1.5159156255148017e+18=386</span><br><span class="line">湖南</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255120548e+18=545</span><br><span class="line">1.5159156255120855e+18=543</span><br><span class="line">1.5159156255134449e+18=511</span><br><span class="line">江苏</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255122386e+18=551</span><br><span class="line">1.5159156255122842e+18=541</span><br><span class="line">1.5159156255120842e+18=499</span><br><span class="line">海南</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255121178e+18=556</span><br><span class="line">1.5159156255128174e+18=547</span><br><span class="line">1.5159156255122022e+18=545</span><br><span class="line">北京</span><br><span class="line">--------------------------</span><br><span class="line">1.5159156255128172e+18=584</span><br><span class="line">1.515915625512423e+18=579</span><br><span class="line">1.5159156255123786e+18=558</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .collect(groupingBy(a -&gt; a[USER_REGION], groupingBy(a -&gt; a[USER_ID], counting())))</span><br><span class="line">    <span class="comment">/*.forEach((k,v)-&gt;&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(k);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;---------------&quot;);</span></span><br><span class="line"><span class="comment">        v.forEach((x,y)-&gt;&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(x + &quot;:&quot; + y);</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;);*/</span></span><br><span class="line">    .entrySet()</span><br><span class="line">    .stream()</span><br><span class="line">    .map(e -&gt;</span><br><span class="line">        Map.entry(</span><br><span class="line">            e.getKey(),</span><br><span class="line">            e.getValue().entrySet().stream()</span><br><span class="line">                .sorted(Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())</span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .toList()</span><br><span class="line">        )</span><br><span class="line">    ).forEach(e -&gt; &#123;</span><br><span class="line">        System.out.println(e.getKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        e.getValue().forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="6-1）按类别统计销量"><a href="#6-1）按类别统计销量" class="headerlink" title="6.1）按类别统计销量"></a>6.1）按类别统计销量</h3><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">accessories.bag 订单数 3063</span><br><span class="line">accessories.umbrella 订单数 33</span><br><span class="line">apparel.costume 订单数 2</span><br><span class="line">apparel.glove 订单数 1942</span><br><span class="line">apparel.shirt 订单数 235</span><br><span class="line">apparel.shoes 订单数 2</span><br><span class="line">apparel.sock 订单数 21</span><br><span class="line">apparel.trousers 订单数 99</span><br><span class="line">apparel.tshirt 订单数 372</span><br><span class="line">appliances.environment.air_conditioner 订单数 7379</span><br><span class="line">appliances.environment.air_heater 订单数 2599</span><br><span class="line">appliances.environment.climate 订单数 101</span><br><span class="line">appliances.environment.fan 订单数 3855</span><br><span class="line">appliances.environment.vacuum 订单数 15971</span><br><span class="line">appliances.environment.water_heater 订单数 3644</span><br><span class="line">appliances.iron 订单数 8249</span><br><span class="line">appliances.ironing_board 订单数 2128</span><br><span class="line">appliances.kitchen.blender 订单数 8672</span><br><span class="line">appliances.kitchen.coffee_grinder 订单数 811</span><br><span class="line">appliances.kitchen.coffee_machine 订单数 1250</span><br><span class="line">appliances.kitchen.dishwasher 订单数 2663</span><br><span class="line">appliances.kitchen.fryer 订单数 97</span><br><span class="line">appliances.kitchen.grill 订单数 1579</span><br><span class="line">appliances.kitchen.hood 订单数 9045</span><br><span class="line">appliances.kitchen.juicer 订单数 1187</span><br><span class="line">appliances.kitchen.kettle 订单数 12740</span><br><span class="line">appliances.kitchen.meat_grinder 订单数 4520</span><br><span class="line">appliances.kitchen.microwave 订单数 7615</span><br><span class="line">appliances.kitchen.mixer 订单数 2610</span><br><span class="line">appliances.kitchen.oven 订单数 4000</span><br><span class="line">appliances.kitchen.refrigerators 订单数 20259</span><br><span class="line">appliances.kitchen.steam_cooker 订单数 464</span><br><span class="line">appliances.kitchen.toster 订单数 1381</span><br><span class="line">appliances.kitchen.washer 订单数 14563</span><br><span class="line">appliances.personal.hair_cutter 订单数 2716</span><br><span class="line">appliances.personal.massager 订单数 1724</span><br><span class="line">appliances.personal.scales 订单数 6727</span><br><span class="line">appliances.sewing_machine 订单数 1576</span><br><span class="line">appliances.steam_cleaner 订单数 119</span><br><span class="line">auto.accessories.alarm 订单数 252</span><br><span class="line">auto.accessories.anti_freeze 订单数 109</span><br><span class="line">auto.accessories.compressor 订单数 276</span><br><span class="line">auto.accessories.player 订单数 117</span><br><span class="line">auto.accessories.radar 订单数 80</span><br><span class="line">auto.accessories.videoregister 订单数 533</span><br><span class="line">computers.components.cdrw 订单数 158</span><br><span class="line">computers.components.cooler 订单数 3377</span><br><span class="line">computers.components.cpu 订单数 4147</span><br><span class="line">computers.components.hdd 订单数 5054</span><br><span class="line">computers.components.memory 订单数 1597</span><br><span class="line">computers.components.motherboard 订单数 860</span><br><span class="line">computers.components.power_supply 订单数 986</span><br><span class="line">computers.components.sound_card 订单数 26</span><br><span class="line">computers.components.videocards 订单数 1190</span><br><span class="line">computers.desktop 订单数 1041</span><br><span class="line">computers.ebooks 订单数 397</span><br><span class="line">computers.gaming 订单数 164</span><br><span class="line">computers.network.router 订单数 6473</span><br><span class="line">computers.notebook 订单数 25866</span><br><span class="line">computers.peripherals.camera 订单数 1041</span><br><span class="line">computers.peripherals.joystick 订单数 1192</span><br><span class="line">computers.peripherals.keyboard 订单数 3803</span><br><span class="line">computers.peripherals.monitor 订单数 3272</span><br><span class="line">computers.peripherals.mouse 订单数 12664</span><br><span class="line">computers.peripherals.printer 订单数 3458</span><br><span class="line">computers.peripherals.scanner 订单数 74</span><br><span class="line">construction.components.faucet 订单数 133</span><br><span class="line">construction.tools.drill 订单数 622</span><br><span class="line">construction.tools.generator 订单数 46</span><br><span class="line">construction.tools.heater 订单数 348</span><br><span class="line">construction.tools.light 订单数 10</span><br><span class="line">construction.tools.pump 订单数 65</span><br><span class="line">construction.tools.saw 订单数 169</span><br><span class="line">construction.tools.screw 订单数 2408</span><br><span class="line">construction.tools.welding 订单数 183</span><br><span class="line">country_yard.cultivator 订单数 33</span><br><span class="line">country_yard.lawn_mower 订单数 111</span><br><span class="line">country_yard.watering 订单数 5</span><br><span class="line">country_yard.weather_station 订单数 53</span><br><span class="line">electronics.audio.acoustic 订单数 438</span><br><span class="line">electronics.audio.dictaphone 订单数 12</span><br><span class="line">electronics.audio.headphone 订单数 20084</span><br><span class="line">electronics.audio.microphone 订单数 1062</span><br><span class="line">electronics.audio.subwoofer 订单数 70</span><br><span class="line">electronics.calculator 订单数 35</span><br><span class="line">electronics.camera.photo 订单数 348</span><br><span class="line">electronics.camera.video 订单数 133</span><br><span class="line">electronics.clocks 订单数 6474</span><br><span class="line">electronics.smartphone 订单数 102365</span><br><span class="line">electronics.tablet 订单数 6395</span><br><span class="line">electronics.telephone 订单数 2437</span><br><span class="line">electronics.video.projector 订单数 114</span><br><span class="line">electronics.video.tv 订单数 17618</span><br><span class="line">furniture.bathroom.bath 订单数 232</span><br><span class="line">furniture.bathroom.toilet 订单数 44</span><br><span class="line">furniture.bedroom.bed 订单数 451</span><br><span class="line">furniture.bedroom.blanket 订单数 68</span><br><span class="line">furniture.bedroom.pillow 订单数 1882</span><br><span class="line">furniture.kitchen.chair 订单数 3084</span><br><span class="line">furniture.kitchen.table 订单数 11260</span><br><span class="line">furniture.living_room.cabinet 订单数 3117</span><br><span class="line">furniture.living_room.chair 订单数 1439</span><br><span class="line">furniture.living_room.shelving 订单数 2572</span><br><span class="line">furniture.living_room.sofa 订单数 401</span><br><span class="line">furniture.universal.light 订单数 22</span><br><span class="line">kids.bottles 订单数 63</span><br><span class="line">kids.carriage 订单数 41</span><br><span class="line">kids.dolls 订单数 379</span><br><span class="line">kids.fmcg.diapers 订单数 11</span><br><span class="line">kids.skates 订单数 1159</span><br><span class="line">kids.swing 订单数 8</span><br><span class="line">kids.toys 订单数 643</span><br><span class="line">medicine.tools.tonometer 订单数 1106</span><br><span class="line">sport.bicycle 订单数 569</span><br><span class="line">sport.diving 订单数 10</span><br><span class="line">sport.ski 订单数 17</span><br><span class="line">sport.snowboard 订单数 3</span><br><span class="line">sport.tennis 订单数 87</span><br><span class="line">sport.trainer 订单数 210</span><br><span class="line">stationery.battery 订单数 5210</span><br><span class="line">stationery.cartrige 订单数 2473</span><br><span class="line">stationery.paper 订单数 1085</span><br><span class="line">stationery.stapler 订单数 97</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">       .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">       .filter(a -&gt; !a[CATEGORY_CODE].isEmpty())</span><br><span class="line">       .collect(groupingBy(a -&gt; a[CATEGORY_CODE], TreeMap::<span class="keyword">new</span>, counting()))</span><br><span class="line">       .forEach((k, v) -&gt; &#123;</span><br><span class="line">           System.out.println(k + <span class="string">&quot; 订单数 &quot;</span> + v);</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h3 id="6-2）按一级类别统计销量"><a href="#6-2）按一级类别统计销量" class="headerlink" title="6.2）按一级类别统计销量"></a>6.2）按一级类别统计销量</h3><p>结果应为</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">accessories 订单数 3096</span><br><span class="line">apparel 订单数 2673</span><br><span class="line">appliances 订单数 150244</span><br><span class="line">auto 订单数 1367</span><br><span class="line">computers 订单数 76840</span><br><span class="line">construction 订单数 3984</span><br><span class="line">country_yard 订单数 202</span><br><span class="line">electronics 订单数 157585</span><br><span class="line">furniture 订单数 24572</span><br><span class="line">kids 订单数 2304</span><br><span class="line">medicine 订单数 1106</span><br><span class="line">sport 订单数 896</span><br><span class="line">stationery 订单数 8865</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(l -&gt; l.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .filter(a -&gt; !a[CATEGORY_CODE].isEmpty())</span><br><span class="line">    .collect(groupingBy(TestData::firstCategory, TreeMap::<span class="keyword">new</span>, counting()))</span><br><span class="line">    .forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot; 订单数 &quot;</span> + v);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstCategory</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">    String category = a[CATEGORY_CODE];</span><br><span class="line">    <span class="keyword">int</span> dot = category.indexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> category.substring(<span class="number">0</span>, dot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）按价格区间统计销量"><a href="#7）按价格区间统计销量" class="headerlink" title="7）按价格区间统计销量"></a>7）按价格区间统计销量</h3><ul><li>p &lt;100</li><li>100&lt;= p &lt;500</li><li>500&lt;=p&lt;1000</li><li>1000&lt;=p</li></ul><p>结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[0,100)=291624</span><br><span class="line">[1000,∞)=14514</span><br><span class="line">[500,1000)=52857</span><br><span class="line">[100,500)=203863</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">priceRange</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (price &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[0,100)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (price &gt;= <span class="number">100</span> &amp;&amp; price &lt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[100,500)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (price &gt;= <span class="number">500</span> &amp;&amp; price &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[500,1000)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[1000,∞)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(line -&gt; line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .map(array -&gt; Double.parseDouble(array[PRICE]))</span><br><span class="line">    .collect(groupingBy(TestData::priceRange, counting()))</span><br></pre></td></tr></table></figure><h3 id="8）不同年龄段女性所下不同类别订单"><a href="#8）不同年龄段女性所下不同类别订单" class="headerlink" title="8）不同年龄段女性所下不同类别订单"></a>8）不同年龄段女性所下不同类别订单</h3><ul><li>a &lt; 18</li><li>18 &lt;= a &lt; 30</li><li>30 &lt;= a &lt; 50</li><li>50 &lt;= a</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[0,18)       accessories      81</span><br><span class="line">[0,18)       apparel          60</span><br><span class="line">[0,18)       appliances       4326</span><br><span class="line">[0,18)       computers        1984</span><br><span class="line">...</span><br><span class="line">[18,30)      accessories      491</span><br><span class="line">[18,30)      apparel          488</span><br><span class="line">[18,30)      appliances       25240</span><br><span class="line">[18,30)      computers        13076</span><br><span class="line">...</span><br><span class="line">[30,50)      accessories      890</span><br><span class="line">[30,50)      apparel          893</span><br><span class="line">[30,50)      appliances       42755</span><br><span class="line">[30,50)      computers        21490</span><br><span class="line">...</span><br><span class="line">[50,∞)       accessories      41</span><br><span class="line">[50,∞)       apparel          41</span><br><span class="line">[50,∞)       appliances       2255</span><br><span class="line">[50,∞)       computers        1109</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">ageRange</span><span class="params">(String[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = Double.valueOf(array[USER_AGE]).intValue();</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[0,18)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">30</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[18,30)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[30,50)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[50,∞)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lines.skip(<span class="number">1</span>)</span><br><span class="line">    .map(line -&gt; line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    .filter(array -&gt; !array[CATEGORY_CODE].isEmpty())</span><br><span class="line">    .filter(array -&gt; array[USER_SEX].equals(<span class="string">&quot;女&quot;</span>))</span><br><span class="line">    .collect(groupingBy(TestData::ageRange, </span><br><span class="line">                        groupingBy(TestData::firstCategory, TreeMap::<span class="keyword">new</span>, counting())))</span><br></pre></td></tr></table></figure><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>例子 1: 使用<code>ExecutorService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;开始统计&quot;</span>);</span><br><span class="line">        service.submit(() -&gt; monthlySalesReport(map-&gt;map.entrySet().forEach(e-&gt;logger.info(e.toString()))));</span><br><span class="line">        logger.info(<span class="string">&quot;执行其它操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">monthlySalesReport</span><span class="params">(Consumer&lt;Map&lt;YearMonth, Long&gt;&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(Path.of(<span class="string">&quot;./data.txt&quot;</span>))) &#123;</span><br><span class="line">        Map&lt;YearMonth, Long&gt; collect = lines.skip(<span class="number">1</span>)</span><br><span class="line">                .map(line -&gt; line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                .collect(groupingBy(array -&gt; YearMonth.from(formatter.parse(array[TIME])), TreeMap::<span class="keyword">new</span>, counting()));</span><br><span class="line">        consumer.accept(collect);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子 2: 使用<code>CompletableFuture</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;开始统计&quot;</span>);</span><br><span class="line">    CompletableFuture</span><br><span class="line">        .supplyAsync(() -&gt; monthlySalesReport())</span><br><span class="line">            .thenAccept(map -&gt; map.entrySet().forEach(e -&gt; logger.info(e.toString())));</span><br><span class="line">    logger.info(<span class="string">&quot;执行其它操作&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;YearMonth, Long&gt; <span class="title">monthlySalesReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(Path.of(<span class="string">&quot;./data.txt&quot;</span>))) &#123;</span><br><span class="line">        Map&lt;YearMonth, Long&gt; collect = lines.skip(<span class="number">1</span>)</span><br><span class="line">                .map(line -&gt; line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                .collect(groupingBy(array -&gt; YearMonth.from(formatter.parse(array[TIME])), TreeMap::<span class="keyword">new</span>, counting()));</span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h2><ul><li>什么是框架？<ul><li>半成品软件，帮助开发者快速构建应用程序</li><li>框架提供的都是固定<strong>不变的</strong>、<strong>已知的</strong>、可以重用的代码</li><li>而那些每个应用不同的业务逻辑，<strong>变化的</strong>、<strong>未知的</strong>部分，则在框架外由开发者自己实现</li></ul></li></ul><h3 id="将未知交给子类"><a href="#将未知交给子类" class="headerlink" title="将未知交给子类"></a>将未知交给子类</h3><p>Spring 延迟创建 bean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">class DefaultSingletonBeanRegistry &#123;</span><br><span class="line">   - singletonObjects: Map</span><br><span class="line">   + getSingleton(name, factory)</span><br><span class="line">&#125;</span><br><span class="line">class AbstractAutowireCapableBeanFactory &#123;</span><br><span class="line">   # createBean(name, definition, args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultSingletonBeanRegistry &lt;|-- AbstractAutowireCapableBeanFactory</span><br></pre></td></tr></table></figure><p>Spring 中的很多类有非常复杂的继承关系，并且它们分工明确，你做什么，我做什么，职责是划分好的。例如：</p><ul><li>DefaultSingletonBeanRegistry 是父类，它有个职责是缓存单例 bean，用下面方法实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; factory)</span></span></span><br></pre></td></tr></table></figure><ul><li>但如何创建 bean，这个父类是不知道的，创建 bean 是子类 AbstractAutowireCapableBeanFactory 的职责</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父类中 getSingleton 的内部就要使用 singletonFactory 函数对象来获得创建好的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="keyword">if</span>(singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        singletonObject = singletonFactory.getObject();</span><br><span class="line">        addSingleton(beanName, singletonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后子类创建单例 bean 时，会把 ObjectFactory 这个函数对象传进去<ul><li>创建其它 scope bean，不需要用 getSingleton 缓存</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将未知交给用户"><a href="#将未知交给用户" class="headerlink" title="将未知交给用户"></a>将未知交给用户</h3><p>JdbcTemplate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">   id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">   name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">   sex <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;赵一伤&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;钱二败&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;孙三毁&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;李四摧&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;周五输&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;吴六破&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;郑七灭&#x27;</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;王八衰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>spring 中 JdbcTemplate 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HikariDataSource dataSource = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        String sql = <span class="string">&quot;select id,name,sex from student&quot;</span>;</span><br><span class="line">        template.query(sql, (rs, index) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            String sex = rs.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Student(id, name, sex);</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">record</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, String sex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对 query 来讲，建立数据库连接，创建 Statement 对象，执行查询这些步骤都是固定的</li><li>而结果要如何用 java 对象封装，这对框架代码是未知的，用 RowMapper 接口代表，将来它的 lambda 实现将结果转换成需要的 java 对象</li></ul><p>ApplicationListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExtend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context </span><br><span class="line">            = SpringApplication.run(TestExtend.class, args);</span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">&quot;context&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationListener&lt;MyEvent&gt; <span class="title">myListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (event -&gt; System.out.println(<span class="string">&quot;收到事件:&quot;</span> + event));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">&quot;controller&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对 spring 来讲，它并不知道如何处理事件</li><li>因此可以提供一个类型为 ApplicationListener 的 lambda 对象</li></ul><h3 id="延迟拼接条件"><a href="#延迟拼接条件" class="headerlink" title="延迟拼接条件"></a>延迟拼接条件</h3><p>Mybatis-Plus</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatisPlus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context </span><br><span class="line">            = SpringApplication.run(TestMyBatisPlus.class, args);</span><br><span class="line">        StudentMapper mapper = context.getBean(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">        test(mapper, List.of(<span class="string">&quot;赵一伤&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StudentMapper mapper, List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Student&gt; query = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        query.in(!names.isEmpty(), Student::getName, names);</span><br><span class="line">        System.out.println(mapper.selectList(query));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较典型的用法有两处：</p><p>第一，在调用 in 等方法添加条件时，第一个参数是 boolean 为 true 才会拼接 SQL 条件，否则不拼接</p><p>如何实现的呢？用 DoSomething 类型的 lambda 对象来延迟拼接操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoSomething</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Children <span class="title">maybeDo</span><span class="params">(<span class="keyword">boolean</span> condition, DoSomething something)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        something.doIt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> typedThis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然而，它在实现 <code>()-&gt;appendSqlSegments(...)</code> 拼接时，是不断修改一个 expression 状态变量，为函数编程所不齿</li></ul><h3 id="偏门用法"><a href="#偏门用法" class="headerlink" title="偏门用法"></a>偏门用法</h3><p>第二，如果用 LambdaQueryWrapper 拼接 sql 条件时，<strong>为了取得列名</strong>，采用了这个办法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student::getName</span><br></pre></td></tr></table></figure><p>它要做的事很简单，但内部实现却比较复杂</p><ol><li>必须用 <code>Student::getName</code> 方法引用，而不能用其它 Lambda 对象</li><li>它会实现 Serializable 接口，序列化时会把它变成 SerializedLambda</li><li>想办法拿到 SerializedLambda 对象（反射调用 writeReplace）</li><li>通过 SerializedLambda 能够获得它对应的实际方法，也就是 String getName() 和所在类 Student</li><li>再通过方法名推导得到属性名（去掉 is，get）即 name</li><li>所在类 Student 知道了，属性名 name 也有了，就可以进一步确定列名<ol><li>属性上的 @TableField 指定的列名优先</li><li>没有 @TableField，把属性名当作列名</li></ol></li></ol><blockquote><p><em><strong>P.S.</strong></em></p><ul><li>不是很喜欢这种做法，比较恶心</li><li>但它确实是想做这么一件事：在代码中全面使用 java 的字段名，避免出现数据库的列名</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        Type1 lambda = (Type1 &amp; Serializable) (a, b) -&gt; a + b;</span></span><br><span class="line">    Type2 lambda = (Type2 &amp; Serializable) Student::getName;</span><br><span class="line">    <span class="comment">// 将 lambda 对象序列化</span></span><br><span class="line">    Method writeReplace = lambda.getClass().getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">    SerializedLambda serializedLambda = (SerializedLambda) writeReplace.invoke(lambda);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到 lambda 对象使用类、所属类和实现方法名</span></span><br><span class="line">    System.out.println(serializedLambda.getCapturingClass());</span><br><span class="line">    System.out.println(serializedLambda.getImplClass());</span><br><span class="line">    System.out.println(serializedLambda.getImplMethodName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Type2</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Type1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2><p>统计页面的访问次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Pattern reg = Pattern.compile(<span class="string">&quot;(\\S+) - \\[(.+)] (.+) (.+)&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FILES = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            sequence();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sequence</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Map&lt;String, Long&gt; m0 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FILES; i++) &#123;</span><br><span class="line">            Map&lt;String, Long&gt; mi = one(i);</span><br><span class="line">            m0 = Stream.of(m0, mi)</span><br><span class="line">                    .flatMap(m -&gt; m.entrySet().stream())</span><br><span class="line">                    .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, Long::sum));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Long&gt; e : m0.entrySet()) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(e);</span></span><br><span class="line">            sum += e.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;cost: &quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Long&gt; <span class="title">one</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(Path.of(String.format(<span class="string">&quot;web_server_access_%d.log&quot;</span>, i)))) &#123;</span><br><span class="line">            <span class="keyword">return</span> lines</span><br><span class="line"><span class="comment">//                            .limit(10)</span></span><br><span class="line">                    .map(reg::matcher)</span><br><span class="line">                    .filter(Matcher::find)</span><br><span class="line">                    .map(matcher -&gt; matcher.group(<span class="number">3</span>))</span><br><span class="line">                    .collect(groupingBy(identity(), counting()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallel</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;CompletableFuture&lt;Map&lt;String, Long&gt;&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FILES; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i;</span><br><span class="line">            CompletableFuture&lt;Map&lt;String, Long&gt;&gt; future = CompletableFuture.supplyAsync(() -&gt; one(k));</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Map&lt;String, Long&gt;&gt; f0 = futures.getFirst();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; futures.size(); i++) &#123;</span><br><span class="line">            f0 = f0.thenCombine(futures.get(i), (m1, m2) -&gt;</span><br><span class="line">                    Stream.of(m1, m2)</span><br><span class="line">                            .flatMap(m -&gt; m.entrySet().stream())</span><br><span class="line">                            .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, Long::sum))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Long&gt; map = f0.get();</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Long&gt; e : map.entrySet()) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(e);</span></span><br><span class="line">            sum += e.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;cost: &quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UI-事件"><a href="#UI-事件" class="headerlink" title="UI 事件"></a>UI 事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUIEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;Lambda Example&quot;</span>);</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">&quot;Click me&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lambda表达式定义按钮的点击事件处理程序</span></span><br><span class="line">        button.addActionListener(e -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Button clicked!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        frame.add(button);</span><br><span class="line">        frame.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-实现原理"><a href="#五-实现原理" class="headerlink" title="五. 实现原理"></a>五. 实现原理</h1><h2 id="lambda-原理"><a href="#lambda-原理" class="headerlink" title="lambda 原理"></a>lambda 原理</h2><p>以下面代码为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test((a, b) -&gt; a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(BinaryOperator&lt;Integer&gt; lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="第一步，生成静态方法"><a href="#第一步，生成静态方法" class="headerlink" title="第一步，生成静态方法"></a>第一步，生成静态方法</h3><p>如何证明？用反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : TestLambda.class.getDeclaredMethods()) &#123;</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为（去掉了包名，容易阅读）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> TestLambda.main(java.lang.String[])</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> TestLambda.test(BinaryOperator)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> java.lang.Integer TestLambda.lambda$main$<span class="number">0</span>(Integer,Integer)</span><br></pre></td></tr></table></figure><ul><li><p>可以看到除了我们自己写的 main 和 test 以外，多出一个名为 <code>lambda$main$0</code> 的方法</p></li><li><p>这个方法是在编译期间由编译器生成的方法，是 synthetic（合成）方法</p></li><li><p>它的参数、内容就是 lambda 表达式提供的参数和内容，如下面代码片段所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer lambda$main$<span class="number">0</span>(Integer a, Integer b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二步，生成实现类字节码"><a href="#第二步，生成实现类字节码" class="headerlink" title="第二步，生成实现类字节码"></a>第二步，生成实现类字节码</h3><p>如果是我自己造一个对象包含此方法，可以这么做</p><p>先创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaObject</span> <span class="keyword">implements</span> <span class="title">BinaryOperator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TestLambda.lambda$main$<span class="number">0</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将来使用时，创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="keyword">new</span> LambdaObject());</span><br></pre></td></tr></table></figure><p>只不过，jvm 是在运行期间造出的这个类以及对象而已，要想查看这个类</p><p>在 jdk 21 中运行时添加虚拟机参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djdk.invoke.LambdaMetafactory.dumpProxyClassFiles</span><br></pre></td></tr></table></figure><p>早期 jdk 添加的参数是（没有去进行版本比对了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djdk.internal.lambda.dumpProxyClasses</span><br></pre></td></tr></table></figure><p>若想实现在运行期间生成上述 class 字节码，有两种手段</p><ul><li>一是动态代理，jdk 并没有采用这种办法来生成 Lambda 类</li><li>二是用 LambdaMetaFactory，它配合 MethodHandle API 在执行时更具性能优势</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        test((a, b) -&gt; a + b);</span><br><span class="line"></span><br><span class="line">        MethodHandles.Lookup lookup = MethodHandles.lookup();</span><br><span class="line">        MethodType factoryType = MethodType.methodType(BinaryOperator.class);</span><br><span class="line">        MethodType interfaceMethodType = MethodType.methodType(Object.class, Object.class, Object.class);</span><br><span class="line">        MethodType implementsMethodType = MethodType.methodType(Integer.class, Integer.class, Integer.class);</span><br><span class="line"></span><br><span class="line">        MethodHandle implementsMethod = lookup.findStatic(TestLambda1.class, <span class="string">&quot;lambda$main$1&quot;</span>, implementsMethodType);</span><br><span class="line"></span><br><span class="line">        MethodType lambdaType = MethodType.methodType(Integer.class, Integer.class, Integer.class);</span><br><span class="line">        CallSite callSite = LambdaMetafactory.metafactory(lookup,</span><br><span class="line">                <span class="string">&quot;apply&quot;</span>, factoryType, interfaceMethodType,</span><br><span class="line">                implementsMethod,</span><br><span class="line">                lambdaType);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Integer&gt; lambda = (BinaryOperator) callSite.getTarget().invoke();</span><br><span class="line">        test(lambda);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Integer lambda$main$<span class="number">1</span>(Integer a, Integer b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(BinaryOperator&lt;Integer&gt; lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><p>“apply” 是接口方法名</p></li><li><p>factoryType 是工厂方法长相</p></li><li><p>interfaceMethodType 是接口方法长相</p></li><li><p>implementsMethod 是实现方法</p><ul><li>implementsMethodType 是实现方法长相</li></ul></li><li><p>lambdaType 是实际函数对象长相</p></li><li><p>callSite.getTarget() 实际是调用实现类的构造方法对应的 mh，最后 invoke 返回函数对象</p></li></ul><h2 id="方法引用原理"><a href="#方法引用原理" class="headerlink" title="方法引用原理"></a>方法引用原理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">test(String::toLowerCase);</span><br><span class="line">        </span><br><span class="line">        MethodHandles.Lookup lookup = MethodHandles.lookup();</span><br><span class="line">        MethodType factoryType = MethodType.methodType(Function.class);</span><br><span class="line">        MethodType interfaceMethodType = MethodType.methodType(Object.class, Object.class);</span><br><span class="line">        MethodHandle implementsMethod = lookup.findVirtual(String.class, <span class="string">&quot;toLowerCase&quot;</span>, MethodType.methodType(String.class));</span><br><span class="line">        MethodType lambdaType = MethodType.methodType(String.class, String.class);</span><br><span class="line">        CallSite callSite = LambdaMetafactory.metafactory(lookup,</span><br><span class="line">                <span class="string">&quot;apply&quot;</span>, factoryType, interfaceMethodType,</span><br><span class="line">                implementsMethod,</span><br><span class="line">                lambdaType);</span><br><span class="line"></span><br><span class="line">        Function&lt;String, String&gt; lambda = (Function&lt;String, String&gt;) callSite.getTarget().invoke();</span><br><span class="line">        System.out.println(lambda.apply(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Function&lt;String,String&gt; lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.apply(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包原理"><a href="#闭包原理" class="headerlink" title="闭包原理"></a>闭包原理</h2><p>捕获基本类型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">test((a, b) -&gt; a + b + c);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(BinaryOperator&lt;Integer&gt; lambda)</span> </span>&#123;</span><br><span class="line">    System.out.println(lambda.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成一个带 3 个参数的方法，但它和 BinaryOperator 还差一个 int 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer lambda$main$<span class="number">1</span>(<span class="keyword">int</span> c, Integer a, Integer b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//        int c = 10;</span></span><br><span class="line"><span class="comment">//        test((a, b) -&gt; a + b + c);</span></span><br><span class="line"></span><br><span class="line">        MethodHandles.Lookup lookup = MethodHandles.lookup();</span><br><span class="line">        MethodType factoryType = MethodType.methodType(BinaryOperator.class, <span class="keyword">int</span>.class);</span><br><span class="line">        MethodType interfaceMethodType = MethodType.methodType(Object.class, Object.class, Object.class);</span><br><span class="line">        MethodType implementsMethodType = MethodType.methodType(Integer.class, <span class="keyword">int</span>.class, Integer.class, Integer.class);</span><br><span class="line"></span><br><span class="line">        MethodHandle implementsMethod = lookup.findStatic(TestLambda2.class, <span class="string">&quot;lambda$main$1&quot;</span>, implementsMethodType);</span><br><span class="line"></span><br><span class="line">        MethodType lambdaType = MethodType.methodType(Integer.class, Integer.class, Integer.class);</span><br><span class="line">        CallSite callSite = LambdaMetafactory.metafactory(lookup,</span><br><span class="line">                <span class="string">&quot;apply&quot;</span>, factoryType, interfaceMethodType,</span><br><span class="line">                implementsMethod,</span><br><span class="line">                lambdaType);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Integer&gt; lambda = (BinaryOperator) callSite.getTarget().invoke(<span class="number">10</span>);</span><br><span class="line">        test(lambda);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Integer lambda$main$<span class="number">1</span>(<span class="keyword">int</span> c, Integer a, Integer b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(BinaryOperator&lt;Integer&gt; lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同之处</p><ul><li>factoryType，除了原本的接口类型之外，多了实现方法第一个参数的类型</li><li>产生 lambda 对象的时候，通过 invoke 把这个参数的实际值传进去</li></ul><p>这样产生的 LambdaType 就是这样，并且生成 Lambda 对象时，c 的值被固定为 10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaType</span> <span class="keyword">implements</span> <span class="title">BinaryOperator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TestLambda2$$Lambda(<span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">apply</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TestLambda2.lambda$main$<span class="number">1</span>(<span class="keyword">this</span>.c, (Integer)a, (Integer)b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获引用类型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRef</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyRef</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">/*MyRef ref = new MyRef(10);</span></span><br><span class="line"><span class="comment">        test((a, b) -&gt; a + b + ref.age);*/</span></span><br><span class="line"></span><br><span class="line">        MethodHandles.Lookup lookup = MethodHandles.lookup();</span><br><span class="line">        MethodType factoryType = MethodType.methodType(BinaryOperator.class, MyRef.class);</span><br><span class="line">        MethodType interfaceMethodType = MethodType.methodType(Object.class, Object.class, Object.class);</span><br><span class="line">        MethodType implementsMethodType = MethodType.methodType(Integer.class, MyRef.class, Integer.class, Integer.class);</span><br><span class="line"></span><br><span class="line">        MethodHandle implementsMethod = lookup.findStatic(TestLambda4.class, <span class="string">&quot;lambda$main$1&quot;</span>, implementsMethodType);</span><br><span class="line"></span><br><span class="line">        MethodType lambdaType = MethodType.methodType(Integer.class, Integer.class, Integer.class);</span><br><span class="line">        CallSite callSite = LambdaMetafactory.metafactory(lookup,</span><br><span class="line">                <span class="string">&quot;apply&quot;</span>, factoryType, interfaceMethodType,</span><br><span class="line">                implementsMethod,</span><br><span class="line">                lambdaType);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Integer&gt; lambda = (BinaryOperator) callSite.getTarget().bindTo(<span class="keyword">new</span> MyRef(<span class="number">20</span>)).invoke();</span><br><span class="line">        test(lambda);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Integer lambda$main$<span class="number">1</span>(MyRef c, Integer a, Integer b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(BinaryOperator&lt;Integer&gt; lambda)</span> </span>&#123;</span><br><span class="line">        System.out.println(lambda.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与捕获基本类型变量类似，不过</p><p>除了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callSite.getTarget().invoke(<span class="keyword">new</span> MyRef(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><p>还可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callSite.getTarget().bindTo(<span class="keyword">new</span> MyRef(<span class="number">20</span>)).invoke();</span><br></pre></td></tr></table></figure><h2 id="Stream-构建"><a href="#Stream-构建" class="headerlink" title="Stream 构建"></a>Stream 构建</h2><p>自定义可切分迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpliterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpliterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        T[] array;</span><br><span class="line">        <span class="keyword">int</span> begin;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MySpliterator</span><span class="params">(T[] array, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.array = array;</span><br><span class="line">            <span class="keyword">this</span>.begin = begin;</span><br><span class="line">            <span class="keyword">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (begin &gt; end) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            action.accept(array[begin++]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (estimateSize() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (begin + end) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">                MySpliterator&lt;T&gt; res = <span class="keyword">new</span> MySpliterator&lt;&gt;(array, begin, mid);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + res);</span><br><span class="line">                begin = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.toString(Arrays.copyOfRange(array, begin, end + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> end - begin + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.SUBSIZED | Spliterator.ORDERED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] all = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        MySpliterator&lt;Integer&gt; spliterator = <span class="keyword">new</span> MySpliterator&lt;&gt;(all, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StreamSupport.stream(spliterator, <span class="keyword">false</span>)</span><br><span class="line">                .parallel()</span><br><span class="line">                .forEach(x -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：按每次切分固定大小来实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-道之伊始&quot;&gt;&lt;a href=&quot;#一-道之伊始&quot; class=&quot;headerlink&quot; title=&quot;一. 道之伊始&quot;&gt;&lt;/a&gt;一. 道之伊始&lt;/h1&gt;&lt;p&gt;宇宙初开之际，混沌之气笼罩着整个宇宙，一切模糊不清。&lt;/p&gt;
&lt;p&gt;然后，盘古开天，女娲造人：日月乃出、</summary>
      
    
    
    
    <category term="Java" scheme="https://castile.github.io/categories/Java/"/>
    
    
    <category term="函数式编程" scheme="https://castile.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lambda" scheme="https://castile.github.io/tags/Lambda/"/>
    
    <category term="纯函数" scheme="https://castile.github.io/tags/%E7%BA%AF%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用InvokeScriptedProcessor处理Record</title>
    <link href="https://castile.github.io/2024/03/18/%E4%BD%BF%E7%94%A8InvokeScriptedProcessor%E5%A4%84%E7%90%86Record/"/>
    <id>https://castile.github.io/2024/03/18/%E4%BD%BF%E7%94%A8InvokeScriptedProcessor%E5%A4%84%E7%90%86Record/</id>
    <published>2024-03-17T16:43:38.000Z</published>
    <updated>2024-03-17T16:43:38.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InvokeScriptedProcessor模板-一个更快的ExecuteScript"><a href="#InvokeScriptedProcessor模板-一个更快的ExecuteScript" class="headerlink" title="InvokeScriptedProcessor模板(一个更快的ExecuteScript)"></a>InvokeScriptedProcessor模板(一个更快的ExecuteScript)</h2><p>原文地址：<a href="https://funnifi.blogspot.com/2017/06/invokescriptedprocessor-template-faster.html">https://funnifi.blogspot.com/2017/06/invokescriptedprocessor-template-faster.html</a></p><p> 对于Apache Nifi中的快速，简单且小的脚本任务，ExecuteScript通常比InvokescriptedProcessor更好，因为很少有样板代码，关系和属性已经定义和支持，并且某些与Nifi API相关的对象（例如ProcessSession，ProcessContext和ComponentLog）已经被绑定到脚本引擎，作为脚本可以轻松使用的变量。 </p><p> 然而，一个权衡是性能;在ExecuteScript中，每次onTrigger被执行时，脚本都会被 evaluated  。对于InvokeScriptedProcessor，只要脚本(或任何InvokeScriptedProcessor属性)没有改变，脚本化的Processor实例就由处理器维护，当NiFi框架调用onTrigger()等父方法时，它的方法就会被简单地调用。 </p><p> 为了获得两者的最佳效果，我将InvokeScriptedProcessor实例放在一起，该实例的配置方式与ExecuteScript相同。提供了“成功”和“失败”的关系，API对象是可用的，如果您只是将您的ExecuteScript代码粘贴到下面脚本中的相同位置，它将表现得像一个性能更高的ExecuteScript实例。代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// imports go here</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>&#123;</span> <span class="keyword">void</span> executeScript(session, context, log, REL_SUCCESS, REL_FAILURE) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="comment">// your code goes here</span></span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroovyProcessor</span> <span class="keyword">implements</span> <span class="title">Processor</span> &#123;</span></span><br><span class="line">    <span class="keyword">def</span> REL_SUCCESS = <span class="keyword">new</span> Relationship.Builder().name(<span class="string">&quot;success&quot;</span>).description(<span class="string">&#x27;FlowFiles that were successfully processed are routed here&#x27;</span>).build()</span><br><span class="line">    <span class="keyword">def</span> REL_FAILURE = <span class="keyword">new</span> Relationship.Builder().name(<span class="string">&quot;failure&quot;</span>).description(<span class="string">&#x27;FlowFiles that were not successfully processed are routed here&#x27;</span>).build()</span><br><span class="line">    <span class="keyword">def</span> ComponentLog log</span><br><span class="line">    <span class="keyword">def</span> e = <span class="keyword">new</span> E()   </span><br><span class="line">    <span class="keyword">void</span> initialize(ProcessorInitializationContext context) &#123; log = context.logger &#125;</span><br><span class="line">    Set&lt;Relationship&gt; getRelationships() &#123; <span class="keyword">return</span> [REL_FAILURE, REL_SUCCESS] <span class="keyword">as</span> Set &#125;</span><br><span class="line">    Collection&lt;ValidationResult&gt; validate(ValidationContext context) &#123; <span class="literal">null</span> &#125;</span><br><span class="line">    PropertyDescriptor getPropertyDescriptor(String name) &#123; <span class="literal">null</span> &#125;</span><br><span class="line">    <span class="keyword">void</span> onPropertyModified(PropertyDescriptor descriptor, String oldValue, String newValue) &#123; &#125;</span><br><span class="line">    List&lt;PropertyDescriptor&gt; getPropertyDescriptors() &#123; <span class="literal">null</span> &#125;</span><br><span class="line">    String getIdentifier() &#123; <span class="literal">null</span> &#125;    </span><br><span class="line">    <span class="keyword">void</span> onTrigger(ProcessContext context, ProcessSessionFactory sessionFactory) <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">        <span class="keyword">def</span> session = sessionFactory.createSession()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            e.executeScript(session, context, log, REL_SUCCESS, REL_FAILURE)</span><br><span class="line">            session.commit()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable t) &#123;</span><br><span class="line">            log.error(<span class="string">&#x27;&#123;&#125; failed to process due to &#123;&#125;; rolling back session&#x27;</span>, [<span class="built_in">this</span>, t] <span class="keyword">as</span> Object[])</span><br><span class="line">            session.rollback(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">throw</span> t</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line">processor = <span class="keyword">new</span> GroovyProcessor()</span><br></pre></td></tr></table></figure><h2 id="InvokeScriptedProcessor模板-使用Jython"><a href="#InvokeScriptedProcessor模板-使用Jython" class="headerlink" title="InvokeScriptedProcessor模板(使用Jython)"></a>InvokeScriptedProcessor模板(使用Jython)</h2><p> 我在Groovy中提供了一个模板，该模板将允许NIFI用户将其ExecuteScript Groovy脚本移植到更快的InvokescriptedProcessor（ISP）处理器中。ISP比ExecuteScript更快，因为仅当代码或其他配置更改时才重新加载脚本，而executeScript每次调用处理器时都会评估脚本。 </p><p> 自从那篇文章以来，我已经收到了使用Jython编写的ISP模板的几个请求（例如此请求），因此使用Jython脚本执行的用户可以从ISP性能提升中受益。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">#// imports go here</span></span><br><span class="line"><span class="comment">#////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">from</span> org.apache.nifi.processor <span class="keyword">import</span> Processor,Relationship</span><br><span class="line"><span class="keyword">from</span> java.lang <span class="keyword">import</span> Throwable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">executeScript</span>(<span class="params">self,session, context, log, REL_SUCCESS, REL_FAILURE</span>):</span></span><br><span class="line">        log.warn(<span class="string">&quot;=====Hello========&quot;</span>)</span><br><span class="line"><span class="comment">#end class</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JythonProcessor</span>(<span class="params">Processor</span>):</span>   </span><br><span class="line">    REL_SUCCESS = Relationship.Builder().name(<span class="string">&quot;success&quot;</span>).description(<span class="string">&#x27;FlowFiles that were successfully processed are routed here&#x27;</span>).build()</span><br><span class="line">    REL_FAILURE = Relationship.Builder().name(<span class="string">&quot;failure&quot;</span>).description(<span class="string">&#x27;FlowFiles that were not successfully processed are routed here&#x27;</span>).build()</span><br><span class="line">    log = <span class="literal">None</span></span><br><span class="line">    e = E()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">self,context</span>):</span></span><br><span class="line">        self.log = context.logger</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRelationships</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>([self.REL_SUCCESS, self.REL_FAILURE])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self,context</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onPropertyModified</span>(<span class="params">self,descriptor, oldValue, newValue</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPropertyDescriptors</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIdentifier</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTrigger</span>(<span class="params">self,context, sessionFactory</span>):</span></span><br><span class="line">        session = sessionFactory.createSession()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.e.executeScript(session, context, self.log, self.REL_SUCCESS, self.REL_FAILURE)</span><br><span class="line">            session.commit()</span><br><span class="line">        <span class="keyword">except</span> Throwable, t:</span><br><span class="line">            self.log.error(<span class="string">&#x27;&#123;&#125; failed to process due to &#123;&#125;; rolling back session&#x27;</span>, [self, t])</span><br><span class="line">            session.rollback(true)</span><br><span class="line">            <span class="keyword">raise</span> t</span><br><span class="line"><span class="comment">#end class</span></span><br><span class="line"></span><br><span class="line">processor = JythonProcessor()</span><br></pre></td></tr></table></figure><h2 id="可复用的脚本"><a href="#可复用的脚本" class="headerlink" title="可复用的脚本"></a>可复用的脚本</h2><p>我们可以使用动态属性(在开发人员指南和之前的文章中有解释)，因为它们作为变量传递给ExecuteScript。然而，处理器的用户必须知道要添加和填充哪些属性，并且没有好的方法将这些信息传递给用户(至少使用ExecuteScript是这样)。 </p><p>但是，IndokescriptedProcessor可让您提供完整处理器实例的脚本实现。这意味着您可以定义自己的属性和关系，以及对它们的文档和验证。您的脚本可以提供功能，取决于处理器用户配置处理器的方式，而无需与脚本进行交互！ </p><p>一个带有单个InvokescriptedProcessor（包含工作脚本）的模板可以拖到画布上，基本上就像将自定义处理器拖到画布上一样！当用户打开对话框时，他们会看到您添加的属性/关系，并且将像普通的属性一样（脚本语言，body等）进行验证。</p><p>脚本化的处理器只需要实现processor接口，该接口又扩展了AbstractConfigurableComponent。Groovy的基本框架是这样的:一个类包含一组被覆盖的接口方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">implements</span> <span class="title">Processor</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> initialize(ProcessorInitializationContext context) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Set&lt;Relationship&gt; getRelationships() &#123; <span class="keyword">return</span> [] <span class="keyword">as</span> Set &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> onTrigger(ProcessContext context, ProcessSessionFactory sessionFactory) <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">      <span class="comment">// do stuff</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Collection&lt;ValidationResult&gt; validate(ValidationContext context) &#123; <span class="keyword">return</span> <span class="literal">null</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    PropertyDescriptor getPropertyDescriptor(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> onPropertyModified(PropertyDescriptor descriptor, String oldValue, String newValue) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    List&lt;PropertyDescriptor&gt; getPropertyDescriptors() &#123; <span class="keyword">return</span> [] <span class="keyword">as</span> List &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String getIdentifier() &#123; <span class="keyword">return</span> <span class="string">&#x27;MyProcessor-InvokeScriptedProcessor&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processor = <span class="keyword">new</span> MyProcessor()</span><br></pre></td></tr></table></figure><p>请注意，类必须实现处理器并声明一个名为“Processor”的变量，该变量包含类的实例。这是InvokescriptedProcessor所要求的约定。</p><p>重要的是：尽管您可能会在NIFI代码中找到许多处理器扩展AbstractProcessor或AbstrackSessionFactoryProcessor，但是如果它扩展了这些类之一，则您的脚本很可能无法正常工作。这是由于这些类的validation() 方法被声明为最终，并且基本实现将期望一组受支持的属性描述符包括Invokescriptedprocessor（例如脚本文件），但仅使用列表来使用该列表您的脚本处理器提供。可能会有一个黑客解决这个问题，但即使可能，也不值得。</p><p>继续前进，假设我们要创建一个可重复使用的脚本处理器，该处理器工作于GenerateFlowFile，但允许用户提供流量文件的内容以及其“文件名”属性的值。此外，也许内容可以包括Nifi Expression语言（EL）构造，例如$ {hostName（）}。由于内容可能具有类似EL语句的内容，但是用户可能不希望对其进行评估，因此我们应该让用户决定是否在写入流文件之前评估EL语句的内容。最后，这是一个“生成”处理器，因此我们只需要“成功”关系。“失败”在这里没有真正的意义。话虽如此，捕获您的代码可以投掷的所有异常将很重要；在ProcessException并重新启动中包装每个，以便该框架可以正确处理。 </p><ol><li>添加“成功”关系并将其返回（在集合中）中的 getRealationships()</li><li>添加一个“文件内容”属性以包含流量文件的预期内容（可能包括EL）</li><li>添加一个“评估内容中的表达式”属性，以指示是否评估EL的内容</li><li>添加一个可选的“文件名”属性，以覆盖默认的“文件名”属性。</li><li>触发处理器时，创建一个流文件，写入内容（可能在评估EL之后），并可能设置文件名属性</li></ol><p>下面是一个Groovy语言的代码示例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenerateFlowFileWithContent</span> <span class="keyword">implements</span> <span class="title">Processor</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> REL_SUCCESS = <span class="keyword">new</span> Relationship.Builder()</span><br><span class="line">            .name(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            .description(<span class="string">&#x27;The flow file with the specified content and/or filename was successfully transferred&#x27;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> CONTENT = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">            .name(<span class="string">&#x27;File Content&#x27;</span>).description(<span class="string">&#x27;The content for the generated flow file&#x27;</span>)</span><br><span class="line">            .required(<span class="literal">false</span>).expressionLanguageSupported(<span class="literal">true</span>).addValidator(Validator.VALID).build()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> CONTENT_HAS_EL = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">            .name(<span class="string">&#x27;Evaluate Expressions in Content&#x27;</span>).description(<span class="string">&#x27;Whether to evaluate NiFi Expression Language constructs within the content&#x27;</span>)</span><br><span class="line">            .required(<span class="literal">true</span>).allowableValues(<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;false&#x27;</span>).defaultValue(<span class="string">&#x27;false&#x27;</span>).build()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> FILENAME = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">            .name(<span class="string">&#x27;Filename&#x27;</span>).description(<span class="string">&#x27;The name of the flow file to be stored in the filename attribute&#x27;</span>)</span><br><span class="line">            .required(<span class="literal">false</span>).expressionLanguageSupported(<span class="literal">true</span>).addValidator(StandardValidators.NON_EMPTY_VALIDATOR).build()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> initialize(ProcessorInitializationContext context) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Set&lt;Relationship&gt; getRelationships() &#123; <span class="keyword">return</span> [REL_SUCCESS] <span class="keyword">as</span> Set &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> onTrigger(ProcessContext context, ProcessSessionFactory sessionFactory) <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">def</span> session = sessionFactory.createSession()</span><br><span class="line">        <span class="keyword">def</span> flowFile = session.create()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> hasEL = context.getProperty(CONTENT_HAS_EL).asBoolean()</span><br><span class="line">        <span class="keyword">def</span> contentProp = context.getProperty(CONTENT)</span><br><span class="line">        <span class="keyword">def</span> content = (hasEL ? contentProp.evaluateAttributeExpressions().value : contentProp.value) ?: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> filename = context.getProperty(FILENAME)?.evaluateAttributeExpressions()?.getValue()</span><br><span class="line">        </span><br><span class="line">        flowFile = session.write(flowFile, &#123; outStream -&gt;</span><br><span class="line">                outStream.write(content.getBytes(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">            &#125; as OutputStreamCallback)</span><br><span class="line">        </span><br><span class="line">        if(filename != null) &#123; flowFile = session.putAttribute(flowFile, <span class="string">&#x27;filename&#x27;</span>, filename) &#125;</span><br><span class="line">        <span class="comment">// transfer</span></span><br><span class="line">        session.transfer(flowFile, REL_SUCCESS)</span><br><span class="line">        session.commit()</span><br><span class="line">      &#125; catch(e) &#123;</span><br><span class="line">          throw new ProcessException(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Collection&lt;ValidationResult&gt; validate(ValidationContext context) &#123; return null &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    PropertyDescriptor getPropertyDescriptor(String name) &#123;</span><br><span class="line">        switch(name) &#123;</span><br><span class="line">            case <span class="string">&#x27;File Content&#x27;</span>: return CONTENT</span><br><span class="line">            case <span class="string">&#x27;Evaluate Expressions in Content&#x27;</span>: <span class="keyword">return</span> CONTENT_HAS_EL</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Filename&#x27;</span>: <span class="keyword">return</span> FILENAME</span><br><span class="line">            <span class="symbol">default:</span> <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> onPropertyModified(PropertyDescriptor descriptor, String oldValue, String newValue) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    List&lt;PropertyDescriptor&gt;&gt; getPropertyDescriptors() &#123; <span class="keyword">return</span> [CONTENT, CONTENT_HAS_EL, FILENAME] <span class="keyword">as</span> List &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String getIdentifier() &#123; <span class="keyword">return</span> <span class="string">&#x27;GenerateFlowFile-InvokeScriptedProcessor&#x27;</span> &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processor = <span class="keyword">new</span> GenerateFlowFileWithContent()</span><br></pre></td></tr></table></figure><p>将其输入到InvokeScriptedProcessor的脚本主体中，语言设置为Groovy，然后应用(通过单击对话框上的Apply)，那么当重新打开对话框时，您应该看到关系设置为“success”，属性添加到配置对话框中。</p><p>此时，您可以将单个处理器保存为模板，称其为“生成FlowFileWithContent”之类的东西。现在，它是一个基本上可以作为处理器重复使用的模板。尝试将其拖到画布上并输入一些值，然后将其接线到其他处理器（例如Putfile）（查看它是否有效）：</p><p>希望这说明了InvokescriptedProcessor的功能和灵活性，以及如何使用自定义逻辑来创建可重复使用的处理器模板，而无需构建和部署NAR。</p><p> 最合适的方法可能是使用InvoKescriptedProcessor，因为您可以添加更复杂的属性（指定控制器服务，例如），而不是用户。 - 定义的executeScript属性。 </p><p> 话虽如此，对于任何基于记录的脚本处理器，您都需要大量的设置代码，并且在如何处理记录的情况下，有最佳练习，即您在创建RecordSetWriter之前处理第一个记录，以防万一您的自定义处理器代码需要更新RecordSetWriter将使用的架构。下面的 Groovy  示例改编自 <a href="https://github.com/apache/nifi/blob/master/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/AbstractRecordProcessor.java">AbstractRecordProcessor</a> ，这是标准NAR中所有记录处理器的共同基类。请注意，要处理第一个和其余记录的两个注释部分，这些是您将自定义代码处理记录的地方。最好是在脚本处理器中添加私有方法，然后将其调用一次以获取第一个记录，然后再次在循环中（这就是AbstractRecordProcessor所做的） </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.nifi.flowfile.attributes.CoreAttributes</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.processor.AbstractProcessor</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.processor.ProcessContext</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.processor.ProcessSession</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.processor.Relationship</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.processor.io.StreamCallback</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.serialization.*</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.serialization.record.*</span><br><span class="line"><span class="keyword">import</span> org.apache.nifi.schema.access.SchemaNotFoundException</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRecordProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PropertyDescriptor RECORD_READER = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">        .name(<span class="string">&quot;record-reader&quot;</span>)</span><br><span class="line">        .displayName(<span class="string">&quot;Record Reader&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;Specifies the Controller Service to use for reading incoming data&quot;</span>)</span><br><span class="line">        .identifiesControllerService(RecordReaderFactory.<span class="keyword">class</span>)</span><br><span class="line">        .required(<span class="literal">true</span>)</span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PropertyDescriptor RECORD_WRITER = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">        .name(<span class="string">&quot;record-writer&quot;</span>)</span><br><span class="line">        .displayName(<span class="string">&quot;Record Writer&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;Specifies the Controller Service to use for writing out the records&quot;</span>)</span><br><span class="line">        .identifiesControllerService(RecordSetWriterFactory.<span class="keyword">class</span>)</span><br><span class="line">        .required(<span class="literal">true</span>)</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> REL_SUCCESS = <span class="keyword">new</span> Relationship.Builder().name(<span class="string">&quot;success&quot;</span>).description(<span class="string">&#x27;FlowFiles that were successfully processed are routed here&#x27;</span>).build()</span><br><span class="line">    <span class="keyword">def</span> REL_FAILURE = <span class="keyword">new</span> Relationship.Builder().name(<span class="string">&quot;failure&quot;</span>).description(<span class="string">&#x27;FlowFiles are routed here if an error occurs during processing&#x27;</span>).build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;PropertyDescriptor&gt; getSupportedPropertyDescriptors() &#123;</span><br><span class="line">        <span class="keyword">def</span> properties = [] <span class="keyword">as</span> ArrayList</span><br><span class="line">        properties.add(RECORD_READER)</span><br><span class="line">        properties.add(RECORD_WRITER)</span><br><span class="line">        properties</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    Set&lt;Relationship&gt; getRelationships() &#123;</span><br><span class="line">       [REL_SUCCESS, REL_FAILURE] <span class="keyword">as</span> Set&lt;Relationship&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> onTrigger(ProcessContext context, ProcessSession session) &#123;</span><br><span class="line">        <span class="keyword">def</span> flowFile = session.get()</span><br><span class="line">        <span class="keyword">if</span> (!flowFile) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> readerFactory = context.getProperty(RECORD_READER).asControllerService(RecordReaderFactory)</span><br><span class="line">        <span class="keyword">def</span> writerFactory = context.getProperty(RECORD_WRITER).asControllerService(RecordSetWriterFactory)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; attributes = <span class="keyword">new</span> HashMap&lt;&gt;()</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger recordCount = <span class="keyword">new</span> AtomicInteger()</span><br><span class="line">        <span class="keyword">final</span> FlowFile original = flowFile</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; originalAttributes = flowFile.attributes</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flowFile = session.write(flowFile,  &#123; inStream, outStream -&gt;</span><br><span class="line">                    <span class="keyword">def</span> reader = readerFactory.createRecordReader(originalAttributes, inStream, getLogger())</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Get the first record and process it before we create the Record Writer. </span></span><br><span class="line">                        <span class="comment">// We do this so that if the Processor updates the Record&#x27;s schema, we can provide </span></span><br><span class="line">                        <span class="comment">// an updated schema to the Record Writer. If there are no records, then we can</span></span><br><span class="line">                        <span class="comment">// simply create the Writer with the Reader&#x27;s schema and begin &amp; end the RecordSet</span></span><br><span class="line">                        <span class="keyword">def</span> firstRecord = reader.nextRecord()</span><br><span class="line">                        <span class="keyword">if</span> (!firstRecord) &#123;</span><br><span class="line">                            <span class="keyword">def</span> writeSchema = writerFactory.getSchema(originalAttributes, reader.schema)</span><br><span class="line">                            <span class="keyword">def</span> writer = writerFactory.createWriter(getLogger(), writeSchema, outStream)</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                writer.beginRecordSet()</span><br><span class="line">                                <span class="keyword">def</span> writeResult = writer.finishRecordSet()</span><br><span class="line">                                attributes[<span class="string">&#x27;record.count&#x27;</span>] = String.valueOf(writeResult.recordCount)</span><br><span class="line">                                attributes[CoreAttributes.MIME_TYPE.key()] = writer.mimeType</span><br><span class="line">                                attributes.putAll(writeResult.attributes)</span><br><span class="line">                                recordCount.set(writeResult.recordCount)</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                writer.close()</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/////////////////////////////////////////</span></span><br><span class="line">                        <span class="comment">// TODO process first record</span></span><br><span class="line">                        <span class="comment">/////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">def</span> writeSchema = writerFactory.getSchema(originalAttributes, firstRecord.schema)</span><br><span class="line">                        <span class="keyword">def</span> writer = writerFactory.createWriter(getLogger(), writeSchema, outStream)</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            writer.beginRecordSet()</span><br><span class="line">                            writer.write(firstRecord)</span><br><span class="line">                            <span class="keyword">def</span> record</span><br><span class="line">                            <span class="keyword">while</span> (record = reader.nextRecord()) &#123;</span><br><span class="line">                                <span class="comment">//////////////////////////////////////////</span></span><br><span class="line">                                <span class="comment">// TODO process next record</span></span><br><span class="line">                                <span class="comment">//////////////////////////////////////////</span></span><br><span class="line">                                writer.write(processed)</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">def</span> writeResult = writer.finishRecordSet()</span><br><span class="line">                            attributes.put(<span class="string">&#x27;record.count&#x27;</span>, String.valueOf(writeResult.recordCount))</span><br><span class="line">                            attributes.put(CoreAttributes.MIME_TYPE.key(), writer.mimeType)</span><br><span class="line">                            attributes.putAll(writeResult.attributes)</span><br><span class="line">                            recordCount.set(writeResult.recordCount)</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            writer.close()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SchemaNotFoundException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ProcessException(e.localizedMessage, e)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> MalformedRecordException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ProcessException(<span class="string">&#x27;Could not parse incoming data&#x27;</span>, e)</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        reader.close()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">as</span> StreamCallback)</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            getLogger().error(<span class="string">&#x27;Failed to process &#123;&#125;; will route to failure&#x27;</span>, [flowFile, e] <span class="keyword">as</span> Object[])</span><br><span class="line">            session.transfer(flowFile, REL_FAILURE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flowFile = session.putAllAttributes(flowFile, attributes)</span><br><span class="line">        recordCount.get() ?  session.transfer(flowFile, REL_SUCCESS) : session.remove(flowFile)</span><br><span class="line">        <span class="keyword">def</span> count = recordCount.get()</span><br><span class="line">        session.adjustCounter(<span class="string">&#x27;Records Processed&#x27;</span>, count, <span class="literal">false</span>)</span><br><span class="line">        getLogger().info(<span class="string">&#x27;Successfully converted &#123;&#125; records for &#123;&#125;&#x27;</span>, [count, flowFile] <span class="keyword">as</span> Object[])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processor = <span class="keyword">new</span> MyRecordProcessor()</span><br></pre></td></tr></table></figure><p>在session.write（）streamCallback内部，我们首先检查是否有任何记录，如果没有任何记录）并写出一个 zero-record 的flowfile。</p><p>在那之后，是时候与其他人分开处理第一个记录了。这是因为读者和/或自定义处理器代码可能会从读者的架构中更改作者的架构。例如，在架构推理期间，发生这种情况是自NIFI 1.9.0以来的读者的功能。</p><p>然后编写了第一个记录，其余记录的过程仍在继续。最后，填充了基于标准的记录的属性，然后更新流量文件并传输。上面的脚本还包括出现问题时的错误处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;InvokeScriptedProcessor模板-一个更快的ExecuteScript&quot;&gt;&lt;a href=&quot;#InvokeScriptedProcessor模板-一个更快的ExecuteScript&quot; class=&quot;headerlink&quot; title=&quot;Invo</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="NiFi" scheme="https://castile.github.io/tags/NiFi/"/>
    
  </entry>
  
  <entry>
    <title>一些有意思的关于NiFi的Blog汇总</title>
    <link href="https://castile.github.io/2024/03/18/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%85%B3%E4%BA%8ENiFi%E7%9A%84Blog%E6%B1%87%E6%80%BB/"/>
    <id>https://castile.github.io/2024/03/18/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%85%B3%E4%BA%8ENiFi%E7%9A%84Blog%E6%B1%87%E6%80%BB/</id>
    <published>2024-03-17T16:43:29.000Z</published>
    <updated>2024-03-17T16:43:29.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NiFi-HDF-Dataflow-Optimization-Part-1-of-2"><a href="#NiFi-HDF-Dataflow-Optimization-Part-1-of-2" class="headerlink" title="NiFi/HDF Dataflow Optimization (Part 1 of 2)"></a><a href="https://community.cloudera.com/t5/Community-Articles/NiFi-HDF-Dataflow-Optimization-Part-1-of-2/ta-p/245102">NiFi/HDF Dataflow Optimization (Part 1 of 2)</a></h1><h1 id="NiFi-HDF-Dataflow-Optimization-Part-2-of-2"><a href="#NiFi-HDF-Dataflow-Optimization-Part-2-of-2" class="headerlink" title="NiFi/HDF Dataflow Optimization (Part 2 of 2) "></a><a href="https://community.cloudera.com/t5/Community-Articles/NiFi-HDF-Dataflow-Optimization-Part-2-of-2/ta-p/245113">NiFi/HDF Dataflow Optimization (Part 2 of 2) </a></h1><h2 id="怎么预防系统或者Processor过载运行"><a href="#怎么预防系统或者Processor过载运行" class="headerlink" title="怎么预防系统或者Processor过载运行"></a>怎么预防系统或者Processor过载运行</h2><ol><li>使用connection中背压控制</li><li>结合ControRate处理器</li></ol><h2 id="理解Processors所需的资源"><a href="#理解Processors所需的资源" class="headerlink" title="理解Processors所需的资源"></a>理解Processors所需的资源</h2><p> 数据流优化的另一个方面是了解每个处理器所需的资源。这将允许更好的数据流执行。例如，CompressContent处理器将使用1个CPU/并发任务，因此，如果该处理器具有4个并发任务，并且队列中有4个文件，则该处理器将使用4个CPU，直到文件被压缩为止。对于小型文件，这比处理大型文件少于资源瓶颈。一个很好的例子是，将中小型，中和大文件都从单独的流路路径沿着3个不同的压缩处理器流动，每个流程都有自己的并发任务数量。在下面的示例中，所有三个CompressContent处理器都有一个并发任务。 </p><img src="/2024/03/18/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%85%B3%E4%BA%8ENiFi%E7%9A%84Blog%E6%B1%87%E6%80%BB/1710691506263.png" class width="1710691506263"><p>该图提供了优化吞吐量的一个很好的例子。每个CompressContent处理器的“ Tasks/Time”清楚地表明，随着文件的增加，压缩较大文件所需的时间呈指数较大。这提供了更好地利用CPU处理最多文件数量，而不是让任意的大文件放慢整个流程。这不是在文档中明确指出的，而是通过压缩NIFI内部或外部文件的唯一方法是使用每个文件使用要在完成操作的系统上使用CPU使用CPU。 </p><p> 请注意，处理器的某些文档指出了当特定处理器具有应意识到的行为时。例如，MemgeContent处理器的文档具有以下行：<em>建议仅使用单个传入连接配置处理器，因为不会从不同连接的FlowFiles创建一组FlowFiles。</em> </p><p> FlowFiles的大小和遍历各种数据流路径的流档数量将对某些处理器产生不同的影响。学习阅读有关处理器的信息可以帮助您确定何时何地应用一些或全部讨论的优化策略。 </p><h2 id="NIFI如何帮助您找到可以优化的位置-如何优化？"><a href="#NIFI如何帮助您找到可以优化的位置-如何优化？" class="headerlink" title="NIFI如何帮助您找到可以优化的位置/如何优化？"></a>NIFI如何帮助您找到可以优化的位置/如何优化？</h2><p> 每个处理器提供了大量信息，可以帮助DFM确定故障点在流动中的位置；请参阅下面的描述： </p><img src="/2024/03/18/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%85%B3%E4%BA%8ENiFi%E7%9A%84Blog%E6%B1%87%E6%80%BB/1710691926009.png" class width="1710691926009"><p><strong>In</strong>:  根据滑动5分钟的窗口，处理器从其传入连接的队列中取出的数据量。该值表示为<count> / <size>其中<count>是已从队列中提取的流file的数量，而<size>是这些FlowFiles内容的总大小。在此示例中，处理器已从输入队列中取出1270个flowfile，总共12.4兆字节（MB）。 </size></count></size></count></p><p><strong>Read/Write</strong>: 处理器已从磁盘读取并写入磁盘的flowfile内容的总大小。这提供了有关此处理器所需的I/O性能的有价值的信息。有些处理器只能在不编写任何内容的情况下读取数据，而有些则不会读取数据，而只会写数据。其他人则既不读取也不会写数据，而某些处理器则将读取和写入数据。在此示例中，我们看到在过去的五分钟内，该处理器读取了12.4 MB的flowfile，并且还写了12.4 MB。这就是我们期望的，因为该处理器只是将流file的内容复制到磁盘上。 </p><p><strong>Out</strong>： 处理器已转移到其出站连接的数据量。这不包括处理器删除自身的flowfiles，也不包括与自动终止的连接路由的流文件。就像上面的“ In”指标一样，此值表示为<count> / <size>，其中<count>是已将其传输到出站连接的flowfile的数量，<size>是这些FlowFiles内容的总大小。在此示例中，所有文件都写入磁盘，并且连接被自动终止，因此没有将文件移出到下游连接。 </size></count></size></count></p><p> <strong>Tasks/Time</strong>： 反映了在过去5分钟内完成运行的任务数量以及这些任务完成的总时间。您可能有1个线程，一个任务需要20分钟才能完成。完成后，将在接下来的5分钟内添加到此累积报告中。时间的格式为&lt; hour&gt;：&lt; minute &gt;：&lt; second &gt;。请注意，所花费的时间可能超过五分钟，因为许多任务可以并行执行。例如，如果安排处理器运行60个并发任务，并且这些任务中的每一个都需要一秒钟才能完成，则所有60个任务可能会在一秒钟内完成。但是，在这种情况下，我们将看到时间指标表明它花了60秒，而不是1秒。 </p><p>利用处理器提供的信息，读取/写入的数量以及每个任务的任务/时间来查找图表上的“热点”。例如，如果大量任务运行，但是通过处理器传递的数据量较低，则处理器可能被配置为过于频繁或同时执行的任务过多。对于处理器，至少需要更仔细的外观。<strong>一个完成任务很少的处理器以及较高的任务时间表明该处理器是CPU密集的。如果数据流量很高，并且处理器显示大量的已完成线程和高任务时间，则可以通过增加处理器调度的运行持续时间（Run Duration）来提高性能。</strong> </p><h2 id="产生了背压"><a href="#产生了背压" class="headerlink" title="产生了背压"></a>产生了背压</h2><p> 如果在数据始终始终积压的流程中存在连接，则如果处理数据的任何延迟是不可接受的，则可能是一个关注点。但是，只需在以上的情况下向处理器添加更多并发任务，就可以在图表的另一部分中导致线程饥饿（下面更详细地介绍）。再次在这里，DFM必须注意了解为什么数据在图中的此特定点备份。它只是可以是一个非常密集的处理器，并且在整个图中只有如此多的CPU可使用。这些文件可能对系统非常大，并且可能需要每个文件的读取和写入，这是昂贵的操作。如果资源不是问题，请添加更多的并发任务，看看是否解决了积压的问题。如果资源是问题，则必须重新设计流量以更好地利用可用的内容，否则必须将工作负载分配到多个系统上，这意味着群集两个或多个系统以减少任何一个系统的负载。文件可能是积压的，因为对其进行处理的处理器是I/O密集型。处理器统计信息应显示。检查磁盘；我是/o还是接近100％？添加更多线程不会更快地处理文件，而是会导致线程饥饿。 </p><h2 id="NiFi线程饥饿"><a href="#NiFi线程饥饿" class="headerlink" title="NiFi线程饥饿"></a>NiFi线程饥饿</h2><p> 优化的另一个方面是如何配置处理器，使其在流的一个区域占用太多可用资源，然后在流的另一个区域耗尽线程。</p><p> 假设有一个处理器是CPU和磁盘密集型，需要10个并行的任务来维持日常操作流量。然后对图进行修改以添加需要系统资源的其他数据流。将附加数据流添加到图表后，注意到具有10个并发任务的处理器无法跟上数据速率。因此，将另外5个并发任务添加到处理器中。然后，图上的另一个流开始备份数据，然后将其他并发任务添加到该流程中，依此类推……很快，已将太多并发任务添加到了图中，以至于数据流实际上永远不会获得线程，系统花费了确定哪个处理器应该获得线程的所有资源，但永远不会允许完成任务，并且系统陷入了此周期。 </p><p> 为了防止这种情况发生在数据流程中，每次更新或添加图表之后，DFM应检查系统资源利用率的当前级别。如果更新或添加后，数据开始在以前未看到的流程的点上积压，则更改以某种方式不堪重负，并建议关闭添加的流量，直到它可以确定哪个系统资源正在过度使用。另一个解决方案是通过集群系统将流量平衡在两个或多个系统上。 </p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p> 即使在优化的数据流中，物理资源耗尽也可以而且确实发生。当这种情况发生时，最好的方法是将数据负载分散在NIFI群集中的多个NIFI实例上。 </p><p> NIFI管理员或DataFlow Manager（DFM）可能会发现，在单个服务器上使用NIFI的一个实例不足以处理其拥有的数据量。因此，一种解决方案是在多个单独的NIFI服务器上运行相同的数据流。但是，这会引起管理问题，因为每次DFM都想更改或更新数据流，它们必须在每个服务器上进行更改，然后单独监视每个服务器。通过聚类NIFI服务器，可以使增加的处理能力以及单个接口进行通过，以使数据流更改并监视数据流。聚类允许DFM仅进行每个更改一次，然后将更改复制到集群的所有节点。通过单个接口，DFM还可以监视所有节点的健康和状态 </p><p> NIFI集群的设计是一个简单的主/从模型，其中有一个或一个或多个从属。在NIFI群集中，我们将主人称为NIFI群集管理器（NCM），而奴隶称为节点。尽管该模型是主和从属的模型，但如果NCM死亡，则指示节点继续操作，因为它们是为了确保数据流保持生存。NCM的缺失仅表示新节点不能连接群集，并且在恢复NCM之前，不会发生群集流量变化。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NiFi-HDF-Dataflow-Optimization-Part-1-of-2&quot;&gt;&lt;a href=&quot;#NiFi-HDF-Dataflow-Optimization-Part-1-of-2&quot; class=&quot;headerlink&quot; title=&quot;NiFi/HDF</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="NiFi" scheme="https://castile.github.io/tags/NiFi/"/>
    
  </entry>
  
  <entry>
    <title>NiFi自定义扩展文档</title>
    <link href="https://castile.github.io/2024/02/24/NiFi%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E6%96%87%E6%A1%A3/"/>
    <id>https://castile.github.io/2024/02/24/NiFi%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E6%96%87%E6%A1%A3/</id>
    <published>2024-02-24T10:02:16.000Z</published>
    <updated>2024-02-24T10:02:16.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-NiFi组件"><a href="#一、-NiFi组件" class="headerlink" title="一、 NiFi组件"></a>一、 NiFi组件</h1><p>NiFi提供了几个扩展点，使开发人员能够向应用程序添加功能以满足他们的需求。下面的列表提供了最常见扩展点的高级描述</p><h2 id="1-Processor"><a href="#1-Processor" class="headerlink" title="1. Processor"></a>1. Processor</h2><p>处理器接口是NiFi公开对FlowFiles、其属性和内容的访问的机制。处理器是用于组成NiFi数据流的基本元素。该接口用于完成以下所有任务 </p><ul><li>创建FlowFiles</li><li>读取FlowFile内容</li><li>写FlowFile内容</li><li>读FlowFile属性</li><li>更新FlowFile属性</li><li>摄取数据</li><li>输出数据</li><li>路由数据</li><li>提取数据</li><li>修改数据 </li></ul><h2 id="2-ReportingTask"><a href="#2-ReportingTask" class="headerlink" title="2. ReportingTask"></a>2. ReportingTask</h2><p> ReportingTask接口允许将指标、监控信息和内部NiFi状态发布到外部端点，如日志文件、电子邮件和远程web服务。 </p><h2 id="3-ParameterProvider"><a href="#3-ParameterProvider" class="headerlink" title="3. ParameterProvider"></a>3. ParameterProvider</h2><p>ParameterProvider接口允许外部源提供参数。提供的参数仍然存储在参数上下文中，但是这种机制允许在外部提供和管理它们。 </p><h2 id="4-ControllerService"><a href="#4-ControllerService" class="headerlink" title="4.  ControllerService"></a>4.  ControllerService</h2><p> 在单个JVM中，ControllerService提供跨处理器、其他ControllerServices、参数提供者和reportingtask的共享状态和功能。一个示例用例可能包括将非常大的数据集加载到内存中。通过在ControllerService中执行这项工作，数据可以加载一次，并通过该服务向所有处理器公开，而不是要求许多不同的处理器自己加载数据集。 </p><h2 id="5-FlowFilePrioritizer"><a href="#5-FlowFilePrioritizer" class="headerlink" title="5.  FlowFilePrioritizer"></a>5.  FlowFilePrioritizer</h2><p>FlowFilePrioritizer接口提供了一种机制，通过该机制可以对队列中的FlowFiles进行优先级排序或排序，以便FlowFiles可以按照最有效的顺序处理特定用例。 </p><h2 id="6-AuthorityProvider"><a href="#6-AuthorityProvider" class="headerlink" title="6.  AuthorityProvider"></a>6.  AuthorityProvider</h2><p> AuthorityProvider负责确定应该授予给定用户哪些特权和角色(如果有的话) </p><h1 id="二、-Processor-API"><a href="#二、-Processor-API" class="headerlink" title="二、 Processor API"></a>二、 Processor API</h1><p>处理器是NiFi中使用最广泛的组件。处理器是唯一被赋予创建、删除、修改或检查FlowFiles(数据和属性)权限的组件。所有的处理器都是使用Java的ServiceLoader机制加载和实例化的。</p><p>虽然Processor是一个可以直接实现的接口，但是这样做是非常罕见的，因为org.apache.nifi.processor.AbstractProcessor是几乎所有Processor实现的基类。 AbstractProcessor类提供了大量的功能，这使得开发Processor的任务变得更加容易和方便。在本文的范围内，我们将主要关注处理Processor API时的AbstractProcessor类。 </p><blockquote><p> NiFi是一个高度并发的框架。这意味着所有扩展都必须是线程安全的。如果不熟悉用Java编写并发软件，强烈建议您熟悉Java并发原则。 </p></blockquote><p>为了理解Processor API，我们必须首先理解几个支持类和接口。 </p><h2 id="FlowFile"><a href="#FlowFile" class="headerlink" title="FlowFile"></a>FlowFile</h2><p> FlowFile是一个逻辑概念，它将一段数据与一组关于该数据的属性相关联。这些属性包括FlowFile的唯一标识符，以及它的名称、大小和任何其他特定于流的值。虽然FlowFile的内容和属性可以改变，但FlowFile对象是不可变的。对FlowFile的修改可以通过ProcessSession实现。 </p><p>FlowFiles的核心属性定义在org.apache.nifi.flowfile.attributes.CoreAttributes enum中。</p><ul><li> Filename (filename): FlowFile的文件名。文件名不应包含任何目录结构 </li><li> UUID (uuid):分配给该FlowFile的通用唯一标识符，用于将该FlowFile与系统中的其他FlowFile区分开来。 </li><li> 路径(path): FlowFile的路径是指FlowFile所属的相对目录，不包含文件名。 </li><li>绝对路径( absolute.path ): FlowFile的绝对路径是指FlowFile所属的绝对目录，不包含文件名。 </li><li> 优先级( priority ):表示FlowFile优先级的数值。 </li><li> MIME Type ( mime.type ):这个流文件的MIME类型。 </li><li> 丢弃原因( discard.reason ):指定FlowFile被丢弃的原因。  </li><li>替代标识符( alternate.identifier ):指示FlowFile的UUID之外的标识符，已知该标识符引用该FlowFile。 </li></ul><p><strong>其他的公共属性：</strong></p><p> 虽然这些属性不是CoreAttributes枚举的成员，但它们实际上是整个系统的标准，并且可以在大多数FlowFiles中找到。 </p><ul><li>文件大小(fileSize): FlowFile内容的大小，单位为字节。</li><li> 输入日期(entryDate): FlowFile进入系统(即创建)的日期和时间。此属性的值是一个数字，表示从1970年1月1日午夜(UTC)开始的毫秒数。 </li><li> 血统开始日期(lineageStartDate):任何时候，一个FlowFile被克隆，合并，或者分割，这将导致一个“子”FlowFile被创建。当这些子代被克隆、合并或分裂时，一个祖先链就建立起来了。该值表示最早的祖先进入系统的日期和时间。考虑这个问题的另一种方式是，该属性表示FlowFile通过系统的延迟。取值为数字，表示从1970年1月1日午夜(UTC)开始的毫秒数。 </li></ul><h2 id="ProcessSession"><a href="#ProcessSession" class="headerlink" title="ProcessSession"></a>ProcessSession</h2><p>ProcessSession(通常简称为“会话”)提供了一种机制，通过该机制可以创建、销毁、检查、克隆FlowFiles，并将其传输到其他处理器。此外，ProcessSession提供了通过添加或删除属性或修改FlowFile的内容来创建修改版本的FlowFiles的机制。ProcessSession还公开了一种发出<strong>出处事件（  <a href="https://nifi.apache.org/docs/nifi-docs/html/developer-guide.html#provenance_events">Provenance Events</a> ）</strong>的机制，该机制提供了跟踪FlowFile沿袭和历史的能力。 在对一个或多个FlowFiles执行操作后，ProcessSession可以提交或回滚。 </p><h2 id="ProcessContext"><a href="#ProcessContext" class="headerlink" title="ProcessContext"></a>ProcessContext</h2><p>ProcessContext提供了处理器和框架之间的桥梁。它提供有关处理器当前如何配置的信息，并允许处理器执行特定于框架的任务， 比如释放自己的资源，这样框架就可以在不消耗不必要资源的情况下调度其他处理器运行。 </p><h2 id="PropertyDescriptor"><a href="#PropertyDescriptor" class="headerlink" title="PropertyDescriptor"></a>PropertyDescriptor</h2><p>PropertyDescriptor定义了一个属性，该属性将被Processor、ReportingTask、ParameterProvider或ControllerService使用。属性的定义包括其名称、属性描述、可选的默认值、验证逻辑和指示说明是否需要该属性才能使Processor有效。PropertyDescriptor是通过实例化PropertyDescriptor的实例来创建的。构造器类，调用适当的方法来填充有关属性的详细信息，最后调用构建方法。 </p><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p>属性描述符必须指定一个或多个验证器，用于确保用户输入的属性值是有效的。如果Validator指示属性值无效，则在该属性变为有效之前，组件将无法运行或使用。如果没有指定Validator，组件将被认为是无效的，NiFi将报告不支持该属性。</p><h2 id="ValidationContext"><a href="#ValidationContext" class="headerlink" title="ValidationContext"></a>ValidationContext</h2><p>当验证属性值时，ValidationContext可以用来获取ControllerServices，创建PropertyValue对象，并使用表达式语言编译和计算属性值。</p><h2 id="PropertyValue"><a href="#PropertyValue" class="headerlink" title="PropertyValue"></a>PropertyValue</h2><p>返回给Processor的所有属性值都以PropertyValue对象的形式返回。该对象具有将值从String转换为其他形式(如数字和时间段)的方便方法，并提供用于求值Expression Language的API。 </p><h2 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h2><p>关系定义了FlowFile可以从处理器传输到的路由。通过实例化Relationship的实例来 <code>Relationship.Builder</code>  ，调用适当的方法来填充关系的详细信息，最后调用构建方法。 </p><h2 id="StateManager"><a href="#StateManager" class="headerlink" title="StateManager"></a>StateManager</h2><p> StateManager为处理器、报告任务和控制器服务提供了一种容易存储和检索状态的机制， 该API类似于ConcurrentHashMap，但每个操作都需要一个Scope。 这个Scope表示这个state是存在本地还是集群维度的。</p><h2 id="ProcessorInitializationContext"><a href="#ProcessorInitializationContext" class="headerlink" title="ProcessorInitializationContext"></a>ProcessorInitializationContext</h2><p>在创建了一个Processor之后，它的initialize方法将被InitializationContext对象调用。该对象向处理器公开在整个处理器生命周期中不会改变的配置，例如处理器的唯一标识符。 </p><h2 id="ComponentLog"><a href="#ComponentLog" class="headerlink" title="ComponentLog"></a>ComponentLog</h2><p>建议处理器通过ComponentLog接口执行日志记录，而不是获取第三方日志记录器的直接实例。这是因为通过ComponentLog进行日志记录允许框架将超过可配置严重性级别的日志消息呈现给用户界面，从而允许在发生重要事件时通知监视数据流的人员。此外，它通过在DEBUG模式下记录堆栈跟踪并在日志消息中提供处理器的唯一标识符，为所有处理器提供一致的日志记录格式。 </p><h1 id="三、AbstractProcessor-API"><a href="#三、AbstractProcessor-API" class="headerlink" title="三、AbstractProcessor API"></a>三、AbstractProcessor API</h1><p>由于绝大多数处理器将通过扩展AbstractProcessor来创建，因此我们将在本节中研究抽象类。AbstractProcessor提供了几个处理器开发人员会感兴趣的方法。 </p><h2 id="1、-处理器初始化"><a href="#1、-处理器初始化" class="headerlink" title="1、 处理器初始化"></a>1、 处理器初始化</h2><p> 在创建Processor之后，在调用任何其他方法之前，将调用AbstractProcessor的init方法。 该方法接受一个参数，类型为ProcessorInitializationContext。 上下文对象向处理器提供一个ComponentLog、处理器的唯一标识符和一个 ControllerServiceLookup  (可用于与已配置的ControllerServices交互)。这些对象中的每一个都由AbstractProcessor存储，并且可以由子类分别通过getLogger、getIdentifier和getControllerservicellookup方法获得。</p><h2 id="2、-暴露处理器属性"><a href="#2、-暴露处理器属性" class="headerlink" title="2、 暴露处理器属性"></a>2、 暴露处理器属性</h2><p>大多数处理器在使用之前都需要一定数量的用户配置。  处理器支持的属性通过getSupportedPropertyDescriptors方法公开给框架。 此方法不接受任何参数，并返回PropertyDescriptor对象的列表。<strong>列表中对象的顺序很重要，因为它决定了属性在用户界面中呈现的顺序。</strong> </p><h3 id="动态处理器属性"><a href="#动态处理器属性" class="headerlink" title="动态处理器属性"></a>动态处理器属性</h3><p> 除了标准属性之外，有时还希望允许用户配置名称不是预定义的其他属性。  这可以通过覆盖getSupportedDynamicPropertyDescriptor方法来实现。  此方法接受String作为其唯一参数，该参数指示属性的名称。该方法返回一个PropertyDescriptor对象，该对象可用于验证属性的名称和值。  从这个方法返回的任何PropertyDescriptor都应该在PropertyDescriptor中设置isDynamic的值为true。。AbstractProcessor的默认行为是不允许任何动态创建的属性。</p><h3 id="敏感动态属性"><a href="#敏感动态属性" class="headerlink" title="敏感动态属性"></a>敏感动态属性</h3><p>动态属性的默认实现不将属性值视为敏感值。在配置FlowFile属性或自定义表达式等特性时，这种方法是足够的，但它不能为密码或密钥等值提供保护。  </p><p>NiFi 1.17.0通过一个名为SupportsSensitiveDynamicProperties的注解引入了对敏感动态属性的框架支持。注释可以通过getSupportedDynamicPropertyDescriptor方法应用于支持动态属性的处理器、控制器服务或报告任务。注释表明组件允许将单个动态属性标记为敏感属性，以用于持久化和框架处理。 </p><p> getSupportedDynamicPropertyDescriptor必须返回一个 <code>sensitive</code>  设置为false的PropertyDescriptor，以允许自定义敏感状态。在此方法中将敏感字段设置为true将强制将所有动态属性作为敏感属性处理。这种方法允许在受支持的组件中升级敏感状态，但不降级。 </p><p>敏感属性值的安全处理是带注释的类的责任。支<strong>持敏感动态属性的组件不能记录属性值或将属性值作为FlowFile属性提供。</strong> </p><h2 id="3、-验证处理器属性"><a href="#3、-验证处理器属性" class="headerlink" title="3、 验证处理器属性"></a>3、 验证处理器属性</h2><p>如果处理器的配置无效，则处理器无法启动。 </p><p>处理器属性的验证可以通过在PropertyDescriptor上设置Validator或通过PropertyDescriptor限制属性的允许值来实现。Builder的allowableValues方法或identifiesControllerService方法。  此外，如果一个属性依赖于另一个属性( <code>PropertyDescriptor.Builder’s </code>dependsOn` method ），切不满足的话则会被校验住。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor USE_FILE = <span class="keyword">new</span> PropertyDescriptor.Buildler()</span><br><span class="line">    .name(<span class="string">&quot;Use File&quot;</span>)</span><br><span class="line">    .displayName(<span class="string">&quot;Use File&quot;</span>)</span><br><span class="line">    .required(<span class="keyword">true</span>)</span><br><span class="line">    .allowableValues(<span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>)</span><br><span class="line">    .defaultValue(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor FILE = <span class="keyword">new</span> PropertyDescriptor.Builder()</span><br><span class="line">    .name(<span class="string">&quot;File to Use&quot;</span>)</span><br><span class="line">    .displayName(<span class="string">&quot;File to Use&quot;</span>)</span><br><span class="line">    .required(<span class="keyword">true</span>)</span><br><span class="line">    .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)</span><br><span class="line">    .dependsOn(USE_FILE, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>有时单独验证一个Processor的属性是不够的。为此，AbstractProcessor公开了一个customValidate方法。该方法接受ValidationContext类型的单个参数。这个方法的返回值是一个ValidationResult对象的集合，它描述了在验证过程中发现的任何问题。只有那些isValid方法返回false的ValidationResult对象才应该被返回。 只有当所有属性根据其关联的验证器和允许值都有效时，才会调用此方法。也就是说，只有当所有属性本身都有效时，这个方法才会被调用，并且这个方法允许将处理器的配置作为一个整体进行验证。 </p><h2 id="4、响应配置中的更改"><a href="#4、响应配置中的更改" class="headerlink" title="4、响应配置中的更改"></a>4、响应配置中的更改</h2><p> 有时，当处理器的属性发生变化时，我们希望它立即做出反应。  onPropertyModified方法允许处理器这样做。当用户更改处理器的属性值时，将为每个修改的属性调用onPropertyModified方法。 </p><p> 该方法接受三个参数:PropertyDescriptor(表示修改了哪个属性、旧值和新值。  如果属性之前没有值，第二个参数将为空。  如果该属性被删除，则第三个参数将为空。重要的是要注意，无论值是否有效，都会调用此方法。这个方法将只在值被实际修改时调用，而不是在用户更新处理器而不更改其值时调用。在调用此方法时，可以保证调用此方法的线程是当前在处理器中执行代码的唯一线程，除非处理器本身创建了自己的线程。 </p><h2 id="5、-执行工作"><a href="#5、-执行工作" class="headerlink" title="5、 执行工作"></a>5、 执行工作</h2><p> 当处理器有工作要做时，它通过框架调用它的onTrigger方法来进行调度。 </p><p> 该方法有两个参数:一个ProcessContext和一个ProcessSession。onTrigger方法的第一步通常是通过调用ProcessSession上的get方法来获取要在其上执行工作的FlowFile。 </p><p> 对于从外部源摄取数据到NiFi的处理器，跳过此步骤。然后处理器可以自由地检查FlowFile属性;添加、删除或修改属性;读取或修改FlowFile内容;并将FlowFiles传输到适当的关系。 </p><h2 id="6、-处理器何时被触发"><a href="#6、-处理器何时被触发" class="headerlink" title="6、  处理器何时被触发"></a>6、  处理器何时被触发</h2><p>处理器的onTrigger方法只有在计划运行时才会被调用，并且处理器有工作要做。如果满足以下任何一个条件，就称处理器存在工作</p><ul><li> 目标是处理器的连接在其队列中至少有一个FlowFile </li><li> 处理器没有传入连接</li><li> 处理器用@TriggerWhenEmpty注释 </li></ul><p>有几个因素会影响处理器的onTrigger方法何时被调用。</p><p>首先，除非用户已将Processor配置为运行，否则不会触发Processor。如果处理器被安排运行，框架会定期(周期由用户在用户界面中配置)检查处理器是否有工作要做。如果是，框架将检查处理器的下游目的地。 </p><p> <strong>如果处理器的任何出站连接已满，默认情况下，处理器将不会被安排运行。</strong> </p><p> 但是，@TriggerWhenAnyDestinationAvailable注释可以添加到Processor的类中。  在这种情况下，需求被更改为只有一个下游目的地必须是“可用的”(如果Connection队列未满，则认为目的地是“可用的”)，而不是要求所有下游目的地都可用。 </p><p>与处理器调度相关的还有 @TriggerSerially 注释。使用此注释的处理器永远不会有多个线程同时运行onTrigger方法。但是，需要注意的是，执行代码的线程在调用之间可能会发生变化。因此，仍然必须小心确保处理器是线程安全的</p><h2 id="7、组件生命周期"><a href="#7、组件生命周期" class="headerlink" title="7、组件生命周期"></a>7、组件生命周期</h2><h3 id="OnAdded"><a href="#OnAdded" class="headerlink" title="@OnAdded"></a>@OnAdded</h3><p> @OnAdded注释会在创建组件时立即调用一个方法 ， <code>initialize</code>  方法将在组件构造之后被调用，然后是带有@OnAdded注释的方法。 该方法在组件的生命周期中只会被调用一次。带有此注释的方法必须不带参数。 </p><h3 id="OnEnabled"><a href="#OnEnabled" class="headerlink" title="@OnEnabled"></a>@OnEnabled</h3><p> @OnEnabled注释可以用来指示一个方法应该在控制器服务被启用时被调用。 任何具有此注释的方法都会在每次用户启用该服务时被调用。此外，每次重启NiFi时，如果将NiFi配置为“ auto-resume state ”并且启用了服务，则将调用该方法。</p><p>如果带有此注释的方法抛出Throwable，则将为该组件发出一条日志消息和公告。在这种情况下，服务将保持在“ ENABLING ”状态，并且将不可用。带有此注释的所有方法将在延迟后再次调用。在所有带有此注释的方法都返回而不抛出任何东西之前，该服务将无法使用。 </p><h3 id="OnRemoved"><a href="#OnRemoved" class="headerlink" title="@OnRemoved"></a>@OnRemoved</h3><p> @OnRemoved注释导致在组件从流中移除之前调用一个方法。这允许在删除组件之前清理资源。带有此注释的方法必须不带参数。<strong>如果带有此注释的方法抛出异常，该组件仍将被删除。</strong> </p><h3 id="OnScheduled"><a href="#OnScheduled" class="headerlink" title="@OnScheduled"></a>@OnScheduled</h3><p> 每次计划运行组件时都应调用该方法。因为ControllerServices没有被调度，所以在ControllerService上使用这个注释是没有意义的。 它应该仅用于处理器和 Reporting Tasks 。如果具有此注释的任何方法抛出Exception，则不会调用具有此注释的其他方法，并将向用户显示通知。 </p><p> 在这种情况下，然后触发带有@OnUnscheduled注释的方法，然后触发带有@OnStopped注释的方法(在此状态下，如果这些方法中的任何一个抛出异常，这些异常将被忽略)。  然后，该组件将在一段时间内执行，这段时间称为“Administrative yield Duration”，这是在nifi中配置的一个值。 最后，进程将再次启动，直到所有带@OnScheduled注释的方法都返回而不抛出任何异常。 </p><p>带有此注释的方法可以不带参数，也可以只带一个参数。如果使用单个参数变体，如果组件是Processor，则参数必须是ProcessContext类型，如果组件是ReportingTask，则参数必须是ConfigurationContext类型。 </p><h3 id="OnUnscheduled"><a href="#OnUnscheduled" class="headerlink" title="@OnUnscheduled"></a>@OnUnscheduled</h3><p>每当处理器或ReportingTask不再调度运行时，将调用带有此注释的方法。此时，在Processor的onTrigger方法中可能仍有许多线程处于活动状态。如果这样的方法抛出异常，将生成一条日志消息，否则将忽略该异常，并且仍将调用带有此注释的其他方法。带有此注释的方法可以不带参数，也可以只带一个参数。如果使用单个参数变体，如果组件是Processor或ConfigurationContext，则参数必须是ProcessContext类型 </p><h3 id="OnStopped"><a href="#OnStopped" class="headerlink" title="@OnStopped"></a>@OnStopped</h3><p> 当处理器或ReportingTask不再调度运行并且所有线程都从onTrigger方法返回时，将调用带有此注释的方法。如果这样的方法抛出异常，将生成一条日志消息，否则该异常将被忽略;使用此注释的其他方法仍将被调用。带有此注释的方法允许接受0或1个参数。如果使用了参数，如果组件是ReportingTask，则参数的类型必须是ConfigurationContext;如果组件是Processor，则参数的类型必须是ProcessContext。 </p><h3 id="OnShutdown"><a href="#OnShutdown" class="headerlink" title="@OnShutdown"></a>@OnShutdown</h3><p>任何带有@OnShutdown注释的方法都将在NiFi成功关闭时被调用。如果这样的方法抛出异常，将生成一条日志消息，否则将忽略该异常，并且仍将调用带有此注释的其他方法。带有此注释的方法<strong>必须不带参数</strong>。注意:虽然NiFi将尝试在使用它的所有组件上调用带有此注释的方法，但这并不总是可能的。 </p><p>例如，进程可能意外终止，在这种情况下，它没有机会调用这些方法。因此，虽然使用此注释的方法可用于清理资源，但不应依赖于关键业务逻辑。 </p><h2 id="8、组件通知"><a href="#8、组件通知" class="headerlink" title="8、组件通知"></a>8、组件通知</h2><h3 id="OnPrimaryNodeStateChange"><a href="#OnPrimaryNodeStateChange" class="headerlink" title="@OnPrimaryNodeStateChange"></a>@OnPrimaryNodeStateChange</h3><p> @OnPrimaryNodeStateChange注释会在集群中主节点的状态发生变化时立即调用方法。带有此注释的方法要么不带参数，要么只带一个PrimaryNodeState类型的参数。PrimaryNodeState提供有关更改内容的上下文，以便组件可以采取适当的操作。PrimaryNodeState枚举器有两种可能的值:ELECTED PRIMARY NODE(接收此状态的节点已被选为NiFi集群的主节点)或PRIMARY NODE REVOKED( 接收此状态的节点是主节点，但现在其主节点角色已被撤销)</p><h2 id="9-、约束组件"><a href="#9-、约束组件" class="headerlink" title="9.、约束组件"></a>9.、约束组件</h2><p>受限制的组件是可用于执行操作员通过NIFI REST API/UI提供的任意不固定的代码，或者可以使用NIFI OS凭据在NIFI主机系统上获取或更改数据。 </p><p>这些组件可以被授权的NiFi用户用于超出应用程序的预期用途，升级特权，或者可能暴露有关NiFi进程或主机系统内部的数据。所有这些功能都应该被认为是特权的，管理员应该知道这些功能，并为一部分受信任的用户显式地启用它们。 </p><p>处理器、控制器服务或报告任务可以使用@Restricted注释进行标记。这将导致组件被视为受限组件，并且需要将用户显式地添加到可以访问受限组件的用户列表中。一旦用户被允许访问受限制的组件，他们将被允许创建和修改这些组件，假设所有其他权限都被允许。如果不能访问受限制的组件，用户仍然会知道这些类型的组件的存在，但即使有其他足够的条件，也无法创建或修改它们。</p><h2 id="10、状态管理"><a href="#10、状态管理" class="headerlink" title="10、状态管理"></a>10、状态管理</h2><p>从ProcessContext、ReportingContext和ControllerServiceInitializationContext中，组件可以调用getStateManager()方法。这个状态管理器负责提供一个简单的API来存储和检索状态。  该机制旨在使开发人员能够轻松地存储一组密钥/值对，检索这些值并原子更新它们。该状态可以在群集中局部存储在节点上，也可以在所有节点中存储。 </p><p>然而，需要注意的是，该机制的目的只是提供一种存储非常“简单”状态的机制。  因此，API只允许存储和检索Map&lt;String, String&gt;，并自动替换整个Map。此外，目前唯一支持存储集群范围状态的实现是由ZooKeeper支持的。  因此，在序列化之后，整个State Map的大小必须小于1mb。试图存储超过此值将导致抛出异常。如果处理器管理状态所需的交互比这更复杂(例如，必须存储和检索大量数据，或者必须单独存储和获取单个键)，则应该使用不同的机制(例如，与外部数据库通信)。 </p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>当与状态管理器通信时，所有方法调用都需要提供Scope。这个Scope将是Scope.LOCAL或Scope.CLUSTER。如果NiFi在集群中运行，则此Scope向框架提供有关操作应该如何发生的重要信息。 </p><p> 如果状态使用 Scope.CLUSTER 存储。集群中的所有节点都将使用相同的状态存储机制进行通信。如果使用 Scope.LOCAL ，那么每个节点将看到状态的不同表示。 </p><p>还值得注意的是，如果将NiFi配置为作为独立实例运行，而不是在集群中运行，则 Scope总是使用Scope.LOCAL。这样做是为了允许NiFi组件的开发人员以一种一致的方式编写代码，而不必担心NiFi实例是否集群。相反，开发人员应该假设实例是集群的，并相应地编写代码。 </p><h2 id="11-报告处理器的活动"><a href="#11-报告处理器的活动" class="headerlink" title="11. 报告处理器的活动"></a>11. 报告处理器的活动</h2><p> 处理器负责报告其活动，以便用户能够了解其数据发生了什么。处理器应通过ComponentLog记录事件，该事件可通过初始化访问或调用AbstractProcessor的GetLogger方法访问。 </p><p>此外，处理器应使用通过ProcessSession的 <code>getProvenanceReporter</code>  方法获得的 <code>ProvenanceReporter</code>  接口。  ProvenanceReporter应该用于指示从外部源接收内容或将内容发送到外部位置的任何时间。  ProvenanceReTorter还具有报告何时克隆，分叉或修改的流文件以及将多个流文件合并到单个流纸上以及将流纸与其他一些标识符关联的方法。  但是，这些功能不太重要，因为该框架能够检测到这些内容并代表处理器发出适当的事件。 </p><p> 然而，对于处理器开发人员来说，发出这些事件是最佳实践，因为它在代码中变得明确说明这些事件正在发出，并且开发人员能够为事件提供其他细节，例如该动作采取了有关所采取的措施的信息。  如果处理器发出事件，则该框架将不会发出重复的事件。相反，它总是假设处理器开发人员比框架更了解处理器上下文中发生的事情。 </p><p>但是，框架可能会发出另一个事件。例如，如果处理器对FlowFile的内容及其属性进行修改，然后仅发射 ATTRIBUTES_MODIFIED  事件，则该框架将发出 CONTENT_MODIFIED  事件。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-NiFi组件&quot;&gt;&lt;a href=&quot;#一、-NiFi组件&quot; class=&quot;headerlink&quot; title=&quot;一、 NiFi组件&quot;&gt;&lt;/a&gt;一、 NiFi组件&lt;/h1&gt;&lt;p&gt;NiFi提供了几个扩展点，使开发人员能够向应用程序添加功能以满足他们的需求。下面的列</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="NiFi" scheme="https://castile.github.io/tags/NiFi/"/>
    
    <category term="文档" scheme="https://castile.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>无状态的NiFi</title>
    <link href="https://castile.github.io/2023/11/26/Stateless-NiFi/"/>
    <id>https://castile.github.io/2023/11/26/Stateless-NiFi/</id>
    <published>2023-11-26T07:35:13.000Z</published>
    <updated>2023-11-26T07:35:13.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache NiFi应用程序可以被认为是两个独立但相互交织的组件:流作者组件和流引擎。通过将这两个组件集成到一个应用程序中，NiFi允许用户创建数据流并在同一个用户界面中实时运行它。</p><p>然而，这两个概念是可以分开的。NiFi可以用来创建流，然后不仅可以由NiFi运行，还可以由其他兼容的数据流引擎运行。Apache NiFi项目提供了几个这样的数据流引擎:Apache NiFi本身、MiNiFi Java (Apache NiFi的一个子项目)、MiNiFi c++ (Apache NiFi的一个子项目)和无状态NiFi</p><p>这些数据流引擎中的每一个都有自己的优点和缺点，因此它们有自己最擅长解决的特定用例。本文将介绍无状态NiFi是什么，如何使用它，以及它的优点和缺点</p><h2 id="传统的NiFi"><a href="#传统的NiFi" class="headerlink" title="传统的NiFi"></a>传统的NiFi</h2><p>NiFi被设计为作为大型多租户应用程序运行。它努力充分利用提供给它的所有资源，包括磁盘/存储和许多线程。通常，单个NiFi实例跨许多不同的节点集群，形成一个大型的内聚数据流，该数据流可能由许多不同的子流组成。一般来说，NiFi将承担交付给它的数据的所有权。它将数据可靠地存储在磁盘上，直到它被传递到所有必要的目的地。此数据的交付可以在流中的不同位置进行优先级排序，以便将对特定目的地最重要的数据首先交付到该目的地，而相同的数据可以根据优先级以不同的顺序交付到另一个目的地。NiFi在完成所有这些工作的同时，保持非常细粒度的沿袭，并保持流中每个组件所看到的数据缓冲区(数据沿袭和数据滚动缓冲区的组合称为data Provenance)。</p><p>这些特性中的每一个都非常重要，可以提供一个非常强大、广泛、全面的视图，了解数据是如何在企业上操作和流经企业的。然而，在一些用例中，更轻量级的应用程序可以更好地服务于这些用例。一个能够与NiFi可以交互的所有不同端点进行交互的应用程序，并执行NiFi可以执行的所有转换、路由、过滤和处理。但是一个应用程序被设计为只运行一个小的子流，而不是一个有许多源和汇的大数据流。</p><h2 id="无状态NiFi"><a href="#无状态NiFi" class="headerlink" title="无状态NiFi"></a>无状态NiFi</h2><p>进入无状态NiFi(在本文档中也简称为“无状态”)。无状态NiFi中的许多概念与典型的Apache NiFi引擎中的概念不同。</p><p>无状态提供了一个占用空间更小的数据流引擎。它不包括用于编写或监视数据流的用户界面，而是运行使用NiFi应用程序编写的数据流。NiFi在能够访问快速存储(如SSD和NVMe驱动器)时表现最佳，而Stateless则将所有数据存储在内存中。</p><p>这意味着如果无状态NiFi停止，它将不再能够直接访问正在运行的数据。因此，无状态应该只用于数据源可靠且可重放的数据流，或者数据丢失不是关键问题的场景。</p><p>一个非常常见的用例是让无状态NiFi从Apache Kafka或JMS读取数据，然后执行一些路由/过滤/操作，最后将数据传递到另一个目的地。如果像这样的数据流要在NiFi中运行，那么数据将从源被消耗，写入NiFi的内部存储库，并得到确认，因此NiFi将获得该数据的所有权。然后，它将负责将其传递到所有目的地，即使应用程序重新启动也是如此。</p><p>但是，使用无状态NiFi，数据将被使用，然后传输到流中的下一个处理器。数据不会被写入任何类型的内部存储库，也不会被确认。流中的下一个处理器将处理数据，然后将其传递下去。只有当数据到达整个数据流的末端时，才会确认从源接收到的数据。如果在处理完成之前重新启动Stateless，则数据尚未得到确认，因此只是再次使用它。这允许在内存中处理数据，而不必担心数据丢失，但它也让源承担了可靠地存储数据并使数据可重放的责任。</p><h2 id="可兼容的数据流"><a href="#可兼容的数据流" class="headerlink" title="可兼容的数据流"></a>可兼容的数据流</h2><p>如上所述，无状态NiFi要求数据源既可靠又可重放。这限制了无状态可以合理交互的源。此外，对于无状态引擎能够运行的数据流，还有一些其他限制。</p><h3 id="1、-单一来源、单一目标"><a href="#1、-单一来源、单一目标" class="headerlink" title="1、 单一来源、单一目标"></a>1、 单一来源、单一目标</h3><p>在无状态状态下运行的每个数据流应该保持在单个源和单个接收器或目的地。由于Stateless不存储它正在处理的数据，也不存储元数据，例如数据流中数据排队的位置，因此将单个FlowFile发送到多个目的地可能导致数据重复。</p><p>考虑一个流，其中数据从Apache Kafka消费，然后交付到HDFS和S3。如果数据存储在HDFS中，然后存储到S3失败，则整个会话将被回滚，并且必须再次使用数据。因此，数据可能会被第二次消费并交付给HDFS。如果这种情况继续发生，数据将继续从Kafka提取并存储在HDFS中。根据目的地和流配置，这可能不是一个问题(除了浪费资源之外)，但在许多情况下，这是一个重要的问题。</p><p>因此，如果要使用无状态引擎运行数据流，那么应该将这样的数据流分解为两个不同的数据流。第一个将数据从Apache Kafka传送到HDFS，另一个将数据从Apache Kafka传送到S3。每个数据流都应该为Kafka使用一个单独的Consumer Group，这将导致每个数据流获得相同数据的副本</p><h3 id="2、对合并的支持可能有限"><a href="#2、对合并的支持可能有限" class="headerlink" title="2、对合并的支持可能有限"></a>2、对合并的支持可能有限</h3><p>由于无状态NiFi中的数据从头到尾同步地通过数据流传输，因此使用需要多个flowfile(如MergeContent和MergeRecord)的处理器可能无法接收成功所需的所有数据。如果处理器有数据排队并被触发，但没有取得任何进展，则无状态引擎将再次触发源处理器，以便向处理器提供额外的数据</p><p>然而，这可能导致数据不断被引入的情况，这取决于处理器的行为。为了避免这种情况，可以通过配置限制可能带入数据流的单个调用的数据量。如果数据流配置将每次调用的数据量限制为10 MB，但是配置了MergeContent直到至少有100 MB的可用数据才创建bin，则数据流将继续触发MergeContent运行，而不进行任何进展，直到达到最大bin年龄(如果配置)或数据流超时。</p><p>此外，根据运行Stateless的上下文，触发源组件可能不会提供额外的数据。例如，如果在数据在输入端口中排队，然后触发数据流的环境中运行无状态，则随后触发输入端口运行将不会产生额外的数据</p><p>因此，确保任何包含合并FlowFiles逻辑的数据流都配置了MergeContent和MergeRecord的最大Bin Age是很重要的。</p><h3 id="3、故障处理"><a href="#3、故障处理" class="headerlink" title="3、故障处理"></a>3、故障处理</h3><p>在传统的NiFi中，将从给定处理器的“失败”连接循环回同一处理器是很常见的。这导致处理器不断尝试处理FlowFile，直到它成功为止。这可能非常重要，因为通常一个NiFi接收数据，它负责获得该数据的所有权，并且必须能够保存该数据，直到下游服务能够接收它并随后交付该数据。</p><p>然而，对于无状态NiFi，假定数据源既可靠又可重放。此外，根据设计，无状态NiFi在重启后不会保存数据。因此，对故障处理的考虑可能会有所不同。使用无状态NiFi，如果无法将数据传递到下游系统，通常最好将FlowFile路由到输出端口，然后将输出端口标记为故障端口(参见下面的[失败端口](#failure- Ports)了解更多信息)。</p><h3 id="4、流不应该加载大量文件"><a href="#4、流不应该加载大量文件" class="headerlink" title="4、流不应该加载大量文件"></a>4、流不应该加载大量文件</h3><p>在传统的NiFi中，FlowFile内容存储在磁盘上，而不是内存中。因此，它能够处理任何大小的数据，只要它适合磁盘。然而，在无状态中，FlowFile内容存储在内存中，在JVM堆中。因此，通常不建议尝试将大量文件(例如100 GB数据集)加载到无状态NiFi中。这样做通常会导致OutOfMemoryError，或者至少会导致大量垃圾收集，从而降低性能。</p><h2 id="特性对比"><a href="#特性对比" class="headerlink" title="特性对比"></a>特性对比</h2><p>如上所述，无状态NiFi提供了一组不同于传统NiFi的特性和权衡。在这里，我们总结一下关键的区别。这种比较并不详尽，但可以快速了解这两个运行时是如何运行的。<br>| Feature | Traditional NiFi | Stateless NiFi |<br>|———|——————|—————-|<br>| 数据持久性 | 数据可靠地存储在磁盘上的FlowFile和Content Repositories中 | 数据存储在内存中，必须在重新启动时再次从源端使用 |<br>| 数据排序 | 数据在每个连接中根据选择的优先级排序独立排序 | 数据按照接收到的顺序在系统中流动(先进先出/ FIFO) |<br>| Site-to-Site | 支持完整的Site-to-Site功能，包括服务器和客户端角色 | 可以向NiFi实例推送或从NiFi实例拉取，但不能接收传入的站点到站点连接。也就是说，作为客户端而不是服务器工作 |<br>| Form Factor | 旨在利用多个内核和磁盘的优势 | 轻巧的外形因素。很容易嵌入到另一个应用程序。单线程处理 |<br>| Heap Considerations | 通常，许多用户正在使用许多处理器。不应该将FlowFile内容加载到堆中，因为它很容易导致堆耗尽 | 较小的数据流使用较少的堆。Flow一次只对一个或几个FlowFile进行操作，并将FlowFile的内容保存在Java堆的内存中。 |<br>| Data Provenance | 完全存储、索引的数据来源，可以通过UI浏览并通过Reporting Tasks导出 | 有限的数据来源功能，事件存储在内存中。无法查看，但可以使用Reporting Tasks导出。但是，由于它们在内存中，因此它们将在重新启动时丢失，并且可能在导出之前滚出 |<br>| 嵌入性 | 虽然在技术上可以嵌入传统的NiFi，但不建议这样做，因为它会启动一个重量级的用户界面，处理复杂的身份验证和授权，以及几个基于文件的外部依赖项，这可能很难管理 | 具有最小的外部依赖关系(包含扩展的目录和用于临时存储的工作目录)，并且更易于管理。可嵌入性是无状态NiFi的一个重要特性。 |</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Apache NiFi应用程序可以被认为是两个独立但相互交织的组件:流作者组件和流引擎。通过将这两个组件集成到一个应用程序中，NiFi允许用</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="NiFi" scheme="https://castile.github.io/tags/NiFi/"/>
    
    <category term="Stateless" scheme="https://castile.github.io/tags/Stateless/"/>
    
  </entry>
  
  <entry>
    <title>NiFi身份验证与授权验证（2）</title>
    <link href="https://castile.github.io/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/"/>
    <id>https://castile.github.io/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/</id>
    <published>2023-10-15T10:33:05.000Z</published>
    <updated>2023-10-15T10:33:05.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="授权验证（Authorization）概述"><a href="#授权验证（Authorization）概述" class="headerlink" title="授权验证（Authorization）概述"></a>授权验证（Authorization）概述</h2><p>访问Nifi界面相当于你想进入一个商业写字楼，门口保安可能会拦住你要查看你的身份证（身份验证）。现在保安从身份证上知道了我们的名字（身份验证成功），但是他依然需要确定你是在这个写字楼工作才能让你进去。为此他查找大楼员工花名册（授权验证）。只有当你的名字出现在名册上时你才会被放行。</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697299271277.png" class width="1697299271277"><p>Nifi授权验证模块与两个数据库有关：一个是授权用户身份数据库（<code>UserGroupProvider</code>），另一个是用户权限数据库（<code>AccessPolicyProvider</code>） </p><p>其中，<code>UserGroupProvider</code>里面列出了所有被授权用户的用户名。只有在这个数据库里面的用户名才真正有权限使用Nifi。而<code>AccessPolicyProvider</code>里面列出了这些被授权用户以及他们所获得的权限之间的一一对应关系。</p><p>因此，Nifi的授权验证模块需要做的，就是先拿从身份验证模块得来的用户名与<code>UserGroupProvider</code>里的用户名做核对，看是否能找到对应的条目。如果有，再到<code>AccessPolicyProvider</code>里查看该用户有哪些权限。</p><p> 接下来，我们就看看，在Nifi当中是怎么对<code>UserGroupProvider</code>和<code>AccessPolicyProvider</code>进行设置的。 </p><h2 id="授权验证设置"><a href="#授权验证设置" class="headerlink" title="授权验证设置"></a>授权验证设置</h2><p>Nifi 会在<code>./conf/authorizers.xml</code>这个文件中寻找<code>UserGroupProvider</code>和<code>AccessPolicyProvider</code>的设置。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authorizers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">userGroupProvider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>file-user-group-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.FileUserGroupProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Users File&quot;</span>&gt;</span>./conf/users.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Legacy Authorized Users File&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial User Identity 1&quot;</span>&gt;</span>CN=castile-nifi, OU=nifi<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userGroupProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">accessPolicyProvider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>file-access-policy-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.FileAccessPolicyProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;User Group Provider&quot;</span>&gt;</span>file-user-group-provider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Authorizations File&quot;</span>&gt;</span>./conf/authorizations.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial Admin Identity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Legacy Authorized Users File&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Identity 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Group&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">accessPolicyProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">authorizer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>managed-authorizer<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.StandardManagedAuthorizer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Access Policy Provider&quot;</span>&gt;</span>file-access-policy-provider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authorizer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">authorizers</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1、-UserGroupProvider-设置"><a href="#1、-UserGroupProvider-设置" class="headerlink" title="1、 UserGroupProvider 设置"></a>1、 UserGroupProvider 设置</h3><p><code>FileUserGroupProvider</code>的使用最为简单，其本质是把所有授权用户名都存在一个文件里面。在<code>./conf/authorizers.xml</code>文件中与<code>FileUserGroupProvider</code>相关的有以下条目：</p><p> 这个文件储存用户名的文件默认是<code>./conf/users.xml</code>。它可以有类似以下内容 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tenants</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groups</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;66fa993d-f882-396e-bc79-3ff4b6994470&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;CN=castile-nifi, OU=nifi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tenants</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面配置一些用户的信息</p><h3 id="2、-AccessPolicyProvider-设置"><a href="#2、-AccessPolicyProvider-设置" class="headerlink" title="2、 AccessPolicyProvider 设置"></a>2、 AccessPolicyProvider 设置</h3><p> Nifi自带<code>AccessPolicyProvider</code>是<code>FileAccessPolicyProvider</code>。在<code>authorizers.xml</code>中相关的设置有以下的条目： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">accessPolicyProvider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>file-access-policy-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.FileAccessPolicyProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;User Group Provider&quot;</span>&gt;</span>file-user-group-provider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Authorizations File&quot;</span>&gt;</span>./conf/authorizations.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial Admin Identity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Legacy Authorized Users File&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Identity 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Group&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">accessPolicyProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，在属性<code>User Group Provider</code>中我们指定了使用哪一个<code>UserGroupProvider</code>。而<code>Authorizations File</code>指定了权限数据都存在哪个文件，默认是<code>./conf/authorizations.xml</code>。这个文件中有类似以下的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authorizations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;f99bccd1-a30e-3e4a-98a2-dbc708edc67f&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/flow&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;3fbc23d1-30d2-3068-ba89-9066202e13d7&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;b8775bd4-704a-34c6-987b-84f2daf7a515&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/restricted-components&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;3fbc23d1-30d2-3068-ba89-9066202e13d7&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;ff96062a-fa99-36dc-9942-0f6442ae7212&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/policies&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;3fbc23d1-30d2-3068-ba89-9066202e13d7&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">policies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authorizations</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在这个文件中列出了每一条的权限（Policy），而每条权限都对应一个用户，这样形成了一一对应的关系，而Nifi也能够因此确定每个用户拥有什么权限。 </p><h3 id="3、-Authorizer设置"><a href="#3、-Authorizer设置" class="headerlink" title="3、 Authorizer设置"></a>3、 Authorizer设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authorizer</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>managed-authorizer<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.StandardManagedAuthorizer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Access Policy Provider&quot;</span>&gt;</span>file-access-policy-provider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">authorizer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Nifi自带有managed-authorizer和single-user-authorizer，注意我们要在这里指定<code>AccessPolicyProvider</code>。然后，在<code>nifi.properties</code>中，我们要在以下属性指定我们需要用的<code>authorizer</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">nifi.security.user.authorizer</span>=<span class="string">managed-authorizer </span></span><br><span class="line"><span class="attr">或者：</span></span><br><span class="line"><span class="meta">nifi.security.user.authorizer</span>=<span class="string">single-user-authorizer</span></span><br></pre></td></tr></table></figure><p>这样，我们就告诉了Nifi我们使用的是<code>managed-authorizer</code>，然后<code>managed-authorizer</code>又指定了使用的<code>AccessPolicyProvider</code>，而<code>AccessPolicyProvider</code>又指定了所使用的<code>UserGroupProvider</code>。整个权限验证模块的设置就是这样子被串了起来。</p><h2 id="多用户授权"><a href="#多用户授权" class="headerlink" title="多用户授权"></a>多用户授权</h2><p>在生产环境中推荐使用<code>nifi.security.user.authorizer=managed-authorizer </code>, 这样可以为多个用户登录nifi并设置相应的权限。</p><p>在user.xml添加一个用户，并不设置任何权限</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697359958358.png" class width="1697359958358"><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697359986486.png" class width="1697359986486"><p>我们是要手动添加条目到<code>./conf/users.xml</code>和<code>./conf/authorizations.xml</code>吗？并不需要，我们可以通过在Nifi的UI界面操作来添加。不过，首先你得有一个管理员账号来登录进Nifi界面才行。无论你采用哪种身份验证方法，对于一个新的加密Nifi，你必须在<code>authorizers.xml</code>的<code>AccessPolicyProvider</code>中找到这一项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial Admin Identity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 把你的用户名添加进去即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">accessPolicyProvider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>file-access-policy-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.FileAccessPolicyProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;User Group Provider&quot;</span>&gt;</span>file-user-group-provider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Authorizations File&quot;</span>&gt;</span>./conf/authorizations.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial Admin Identity&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Legacy Authorized Users File&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Identity 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Node Group&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">accessPolicyProvider</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置Initial User Identity 1： admin</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">userGroupProvider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>file-user-group-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authorization.FileUserGroupProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Users File&quot;</span>&gt;</span>./conf/users.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Legacy Authorized Users File&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Initial User Identity 1&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;Initial User Identity 1&quot;&gt;CN=admin, OU=nifi&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userGroupProvider</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存，重启Nifi。当你再次访问UI时就发现，关于权限的错误已经消除，主界面也可以进去了。实际上，当你添加了<code>Initial Admin Identity</code>并重启后，Nifi在后台把这名用户添加到了<code>users.xml</code>中，并且在<code>authorizations.xml</code>中添加了一些基础的权限。</p><p>user.xml中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tenants</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groups</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;user identifier=&quot;6743d555-1f60-343a-9038-0be6fdcbf33b&quot; identity=&quot;CN=admin, OU=nifi&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tenants</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 当你使用初始管理员账号进入Nifi以后，你会发现大部分的地方都是灰色的，你基本没法做任何操作（下图） </p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697364885070.png" class width="1697364885070"><p>authorizations.xml中的配置湖自动生成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authorizations</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;f99bccd1-a30e-3e4a-98a2-dbc708edc67f&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/flow&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;87dce6d5-be9f-3392-a4ef-dd58a553a6a0&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/data/process-groups/2ba3a086-018b-1000-6247-3dcbfaf4602f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;2cb459c4-151d-3671-9d9b-7fa7f1448886&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/data/process-groups/2ba3a086-018b-1000-6247-3dcbfaf4602f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;f5e329a9-16eb-3aaf-a969-3778d17ad1e4&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/process-groups/2ba3a086-018b-1000-6247-3dcbfaf4602f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;3be25fe5-3d07-302c-9bf9-0b03fa9fb77d&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/process-groups/2ba3a086-018b-1000-6247-3dcbfaf4602f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;b8775bd4-704a-34c6-987b-84f2daf7a515&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/restricted-components&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;627410be-1717-35b4-a06f-e9362b89e0b7&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/tenants&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;15e4e0bd-cb28-34fd-8587-f8d15162cba5&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/tenants&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;ff96062a-fa99-36dc-9942-0f6442ae7212&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/policies&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;ad99ea98-3af6-3561-ae27-5bf09e1d969d&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/policies&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;2e1015cb-0fed-3005-8e0d-722311f21a03&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/controller&quot;</span> <span class="attr">action</span>=<span class="string">&quot;R&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">identifier</span>=<span class="string">&quot;c6322e6c-4cc1-3bcc-91b3-2ed2111674cf&quot;</span> <span class="attr">resource</span>=<span class="string">&quot;/controller&quot;</span> <span class="attr">action</span>=<span class="string">&quot;W&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">identifier</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">policies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authorizations</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以 通过点击右上侧的菜单栏并选择 user创建用户、Policies可以为用户进行权限管理</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697365023394.png" class width="1697365023394"><p>创建用户后，自动会写入到user.xml中</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697365187598.png" class width="1697365187598"><h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><p>1、 </p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697359326101.png" class width="1697359326101"><p>更改user.xml文件，user部分的identity不能有相同的</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697359835216.png" class width="1697359835216"><p>2、</p><img src="/2023/10/15/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%882%EF%BC%89/1697360312489.png" class width="1697360312489"><p>严格匹配，不能有“”，区分大小写</p><p>3、 当你在配置的是CN=admin, OU=nifi这种格式，那么会会从中解析出admin 作为用户名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;授权验证（Authorization）概述&quot;&gt;&lt;a href=&quot;#授权验证（Authorization）概述&quot; class=&quot;headerlink&quot; title=&quot;授权验证（Authorization）概述&quot;&gt;&lt;/a&gt;授权验证（Authorization）概述&lt;/</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="NiFi" scheme="https://castile.github.io/tags/NiFi/"/>
    
    <category term="SSL" scheme="https://castile.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>NiFi身份验证与授权验证（1）</title>
    <link href="https://castile.github.io/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/"/>
    <id>https://castile.github.io/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/</id>
    <published>2023-10-14T15:59:46.000Z</published>
    <updated>2023-10-14T15:59:46.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NiFi身份验证和授权验证介绍"><a href="#NiFi身份验证和授权验证介绍" class="headerlink" title="NiFi身份验证和授权验证介绍"></a>NiFi身份验证和授权验证介绍</h2><p>身份验证（Authentication）以及授权验证（Authorization）在Nifi里面是两个相当独立的模块。其中身份验证主要的任务是确认当前操作用户<strong>是否真的是声称的身份</strong>。当用户的身份被证实以后，它的用户名会被传递到授权验证模块，而授权验证模块会在它的数据库里面查找该用户名，并确认该用户<strong>有什么权限</strong>。打个比喻，如果你想进入一个商业写字楼，门口保安可能会拦住你要查看你的身份证（身份验证）。然后他会从一个员工名册上查找你的名字（授权验证）。只有当你的名字出现在名册上时你才会被放行。</p><p>下图表明了Nifi中这两个系统间的关系。当用户试图访问Nifi时，他必须首先通过身份验证。身份验证的时候Nifi可能需要参考一个外部的身份数据库（Identity Provider），如LDAP，Kerberos，OpenID Connect等。当确认你的身份后，你的用户名会被送到授权验证模块进一步核对。授权模块在确认你的权限时也需要参考一个身份数据库（可以是一个文档，或者是LDAP服务器）以及一个记录着用户身份与权限对应关系的数据库。</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697214104415.png" class width="1697214104415">、<p>身份验证和权限验证是完全可以采用不同的身份数据库的。所以我们说这两个系统相当独立，唯一把他们连接在一起的就是用户名的传递。 </p><h2 id="NiFi-基本配置"><a href="#NiFi-基本配置" class="headerlink" title="NiFi 基本配置"></a>NiFi 基本配置</h2><p>Nifi支持好几种用户验证方式：<code>TLS</code>, <code>LDAP</code>, <code>Kerberos</code>, <code>OpenID Connect</code>, <code>Apache Knox</code>等。我们主要介绍<code>TLS</code>以及<code>LDAP</code>两种方式。只要弄明白这两种，其余方式的设置都很类似。<br> 要开启用户验证功能，我们首先必须设置Nifi，使之只接受<code>https</code>安全连接。要达到这个目的，我们需要更改位于<code>./conf</code> 目录下的<code>nifi.properties</code>设置文件里的以下几项属性</p><p><code>nifi.web.http.port</code>：去除原来的<code>8080</code>，使该行变为<code>nifi.web.http.port=</code>，防止用户从非加密的http端口访问</p><p> <code>nifi.web.https.host</code>：设为运行Nifi的主机名字，例如<code>host-01</code> </p><p> <code>nifi.web.https.port</code>：我们用<code>8443</code>作为<code>https</code>端口</p><p> <code>nifi.security.keystore</code>：keystore的路径，例如<code>/opt/nifi/secrets/keystore.jks</code> </p><p> <code>nifi.security.keystoreType</code>：设为<code>JKS</code> </p><p> <code>nifi.security.keystorePasswd</code>：keystore的密码。</p><p> <code>nifi.security.truststore</code>：truststore的路径，例如<code>/opt/nifi/secrets/truststore.jks</code> </p><p> <code>nifi.security.truststoreType</code>：设为<code>JKS</code> </p><p> <code>nifi.security.truststorePasswd</code>：truststore的密码。</p><p> <code>nifi.remote.input.secure</code>：设为<code>true</code>，使得Nifi之间的Site-to-Site通信也用加密的方式。</p><h2 id="生成keystroe和truststore"><a href="#生成keystroe和truststore" class="headerlink" title="生成keystroe和truststore"></a>生成keystroe和truststore</h2><p>当我们要把Nifi设置成加密模式时，我们需要为其提供keystore和truststore。如果我们想通过TLS身份验证访问Nifi的UI时，我们还需要生成一个客户端的PKCS12文件来导入浏览器中。以下简单介绍怎么用Java自带的keytool来生成以上所提及的文件。</p><h3 id="1、生成KeyStore"><a href="#1、生成KeyStore" class="headerlink" title="1、生成KeyStore"></a>1、生成KeyStore</h3><p> 以下命令生成一个包含自签证书（self-signed certificate）的Java keystore： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keyalg RSA -alias nifi -keystore keystore.jks -keypass [password] -storepass [password] -validity 365 -keysize 4096 -dname &quot;CN=[hostname], OU=nifi&quot;</span><br></pre></td></tr></table></figure><p> <code>[password]</code>为你想设置的密码，替换<code>[hostname]</code>为你运行Nifi的机器的hostname </p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697214411384.png" class width="1697214411384"><h3 id="2、-生成PKCS12文件以及对应的truststore"><a href="#2、-生成PKCS12文件以及对应的truststore" class="headerlink" title="2、 生成PKCS12文件以及对应的truststore"></a>2、 生成PKCS12文件以及对应的truststore</h3><p><code>PKCS12</code>文件是一种加密文件，一般用于存放证书以及对应的私钥。由于使用keytool无法直接生成<code>PKCS12</code>文件，我们首先生成一个包含自签证书的keystore（与上文生成Keystore的命令很相似）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -keyalg RSA -alias client -keystore client_keystore.jks -keypass password -storepass password -validity 365 -keysize 4096 -dname &quot;CN=castile, OU=nifi&quot;</span><br></pre></td></tr></table></figure><p>这里，我们只是随便设置了一个密码<code>password</code>，因为这个Keystore只是一个过渡的产物，我们最后不会用到，所以随便设置一个就好。</p><p>接着我们把这个keystore转化成PKCS12文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore client_keystore.jks -destkeystore client.p12 -srcstoretype JKS -deststoretype PKCS12 -srcstorepass password -deststorepass as1234567890 -destkeypass as1234567890 -srcalias client -destalias client</span><br></pre></td></tr></table></figure><p> 除了生成PKCS12文件外，我们还需要生成一个信任PKCS12密匙文件中的证书的truststore。为此，我们先从之前的keystore中输出密匙的证书： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -keystore client_keystore.jks -alias client -file client.der -storepass password</span><br></pre></td></tr></table></figure><p> 当我们得到证书以后，我们把这个证书引入到<code>truststore.jks</code>当中： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -file client.der -alias client -keystore truststore.jks -storepass as1234567890 -noprompt</span><br></pre></td></tr></table></figure><p>这是执行上述命令生成的文件：</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697215015715.png" class width="1697215015715"><h2 id="访问nifi-UI界面"><a href="#访问nifi-UI界面" class="headerlink" title="访问nifi UI界面"></a>访问nifi UI界面</h2><p>在浏览器输入：<a href="https://192.168.160.140:9443/nifi">https://192.168.160.140:9443/nifi</a></p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697215948784.png" class width="1697215948784"><p>现在要求你输入用户名和密码，但是这个用户名和密码到底是啥呢？查找官网文档得知，有一个 <em>login-identity-providers.xml</em> 默认配置了用户名和密码</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697216106597.png" class width="1697216106597"><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697216146697.png" class width="1697216146697"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">identifier</span>&gt;</span>single-user-provider<span class="tag">&lt;/<span class="name">identifier</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">class</span>&gt;</span>org.apache.nifi.authentication.single.user.SingleUserLoginIdentityProvider<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Username&quot;</span>&gt;</span>3df4e52a-ab76-477c-9af4-513494f21110<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Password&quot;</span>&gt;</span>$2b$12$NFheiU47xu8ezCrkt0Yz7Oxph/WRhmJaNwMPlDEPkynGSwxEPEibu<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是，貌似没啥作用啊</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697216230305.png" class width="1697216230305"><p>原来，nifi启动的时候会自动生成一个随机用户名和密码，而且在login-single-user=credentials.xml中配置的密码是通过BCryptPasswordEncoder加密后的，</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697297856757.png" class width="1697297856757"><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697297612867.png" class width="1697297612867"><p>可以通过以下命令设置一个好记忆的密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nifi.sh set-single-user-credentials USERNAME PASSWORD</span><br></pre></td></tr></table></figure><p>设置完后可以登录界面了</p><img src="/2023/10/14/NiFi%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%EF%BC%881%EF%BC%89/1697299016832.png" class width="1697299016832">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NiFi身份验证和授权验证介绍&quot;&gt;&lt;a href=&quot;#NiFi身份验证和授权验证介绍&quot; class=&quot;headerlink&quot; title=&quot;NiFi身份验证和授权验证介绍&quot;&gt;&lt;/a&gt;NiFi身份验证和授权验证介绍&lt;/h2&gt;&lt;p&gt;身份验证（Authenticatio</summary>
      
    
    
    
    <category term="NiFi" scheme="https://castile.github.io/categories/NiFi/"/>
    
    
    <category term="ssl" scheme="https://castile.github.io/tags/ssl/"/>
    
    <category term="nifi" scheme="https://castile.github.io/tags/nifi/"/>
    
    <category term="身份验证" scheme="https://castile.github.io/tags/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>castile-rpc框架：动态代理实现RPC的调用和处理</title>
    <link href="https://castile.github.io/2023/10/08/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0RPC%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>https://castile.github.io/2023/10/08/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0RPC%E7%9A%84%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%84%E7%90%86/</id>
    <published>2023-10-08T14:55:44.000Z</published>
    <updated>2023-10-08T14:55:44.249Z</updated>
    
    <content type="html"><![CDATA[<p>在一个RPC框架中，动态代理可以屏蔽rpc调用时低层的网络通讯、服务发现、负载均衡等具体细节。 使用 RPC 框架的时候，只需要调用接口方法，然后就拿到了返回结果。这些都是通过动态代理去实现的。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式的优势是可以很好地遵循设计模式中的开闭原则，对扩展开发，对修改关闭。不需要关注目标类的实现细节，通过代理模式可以在不修改目标类的情况下，增强目标类功能的行为。 </p><p>动态代理是一种代理模式，它提供了一种能够在运行时动态构建代理类以及动态调用目标方法的机制。为什么称为动态是因为代理类和被代理对象的关系是在运行时决定的，代理类可以看作是对被代理对象的包装，对目标方法的调用是通过代理类来完成的。所以通过代理模式可以有效地将服务提供者和服务消费者进行解耦，隐藏了 RPC 调用的具体细节。</p><h2 id="服务消费者动态代理实现"><a href="#服务消费者动态代理实现" class="headerlink" title="服务消费者动态代理实现"></a>服务消费者动态代理实现</h2><p>我们使用@RPCReference注解来标注一个服务端接口，通过一个自定义的RpcReferenceBean完成了所有执行方法的拦截。 RpcReferenceBean 中 init() 方法是代理对象的创建入口，代理对象创建如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化bean，返回代理对象</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       RegistryService registryService = RegistryFactory.getInstance(registryAddr, RegistryType.valueOf(registryType));</span><br><span class="line">       <span class="keyword">this</span>.object = Proxy.newProxyInstance(</span><br><span class="line">               interfaceClass.getClassLoader(),</span><br><span class="line">               <span class="keyword">new</span> Class&lt;?&gt;[]&#123;interfaceClass&#125;,</span><br><span class="line">               <span class="keyword">new</span> RpcInvokerProxy(serviceVersion, timeout, registryService)</span><br><span class="line">       );</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>RpcInvokerProxy 处理器是实现动态代理逻辑的核心所在，其中包含 RPC 调用时底层网络通信、服务发现、负载均衡等具体细节 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcInvokerProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String serviceVersion;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long timeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RegistryService registryService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcInvokerProxy</span><span class="params">(String serviceVersion, <span class="keyword">long</span> timeout, RegistryService registryService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceVersion = serviceVersion;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">        <span class="keyword">this</span>.registryService = registryService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        CastileRpcProtocol&lt;RpcRequest&gt; rpcProtocol = <span class="keyword">new</span> CastileRpcProtocol&lt;&gt;();</span><br><span class="line">        <span class="comment">// 消息头</span></span><br><span class="line">        MessageHeader messageHeader = <span class="keyword">new</span> MessageHeader();</span><br><span class="line">        <span class="comment">// 消息id</span></span><br><span class="line">        <span class="keyword">long</span> requestId = RpcRequestHolder.REQUEST_ID_GEN.incrementAndGet();</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        messageHeader.setMagic(ProtocolConstants.MAGIC);</span><br><span class="line">        <span class="comment">// 版本</span></span><br><span class="line">        messageHeader.setVersion(ProtocolConstants.VERSION);</span><br><span class="line">        <span class="comment">// 序列化算法</span></span><br><span class="line">        messageHeader.setSerialization((<span class="keyword">byte</span>) SerializationTypeEnum.HESSIAN.getType());</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        messageHeader.setMsgType((<span class="keyword">byte</span>) MsgType.REQUEST.getType());</span><br><span class="line">        messageHeader.setStatus((<span class="keyword">byte</span>) MsgStatus.SUCCESS.getCode());</span><br><span class="line"></span><br><span class="line">        rpcProtocol.setMessageHeader(messageHeader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息正文</span></span><br><span class="line">        RpcRequest rpcRequest = <span class="keyword">new</span> RpcRequest();</span><br><span class="line">        rpcRequest.setServiceVersion(serviceVersion);</span><br><span class="line">        rpcRequest.setClassName(method.getDeclaringClass().getName());</span><br><span class="line">        rpcRequest.setMethodName(method.getName());</span><br><span class="line">        rpcRequest.setParameterTypes(method.getParameterTypes());</span><br><span class="line">        rpcRequest.setParams(args);</span><br><span class="line"></span><br><span class="line">        rpcProtocol.setBody(rpcRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建rpc客户端，发送消息进行rpc调用</span></span><br><span class="line">        RpcConsumer consumer = <span class="keyword">new</span> RpcConsumer();</span><br><span class="line"></span><br><span class="line">        RpcFuture&lt;RpcResponse&gt; rpcFuture = <span class="keyword">new</span> RpcFuture&lt;&gt;(<span class="keyword">new</span> DefaultPromise&lt;&gt;(<span class="keyword">new</span> DefaultEventLoop()), timeout);</span><br><span class="line">        RpcRequestHolder.REQUEST_MAP.put(requestId, rpcFuture);</span><br><span class="line">        consumer.sendMessage(rpcProtocol, registryService);</span><br><span class="line">        <span class="keyword">return</span> rpcFuture.getPromise().get(rpcFuture.getTimeout(), TimeUnit.MILLISECONDS).getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invoke() 方法的核心流程主要分为三步：构造 RPC 协议对象、发起 RPC 远程调用、等待 RPC 调用执行结果。 </p><p>发起 RPC 调用之前，我们需要找到最合适的服务节点，直接调用注册中心服务 RegistryService 的 discovery() 方法即可，默认是采用一致性 Hash 算法实现的服务发现 。为了尽可能使所有服务节点收到的请求流量更加均匀，需要为 discovery() 提供一个 invokerHashCode，一般可以采用 RPC 服务接口参数列表中第一个参数的 hashCode 作为参考依据。找到服务节点地址后，接下来通过 Netty 建立 TCP 连接，然后调用 writeAndFlush() 方法将数据发送到远端服务节点。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(CastileRpcProtocol&lt;RpcRequest&gt; protocolRequest, RegistryService registryService)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RpcRequest request = protocolRequest.getBody();</span><br><span class="line">        Object[] params = request.getParams();</span><br><span class="line">        String serviceKey = RpcServiceHelper.buildServiceKey(request.getMethodName(), request.getServiceVersion());</span><br><span class="line">        <span class="keyword">int</span> invokeHashCode = params.length &gt; <span class="number">0</span> ? params[<span class="number">0</span>].hashCode() : serviceKey.hashCode();</span><br><span class="line">        <span class="comment">// 找到需要发送到哪个服务实例</span></span><br><span class="line">        ServiceMetaData serviceMetaData = registryService.discovery(serviceKey, invokeHashCode);</span><br><span class="line">        <span class="keyword">if</span> (serviceMetaData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(serviceMetaData.getServiceAddr(), serviceMetaData.getPort()).sync();</span><br><span class="line">            channelFuture.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture channelFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (channelFuture.isSuccess()) &#123;</span><br><span class="line">                        log.info(<span class="string">&quot;connect rpc service &#123;&#125; om port &#123;&#125; success!&quot;</span>, serviceMetaData.getServiceAddr(), serviceMetaData.getPort());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;connect rpc server &#123;&#125; on port &#123;&#125; failed.&quot;</span>, serviceMetaData.getServiceAddr(), serviceMetaData.getPort());</span><br><span class="line">                        channelFuture.cause().printStackTrace();</span><br><span class="line">                        eventLoopGroup.shutdownGracefully();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            channelFuture.channel().writeAndFlush(protocolRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 发送RPC远程调用后，使用Promise机制等待拿到结果。</p><p>Promise 模式本质是一种异步编程模型，我们可以先拿到一个查看任务执行结果的凭证，不必等待任务执行完毕，当我们需要获取任务执行结果时，再使用凭证提供的相关接口进行获取。 </p><h2 id="服务提供者反射调用实现"><a href="#服务提供者反射调用实现" class="headerlink" title="服务提供者反射调用实现"></a>服务提供者反射调用实现</h2><p>消费者通过netty发送消息给服务端后，rpc的请求数据经过解码器解码成CastileRpcProtocol对象后，再交由RpcRequestHandler执行rpcx请求调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, CastileRpcProtocol&lt;RpcRequest&gt; msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 执行rpc调用比较耗时，因此放在业务线程池中去处理</span></span><br><span class="line">        RpcRequestProcessor.submitRequest(() -&gt; &#123;</span><br><span class="line">            CastileRpcProtocol&lt;RpcResponse&gt; rpcProtocol = <span class="keyword">new</span> CastileRpcProtocol&lt;&gt;();</span><br><span class="line">            RpcResponse rpcResponse = <span class="keyword">new</span> RpcResponse();</span><br><span class="line">            MessageHeader messageHeader = msg.getMessageHeader();</span><br><span class="line">            messageHeader.setMsgType((<span class="keyword">byte</span>) MsgType.RESPONSE.getType());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                RpcRequest request = msg.getBody();</span><br><span class="line">                String serviceKey = RpcServiceHelper.buildServiceKey(request.getClassName(), request.getServiceVersion());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取bean对象</span></span><br><span class="line">                Object serviceBean = rpcServiceMap.get(serviceKey);</span><br><span class="line">                <span class="keyword">if</span> (serviceBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 不存在</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;service not exist: %s:%s&quot;</span>, request.getClassName(), request.getMethodName()));</span><br><span class="line">                &#125;</span><br><span class="line">                Class&lt;?&gt; serviceClazz = serviceBean.getClass();</span><br><span class="line">                String methodName = request.getMethodName();</span><br><span class="line">                Object[] params = request.getParams();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = request.getParameterTypes();</span><br><span class="line">                FastClass fastClass = FastClass.create(serviceClazz);</span><br><span class="line">                <span class="keyword">int</span> index = fastClass.getIndex(methodName, parameterTypes);</span><br><span class="line">                Object result = fastClass.invoke(index, serviceBean, params);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 写回到response中</span></span><br><span class="line">                rpcResponse.setData(result);</span><br><span class="line">                messageHeader.setStatus((<span class="keyword">byte</span>) MsgStatus.SUCCESS.getCode());</span><br><span class="line">                rpcProtocol.setBody(rpcResponse);</span><br><span class="line">                rpcProtocol.setMessageHeader(messageHeader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                messageHeader.setStatus((<span class="keyword">byte</span>) MsgStatus.FAIL.getCode());</span><br><span class="line">                rpcResponse.setMessage(throwable.toString());</span><br><span class="line">                log.error(<span class="string">&quot;process request &#123;&#125; error&quot;</span>, messageHeader.getRequestId(), throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx.writeAndFlush(rpcProtocol);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rpcServiceMap 中存放着服务提供者所有对外发布的服务接口，我们可以通过服务名和服务版本找到对应的服务接口。通过服务接口、方法名、方法参数列表、参数类型列表，我们一般可以使用反射的方式执行方法调用。为了加速服务接口调用的性能，我们采用 Cglib 提供的 FastClass 机制直接调用方法，Cglib 中 MethodProxy 对象就是采用了 FastClass 机制，它可以和 Method 对象完成同样的事情，但是相比于反射性能更高。 </p><p>FastClass 机制并没有采用反射的方式调用被代理的方法，而是运行时动态生成一个新的 FastClass 子类，向子类中写入直接调用目标方法的逻辑。同时该子类会为代理类分配一个 int 类型的 index 索引，FastClass 即可通过 index 索引定位到需要调用的方法。 </p><h1 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h1><p><a href="https://gitee.com/hongliangzhu/castile-rpc">https://gitee.com/hongliangzhu/castile-rpc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一个RPC框架中，动态代理可以屏蔽rpc调用时低层的网络通讯、服务发现、负载均衡等具体细节。 使用 RPC 框架的时候，只需要调用接口方法，然后就拿到了返回结果。这些都是通过动态代理去实现的。&lt;/p&gt;
&lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class</summary>
      
    
    
    
    <category term="RPC" scheme="https://castile.github.io/categories/RPC/"/>
    
    
    <category term="RPC" scheme="https://castile.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>castile-rpc框架：服务治理-服务发现和负载均衡</title>
    <link href="https://castile.github.io/2023/09/27/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://castile.github.io/2023/09/27/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2023-09-27T15:25:00.000Z</published>
    <updated>2023-09-27T15:25:00.499Z</updated>
    
    <content type="html"><![CDATA[<p>在一个分布式系统中，每个服务都有多个实例，如果服务实例节点出现负载比较高，那么可能会导致该节点上面的请求处理超时，影响可用性。so，一个良好的rpc框架需要 实现合理的负载均衡算法。</p><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>服务消费者在发起请求之前都需要根据需要调用的服务去服务中心去找那些服务端实例，而且每个服务都有上线和下线的概念，因此消费端还需要感知服务提供者的实例变化，在rpc框架中，一般使用注册中心来实现服务的发现和注册。</p><p>主流的注册中心有zookeeper、Eureka、Etcd？Consul、Nacos等， 高可用的注册中心对 RPC 框架至关重要。说到高可用自然离不开 CAP 理论，一致性 Consistency、可用性 Availability 和分区容忍性 Partition tolerance 是无法同时满足的，注册中心一般分为 <strong>CP 类型注册中心</strong>和 <strong>AP 类型注册中心</strong> 。</p><p>● 一致性：指所有节点在同一时刻的数据完全一致。</p><p>● 可用性：指服务一直可用，而且响应时间正常。例如，不管什么时候访问X节点和Y节点都可以正常获取数据值，而不会出现问题。</p><p>● 分区容错性：指在遇到某节点或网络分区故障时，仍然能够对外提供满足一致性和可用性的服务。例如X节点和Y节点出现故障，但是依然可以很好地对外提供服务 </p><p><strong>CAP的取舍</strong>:</p><p>1、 满足CA舍弃P，也就是满足一致性和可用性，舍弃分区容错性。这也就意味着你的系统不是分布式的了，因为分布式就是把功能分开部署到不同的机器上。</p><p>2、满足CP舍弃A，也就是满足一致性和分区容错性，舍弃可用性。这也就意味着你的系统允许有一段时间访问失效等，不会出现数据不一致的情况。</p><p>3、满足AP舍弃C，也就是满足可用性和分区容错性，舍弃一致性。这也就意味着你的系统在并发访问的时候可能会出现数据不一致的情况。</p><p>在分布式系统中，为了避免单点故障，分区容错是不可避免的，所以对于注册中心来说只能从CP（优先保证数据一致性）、AP（优先保证数据可用性）中根据你的业务场景选择一种。</p><p> 使用最为广泛的 Zookeeper 就是 CP 类型的注册中心，集群中会有一个节点作为 Leader，如果 Leader 节点挂了，会重新进行 Leader 选举，ZooKeeper 保证了所有节点的强一致性，但是在 Leader 选举的过程中是无法对外提供服务的，牺牲了部分可用性。Eureka 是典型的 AP 类型注册中心，在实现服务发现的场景下有很大的优势，整个集群是不存在 Leader、Flower 概念的，如果其中一个节点挂了，请求会立刻转移到其他节点上。可能会存在的问题是如果不同分区无法进行节点通信，那么可能会造成节点之间的数据是有差异的，所以 AP 类型的注册中心通过牺牲强一致性来保证高可用性 。 </p><p>对于 RPC 框架而言，即使注册中心出现问题，也不应该影响服务的正常调用，所以 AP 类型的注册中心在该场景下相比于 CP 类型的注册中心更有优势。 对于成熟的 RPC 框架而言，会提供多种注册中心的选择，接下来我们便设计一个通用的注册中心接口，然后每种注册中心的实现都按该接口规范行扩展。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegistryService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册微服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceMetaData 服务元数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(ServiceMetaData serviceMetaData)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregister</span><span class="params">(ServiceMetaData serviceMetaData)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServiceMetaData <span class="title">discovery</span><span class="params">(String serviceName, <span class="keyword">int</span> invokerHashCode)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> RegistryService 接口包含注册中心四个基本操作：<strong>服务注册 register</strong>、<strong>服务注销 unRegister</strong>、<strong>服务发现 discovery</strong>、<strong>注册中心销毁 destroy</strong>。 </p><h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><p>服务消费者在发起 RPC 调用之前，需要感知有多少服务端节点可用，然后从中选取一个进行调用。之前我们提到了几种常用的负载均衡策略：Round-Robin 轮询、Weighted Round-Robin 权重轮询、Least Connections 最少连接数、Consistent Hash 一致性 Hash 等。  一致性 Hash 算法可以保证每个服务节点分摊的流量尽可能均匀，而且能够把服务节点扩缩容带来的影响降到最低。下面我们一起看下一致性 Hash 算法的设计思路。 </p><p>在服务端节点扩缩容时，一致性 Hash 算法会尽可能保证客户端发起的 RPC 调用还是固定分配到相同的服务节点上。一致性 Hash 算法是采用<strong>哈希环</strong>来实现的，通过 Hash 函数将对象和服务器节点放置在哈希环上，一般来说服务器可以选择 IP + Port 进行 Hash。</p><p>关于一致性hash算法可参考： <a href="https://zhuanlan.zhihu.com/p/482549860?utm_medium=social&amp;utm_oi=919687111576289280">https://zhuanlan.zhihu.com/p/482549860?utm_medium=social&amp;utm_oi=919687111576289280</a></p><p>负载均衡接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceLoadBalancer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">select</span><span class="params">(List&lt;T&gt; servers, <span class="keyword">int</span> hashCode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于zk实现的一致性hash算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKConsistentHashLoadBalancer</span> <span class="keyword">implements</span> <span class="title">ServiceLoadBalancer</span>&lt;<span class="title">ServiceInstance</span>&lt;<span class="title">ServiceMetaData</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 虚拟节点数，默认是10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> VIRTUAL_NODE_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildServiceInstanceKey</span><span class="params">(ServiceInstance&lt;ServiceMetaData&gt; instance)</span> </span>&#123;</span><br><span class="line">        ServiceMetaData payload = instance.getPayload();</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot;:&quot;</span>, payload.getServiceAddr(), String.valueOf(payload.getPort()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance&lt;ServiceMetaData&gt; <span class="title">select</span><span class="params">(List&lt;ServiceInstance&lt;ServiceMetaData&gt;&gt; servers, <span class="keyword">int</span> hashCode)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;Integer, ServiceInstance&lt;ServiceMetaData&gt;&gt; ring = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance&lt;ServiceMetaData&gt; instance : servers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VIRTUAL_NODE_SIZE; i++) &#123;</span><br><span class="line">                ring.put((buildServiceInstanceKey(instance) + VIRTUAL_NODE_SIZE + i).hashCode(), instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ceilingEntry() 方法找出大于或等于客户端 hashCode 的第一个节点，即为客户端对应要调用的服务节点</span></span><br><span class="line">        Map.Entry&lt;Integer, ServiceInstance&lt;ServiceMetaData&gt;&gt; entry = ring.ceilingEntry(hashCode);</span><br><span class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry = ring.firstEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>服务发现的实现思路比较简单，首先找出被调用服务所有的节点列表，然后通过 ZKConsistentHashLoadBalancer 提供的一致性 Hash 算法找出相应的服务节点。具体代码实现如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServiceMetaData <span class="title">discovery</span><span class="params">(String serviceName, <span class="keyword">int</span> invokerHashCode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Collection&lt;ServiceInstance&lt;ServiceMetaData&gt;&gt; serviceInstances = serviceDiscovery.queryForInstances(serviceName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过一些负载均衡算法，选择一个服务实例</span></span><br><span class="line">       ServiceInstance&lt;ServiceMetaData&gt; instance = <span class="keyword">new</span> ZKConsistentHashLoadBalancer().select((List&lt;ServiceInstance&lt;ServiceMetaData&gt;&gt;) serviceInstances, invokerHashCode);</span><br><span class="line">       <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> instance.getPayload();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一个分布式系统中，每个服务都有多个实例，如果服务实例节点出现负载比较高，那么可能会导致该节点上面的请求处理超时，影响可用性。so，一个良好的rpc框架需要 实现合理的负载均衡算法。&lt;/p&gt;
&lt;h2 id=&quot;注册中心&quot;&gt;&lt;a href=&quot;#注册中心&quot; class=&quot;head</summary>
      
    
    
    
    <category term="RPC" scheme="https://castile.github.io/categories/RPC/"/>
    
    
    <category term="RPC" scheme="https://castile.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>castile-rpc框架：通信协议的设计和编解码器的实现</title>
    <link href="https://castile.github.io/2023/09/27/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://castile.github.io/2023/09/27/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-09-27T13:37:57.000Z</published>
    <updated>2023-09-27T13:37:57.027Z</updated>
    
    <content type="html"><![CDATA[<p>现在需要建立客户端和服务端之间的通信机制了，主要内容有：</p><ul><li>服务消费者实现协议编码，向服务提供者发送调用数据。</li><li>服务提供者收到数据后解码，然后向服务消费者发送响应数据，暂时忽略 RPC 请求是如何被调用的。</li><li>服务消费者收到响应数据后成功返回。</li></ul><h2 id="1、RPC-通信方案设计"><a href="#1、RPC-通信方案设计" class="headerlink" title="1、RPC 通信方案设计"></a>1、RPC 通信方案设计</h2><img src="/2023/09/27/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/1695565921880.png" class width="1695565921880"><h2 id="2、自定义RPC通信协议"><a href="#2、自定义RPC通信协议" class="headerlink" title="2、自定义RPC通信协议"></a>2、自定义RPC通信协议</h2><p>协议是服务消费者和服务提供者之间通信的基础，主流的 RPC 框架都会自定义通信协议，相比于 HTTP、HTTPS、JSON 等通用的协议，自定义协议可以实现更好的性能、扩展性以及安全性。 </p><h3 id="自定义协议要素"><a href="#自定义协议要素" class="headerlink" title="自定义协议要素"></a>自定义协议要素</h3><ul><li>魔数，用来在第一时间判定是否是无效数据包</li><li>版本号，可以支持协议的升级</li><li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk</li><li>状态： 失败还是成功？ 可选</li><li>消息类型，是请求、响应？这个 跟业务相关</li><li>请求序号，为了双工通信，提供异步能力</li><li>正文长度</li><li>消息正文</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">| 魔数 2byte | 协议版本号 1byte | 序列化算法 1byte | 报文类型 1byte  |</span><br><span class="line"></span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">| 状态 1byte |        消息 ID 8byte     |      数据长度 4byte     |</span><br><span class="line"></span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">|                   数据内容 （长度不定）                          |</span><br><span class="line"></span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>我们把协议分为协议头 Header 和协议体 Body 两个部分。协议头 Header 包含魔数、协议版本号、序列化算法、报文类型、状态、消息 ID、数据长度，协议体 Body 只包含数据内容部分，数据内容的长度是不固定的。RPC 请求和响应都可以使用该协议进行通信，对应协议实体类的定义如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CastileRpcProtocol</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MessageHeader messageHeader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHeader</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> magic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> version;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> serialization;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> msgType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> status;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> msgLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、序列化算法选型"><a href="#3、序列化算法选型" class="headerlink" title="3、序列化算法选型"></a>3、序列化算法选型</h2><p>目前比较常用的序列化算法包括 Json、Kryo、Hessian、Protobuf 等，这些第三方序列化算法都比 Java 原生的序列化操作都更加高效。 我们设计了一个 RPC 序列化顶层接口， 所有的序列化算法都需要实现这个接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RpcSerialization</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 待序列化数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 序列化数据的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列化后的字节流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="keyword">byte</span>[] serialize(T obj) <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buf   数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] buf, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 我们为 RpcSerialization 提供了 HessianSerialization 和 JsonSerialization 两种类型的实现，为此，可以提供一个序列化工厂来切换不同的序列化算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RpcSerialization <span class="title">getRpcSerialization</span><span class="params">(<span class="keyword">byte</span> type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SerializationTypeEnum typeEnum = SerializationTypeEnum.findSerializationType(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (typeEnum)&#123;</span><br><span class="line">            <span class="keyword">case</span> HESSIAN:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HessianSerialization();</span><br><span class="line">            <span class="keyword">case</span> JSON:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JsonSerialization();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;serialization type is illegal, &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、通信协议的编码器"><a href="#4、通信协议的编码器" class="headerlink" title="4、通信协议的编码器"></a>4、通信协议的编码器</h2><p>Netty 提供了两个最为常用的编解码抽象基类 MessageToByteEncoder 和 ByteToMessageDecoder，帮助我们很方便地扩展实现自定义协议。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">CastileRpcProtocol</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   +---------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   | 魔数 2byte | 协议版本号 1byte | 序列化算法 1byte | 报文类型 1byte  |</span></span><br><span class="line"><span class="comment">   +---------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   | 状态 1byte |        消息 ID 8byte     |      数据长度 4byte     |</span></span><br><span class="line"><span class="comment">   +---------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   |                   数据内容 （长度不定）                          |</span></span><br><span class="line"><span class="comment">   +---------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, CastileRpcProtocol message, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MessageHeader messageHeader = message.getMessageHeader();</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        byteBuf.writeShort(messageHeader.getMagic());</span><br><span class="line">        <span class="comment">// 协议版本号</span></span><br><span class="line">        byteBuf.writeByte(messageHeader.getVersion());</span><br><span class="line">        <span class="comment">// 序列化算法</span></span><br><span class="line">        byteBuf.writeByte(messageHeader.getSerialization());</span><br><span class="line">        <span class="comment">// 报文类型</span></span><br><span class="line">        byteBuf.writeByte(messageHeader.getMsgType());</span><br><span class="line">        <span class="comment">// 状态</span></span><br><span class="line">        byteBuf.writeByte(messageHeader.getStatus());</span><br><span class="line">        <span class="comment">// 消息id</span></span><br><span class="line">        byteBuf.writeLong(messageHeader.getRequestId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        RpcSerialization rpcSerialization = SerializationFactory.getRpcSerialization(messageHeader.getSerialization());</span><br><span class="line">        <span class="keyword">byte</span>[] body = rpcSerialization.serialize(message.getBody());</span><br><span class="line">        <span class="comment">// 数据长度</span></span><br><span class="line">        byteBuf.writeInt(body.length);</span><br><span class="line">        byteBuf.writeBytes(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在服务消费者或者服务提供者调用 writeAndFlush() 将数据写给对方前，都已经封装成 RpcRequest 或者 RpcResponse，所以可以采用 CastileRpcProtocol作为 RPC Encoder 编码器能够支持的编码类型。 </p><h2 id="5、-通信协议的解码器"><a href="#5、-通信协议的解码器" class="headerlink" title="5、 通信协议的解码器"></a>5、 通信协议的解码器</h2><p> 解码器 相比于编码器 要复杂很多，解码器的目标是将字节流数据解码为消息对象，并传递给下一个 Inbound 处理器。整个解码过程有几个要点要特别注意： </p><ul><li><p>只有当 ByteBuf 中内容大于协议头 Header 的固定的 18 字节时，才开始读取数据。</p></li><li><p>即使已经可以完整读取出协议头 Header，但是协议体 Body 有可能还未就绪。所以在刚开始读取数据时，需要使用 markReaderIndex() 方法标记读指针位置，当 ByteBuf 中可读字节长度小于协议体 Body 的长度时，再使用 resetReaderIndex() 还原读指针位置，说明现在 ByteBuf 中可读字节还不够一个完整的数据包。</p><blockquote><p>这个其实也可以使用<strong>LengthFieldBasedFrameDecoder</strong>来处理粘包和半包问题</p></blockquote></li><li><p>根据不同的报文类型 MsgType，需要反序列化出不同的协议体对象。在 RPC 请求调用的场景下，服务提供者需要将协议体内容反序列化成 MiniRpcRequest 对象；在 RPC 结果响应的场景下，服务消费者需要将协议体内容反序列化成 MiniRpcResponse 对象。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 消息小于头长度，不完整数据</span></span><br><span class="line">        <span class="keyword">if</span> (byteBuf.readableBytes() &lt; ProtocolConstants.HEADER_TOTAL_LEN) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;message length valid failed! please check request data&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        byteBuf.markReaderIndex();</span><br><span class="line">        <span class="comment">// 魔数</span></span><br><span class="line">        <span class="keyword">short</span> magic = byteBuf.readShort();</span><br><span class="line">        <span class="comment">// 魔数不匹配，不是本系统消息</span></span><br><span class="line">        <span class="keyword">if</span> (magic != ProtocolConstants.MAGIC) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;magic number is illegal, &quot;</span> + magic);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span> version = byteBuf.readByte();</span><br><span class="line">        <span class="keyword">byte</span> serializeType = byteBuf.readByte();</span><br><span class="line">        <span class="keyword">byte</span> msgType = byteBuf.readByte();</span><br><span class="line">        <span class="keyword">byte</span> status = byteBuf.readByte();</span><br><span class="line">        <span class="keyword">long</span> requestId = byteBuf.readLong();</span><br><span class="line">        <span class="keyword">int</span> dataLength = byteBuf.readInt();</span><br><span class="line">        <span class="keyword">if</span> (byteBuf.readableBytes() &lt; dataLength) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;data readableBytes less than data length!&quot;</span>);</span><br><span class="line">            byteBuf.resetReaderIndex();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[dataLength];</span><br><span class="line">        byteBuf.readBytes(data);</span><br><span class="line">        <span class="comment">// 获取消息类型</span></span><br><span class="line">        MsgType byTpye = MsgType.findByType(msgType);</span><br><span class="line">        <span class="keyword">if</span> (byTpye == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;msgType number is illegal, &quot;</span> + msgType);</span><br><span class="line">        &#125;</span><br><span class="line">        MessageHeader header = <span class="keyword">new</span> MessageHeader();</span><br><span class="line">        header.setMagic(magic);</span><br><span class="line">        header.setVersion(version);</span><br><span class="line">        header.setSerialization(serializeType);</span><br><span class="line">        header.setStatus(status);</span><br><span class="line">        header.setRequestId(requestId);</span><br><span class="line">        header.setMsgType(msgType);</span><br><span class="line">        header.setMsgLen(dataLength);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        RpcSerialization rpcSerialization = SerializationFactory.getRpcSerialization(serializeType);</span><br><span class="line">        <span class="keyword">switch</span> (byTpye) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST:</span><br><span class="line">                RpcRequest rpcRequest = rpcSerialization.deserialize(data, RpcRequest.class);</span><br><span class="line">                <span class="keyword">if</span> (rpcRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    CastileRpcProtocol&lt;RpcRequest&gt; castileRpcProtocol = <span class="keyword">new</span> CastileRpcProtocol&lt;&gt;();</span><br><span class="line">                    castileRpcProtocol.setMessageHeader(header);</span><br><span class="line">                    castileRpcProtocol.setBody(rpcRequest);</span><br><span class="line">                    list.add(castileRpcProtocol);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RESPONSE:</span><br><span class="line">                RpcResponse rpcResponse = rpcSerialization.deserialize(data, RpcResponse.class);</span><br><span class="line">                <span class="keyword">if</span> (rpcResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    CastileRpcProtocol&lt;RpcResponse&gt; castileRpcProtocol = <span class="keyword">new</span> CastileRpcProtocol&lt;&gt;();</span><br><span class="line">                    castileRpcProtocol.setMessageHeader(header);</span><br><span class="line">                    castileRpcProtocol.setBody(rpcResponse);</span><br><span class="line">                    list.add(castileRpcProtocol);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> HEARTBEAT:</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、请求和响应处理"><a href="#6、请求和响应处理" class="headerlink" title="6、请求和响应处理"></a>6、请求和响应处理</h2><p>消费者调用RPC请求后，服务端通过解码器将二进制的数据解码成CastileRpcProtocol<RpcRequest>对象，再传递给RpcRequestHandler处理器执行rpc调用。 RpcRequestHandler 也是一个 Inbound 处理器，它并不需要承担解码工作，所以 RpcRequestHandler 直接继承 SimpleChannelInboundHandler 即可，然后重写 channelRead0() 方法，具体实现如下： </RpcRequest></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcRequestHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">CastileRpcProtocol</span>&lt;<span class="title">RpcRequest</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; rpcServiceMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcRequestHandler</span><span class="params">(Map&lt;String, Object&gt; rpcServiceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rpcServiceMap = rpcServiceMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, CastileRpcProtocol&lt;RpcRequest&gt; msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 执行rpc调用比较耗时，因此放在业务线程池中去处理</span></span><br><span class="line">        RpcRequestProcessor.submitRequest(() -&gt; &#123;</span><br><span class="line">            CastileRpcProtocol&lt;RpcResponse&gt; rpcProtocol = <span class="keyword">new</span> CastileRpcProtocol&lt;&gt;();</span><br><span class="line">            RpcResponse rpcResponse = <span class="keyword">new</span> RpcResponse();</span><br><span class="line">            MessageHeader messageHeader = msg.getMessageHeader();</span><br><span class="line">            messageHeader.setMsgType((<span class="keyword">byte</span>) MsgType.RESPONSE.getType());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                RpcRequest request = msg.getBody();</span><br><span class="line">                String serviceKey = RpcServiceHelper.buildServiceKey(request.getClassName(), request.getServiceVersion());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取bean对象</span></span><br><span class="line">                Object serviceBean = rpcServiceMap.get(serviceKey);</span><br><span class="line">                <span class="keyword">if</span> (serviceBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 不存在</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;service not exist: %s:%s&quot;</span>, request.getClassName(), request.getMethodName()));</span><br><span class="line">                &#125;</span><br><span class="line">                Class&lt;?&gt; serviceClazz = serviceBean.getClass();</span><br><span class="line">                String methodName = request.getMethodName();</span><br><span class="line">                Object[] params = request.getParams();</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = request.getParameterTypes();</span><br><span class="line">                FastClass fastClass = FastClass.create(serviceClazz);</span><br><span class="line">                <span class="keyword">int</span> index = fastClass.getIndex(methodName, parameterTypes);</span><br><span class="line">                Object result = fastClass.invoke(index, serviceBean, params);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 写回到response中</span></span><br><span class="line">                rpcResponse.setData(result);</span><br><span class="line">                messageHeader.setStatus((<span class="keyword">byte</span>) MsgStatus.SUCCESS.getCode());</span><br><span class="line">                rpcProtocol.setBody(rpcResponse);</span><br><span class="line">                rpcProtocol.setMessageHeader(messageHeader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                messageHeader.setStatus((<span class="keyword">byte</span>) MsgStatus.FAIL.getCode());</span><br><span class="line">                rpcResponse.setMessage(throwable.toString());</span><br><span class="line">                log.error(<span class="string">&quot;process request &#123;&#125; error&quot;</span>, messageHeader.getRequestId(), throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ctx.writeAndFlush(rpcProtocol);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 服务消费者在发起调用时，维护了请求 requestId 和 RpcFuture的映射关系，RpcResponseHandler 会根据请求的 requestId 找到对应发起调用的 RpcFuture，然后为 RpcFuture 设置响应结果。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcResponseHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">CastileRpcProtocol</span>&lt;<span class="title">RpcResponse</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, CastileRpcProtocol&lt;RpcResponse&gt; msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> requestId = msg.getMessageHeader().getRequestId();</span><br><span class="line">        RpcFuture&lt;RpcResponse&gt; responseRpcFuture = RpcRequestHolder.REQUEST_MAP.remove(requestId);</span><br><span class="line">        responseRpcFuture.getPromise().setSuccess(msg.getBody());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcFuture</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Promise&lt;T&gt; promise;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcFuture</span><span class="params">(Promise&lt;T&gt; promise, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.promise = promise;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在需要建立客户端和服务端之间的通信机制了，主要内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务消费者实现协议编码，向服务提供者发送调用数据。&lt;/li&gt;
&lt;li&gt;服务提供者收到数据后解码，然后向服务消费者发送响应数据，暂时忽略 RPC 请求是如何被调用的。&lt;/li&gt;
&lt;li&gt;服务消</summary>
      
    
    
    
    <category term="RPC" scheme="https://castile.github.io/categories/RPC/"/>
    
    
    <category term="RPC" scheme="https://castile.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>castile-rpc框架：服务的注册与发现</title>
    <link href="https://castile.github.io/2023/09/24/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>https://castile.github.io/2023/09/24/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</id>
    <published>2023-09-24T14:14:07.000Z</published>
    <updated>2023-09-24T14:14:07.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先考虑用户应该如何使用"><a href="#先考虑用户应该如何使用" class="headerlink" title="先考虑用户应该如何使用"></a>先考虑用户应该如何使用</h1><h2 id="1、-服务端"><a href="#1、-服务端" class="headerlink" title="1、 服务端"></a>1、 服务端</h2><p>服务端定义一个服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-09-03 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打招呼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-09-03 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RpcService(serviceInterface = HelloService.class, serviceVersion = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在服务端启动的时候会向注册中心注册这个服务。</p><h2 id="2、-消费端"><a href="#2、-消费端" class="headerlink" title="2、 消费端"></a>2、 消费端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RpcReference(serviceVersion = &quot;1.0.0&quot;, timeout = 3000)</span></span><br><span class="line">    <span class="keyword">private</span> HelloFacade helloFacade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloFacade.hello(<span class="string">&quot;mini rpc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="服务提供者提供服务"><a href="#服务提供者提供服务" class="headerlink" title="服务提供者提供服务"></a>服务提供者提供服务</h1><h2 id="1、RPC服务端"><a href="#1、RPC服务端" class="headerlink" title="1、RPC服务端"></a>1、RPC服务端</h2><p>服务提供者采用的是主从 Reactor 线程模型，启动过程包括配置线程池、Channel 初始化、端口绑定三个步骤 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.castile.rpc.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.castile.rpc.provider.autoconfig.RpcProperties;</span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动RPC服务端，</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 服务启动的时候进行服务发现与注册</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-09-03 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServerRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RpcProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String address = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap().group(boss, worker)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> LoggingHandler());</span><br><span class="line">                            <span class="comment">// TODO 添加其他处理器， 如：编解码，消息请求处理</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(address, <span class="keyword">this</span>.properties.getPort()).sync();</span><br><span class="line">            log.info(<span class="string">&quot;连接信息：server addr &#123;&#125; started on port &#123;&#125;&quot;</span>, address, <span class="keyword">this</span>.properties.getPort());</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            boss.shutdownGracefully();</span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、发布服务"><a href="#2、发布服务" class="headerlink" title="2、发布服务"></a>2、发布服务</h2><p>定义一个注解，用于标识一个服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.castile.rpc.provider;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * rpc服务注解</span><br><span class="line"> *</span><br><span class="line"> * @author Hongliang Zhu</span><br><span class="line"> * @create 2023-09-03 15:51</span><br><span class="line"> */</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Component</span><br><span class="line">public @interface RpcService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 服务所在的接口</span><br><span class="line">     *</span><br><span class="line">     * @return 服务接口</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt; serviceInterface() default Object.class;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务版本</span><br><span class="line">     *</span><br><span class="line">     * @return 版本</span><br><span class="line">     */</span><br><span class="line">    String version() default &quot;1.0.0&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有两个重要的属性，serviceInterface表示服务类型接口，version表示服务版本。 服务消费者必须指定完全一样的属性才能正确调用。有了 @RpcService 注解之后，我们就可以在服务实现类上使用它。</p><p>@RpcService 注解本质上就是 @Component，可以将服务实现类注册成 Spring 容器所管理的 Bean。这里需要了解Spring中Bean的生命周期了。</p><img src="/2023/09/24/castile-rpc%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/1693753942141.png" class width="1693753942141"><p>Spring的BeanPostProcessor接口提供了对Bean进行再加工的扩展点。 BeanPostProcessor 常用于处理自定义注解。自定义的 Bean 可以通过实现 BeanPostProcessor 接口，在 Bean 实例化的前后加入自定义的逻辑处理。如下所示，我们通过 RpcProvider 实现 BeanPostProcessor 接口，来实现对 声明 @RpcService 注解服务的自定义处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.castile.rpc.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.castile.rpc.provider.autoconfig.RpcProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫描<span class="doctag">@RpcService</span>注解，注册到注册中心中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-09-03 23:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcProviderProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; rpcServices = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RpcProperties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        RpcService rpcService = bean.getClass().getAnnotation(RpcService.class);</span><br><span class="line">        <span class="keyword">if</span> (rpcService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String serviceName = rpcService.serviceInterface().getName();</span><br><span class="line">            String serviceVersion = rpcService.version();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String address = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ServiceMetaData serviceMetaData = <span class="keyword">new</span> ServiceMetaData();</span><br><span class="line">                serviceMetaData.setPort(properties.getPort());</span><br><span class="line">                serviceMetaData.setServiceAddr(address);</span><br><span class="line">                serviceMetaData.setServiceName(serviceName);</span><br><span class="line">                serviceMetaData.setServiceVersion(serviceVersion);</span><br><span class="line">                <span class="comment">// TODO 封装注册信息，注册到注册中心</span></span><br><span class="line"></span><br><span class="line">                rpcServices.put(serviceName + <span class="string">&quot;#&quot;</span> + serviceVersion, bean);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;failed to register service &#123;&#125;#&#123;&#125;&quot;</span>, serviceName, serviceVersion, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="服务消费者订阅服务"><a href="#服务消费者订阅服务" class="headerlink" title="服务消费者订阅服务"></a>服务消费者订阅服务</h1><p>消费者不属于常驻服务， 每次发起 RPC 调用时它才会去选择向哪个远端服务发送数据。 对于声明 @RpcReference 注解的成员变量，我们需要构造出一个可以真正进行 RPC 调用的 Bean，然后将它注册到 Spring 的容器中。</p><p> @RpcReference 注解的定义 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcReference &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用的服务版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 服务版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">serviceVersion</span><span class="params">()</span> <span class="keyword">default</span> &quot;1.0.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rpc调用的超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 3000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要为使用了@RpcReference注解的成员变量构造成一个自定义的bean对象，并且对该bean对象执行的所有方法进行拦截。</p><p>Spring 的 FactoryBean 接口可以帮助我们实现自定义的 Bean，FactoryBean 是一种特种的工厂 Bean，通过 getObject() 方法返回对象，而并不是 FactoryBean 本身。 </p><p>有了 @RpcReference 注解和 RpcReferenceBean 之后，我们可以使用 Spring 的扩展点 BeanFactoryPostProcessor 对 Bean 的定义进行修改。上文中服务提供者使用的是 BeanPostProcessor，BeanFactoryPostProcessor 和 BeanPostProcessor 都是 Spring 的核心扩展点，它们之间有什么区别呢？BeanFactoryPostProcessor 是 Spring 容器加载 Bean 的定义之后以及 Bean 实例化之前执行，所以 BeanFactoryPostProcessor 可以在 Bean 实例化之前获取 Bean 的配置元数据，并允许用户对其修改。而 BeanPostProcessor 是在 Bean 初始化前后执行，它并不能修改 Bean 的配置信息。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcConsumerPostProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INIT_METHOD_NAME = <span class="string">&quot;init&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; rpcRefBeanDefinitions = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classLoader = classLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        String[] beanDefinitionNames = configurableListableBeanFactory.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefName : beanDefinitionNames) &#123;</span><br><span class="line">            BeanDefinition beanDefinition = configurableListableBeanFactory.getBeanDefinition(beanDefName);</span><br><span class="line">            <span class="keyword">final</span> String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">            <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = ClassUtils.resolveClassName(beanClassName, <span class="keyword">this</span>.classLoader);</span><br><span class="line">                ReflectionUtils.doWithFields(clazz, <span class="keyword">this</span>::parseRpcReference);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// beanClassName = null</span></span><br><span class="line">        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) configurableListableBeanFactory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.rpcRefBeanDefinitions.forEach((beanName, definition) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.containsBean(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;application  context already has a bean named &quot;</span> + beanName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 注册到spring中</span></span><br><span class="line">                registry.registerBeanDefinition(beanName, rpcRefBeanDefinitions.get(beanName));</span><br><span class="line">                log.info(<span class="string">&quot;registered RpcReferenceBean &#123;&#125; success.&quot;</span>, beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = applicationContext;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRpcReference</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        RpcReference annotation = AnnotationUtils.getAnnotation(field, RpcReference.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RpcReferenceBean.class);</span><br><span class="line">            builder.setInitMethodName(INIT_METHOD_NAME);</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;interfaceClass&quot;</span>, field.getType());</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;serviceVersion&quot;</span>, annotation.serviceVersion());</span><br><span class="line">            builder.addPropertyValue(<span class="string">&quot;timeout&quot;</span>, annotation.timeout());</span><br><span class="line">            AbstractBeanDefinition definition = builder.getBeanDefinition();</span><br><span class="line">            rpcRefBeanDefinitions.put(field.getName(), definition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先考虑用户应该如何使用&quot;&gt;&lt;a href=&quot;#先考虑用户应该如何使用&quot; class=&quot;headerlink&quot; title=&quot;先考虑用户应该如何使用&quot;&gt;&lt;/a&gt;先考虑用户应该如何使用&lt;/h1&gt;&lt;h2 id=&quot;1、-服务端&quot;&gt;&lt;a href=&quot;#1、-服务端&quot; cla</summary>
      
    
    
    
    <category term="RPC" scheme="https://castile.github.io/categories/RPC/"/>
    
    
    <category term="rpc" scheme="https://castile.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>castile-rpc框架</title>
    <link href="https://castile.github.io/2023/09/03/castile-rpc%E6%A1%86%E6%9E%B6/"/>
    <id>https://castile.github.io/2023/09/03/castile-rpc%E6%A1%86%E6%9E%B6/</id>
    <published>2023-09-03T07:28:31.000Z</published>
    <updated>2023-09-03T07:28:31.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RPC服务框架架构"><a href="#RPC服务框架架构" class="headerlink" title="RPC服务框架架构"></a>RPC服务框架架构</h1><img src="/2023/09/03/castile-rpc%E6%A1%86%E6%9E%B6/1693723330951.png" class width="1693723330951"><p>RPC又称远程过程调用（Remote Procedure Call），用于解决分布式系统中服务之间的调用问题。他可以实现开发者能够像调用本地的方法一样去调用远程的服务。包含了三个重要的组成部分，分别是注册中心、服务提供者、服务消费者，其中，服务消费者也称之为客户端。</p><p>在一次RPC调用的时候，这三个组成部分的交互过程大致如下：</p><p>1、 服务提供者（微服务）启动的时候，会将自己的对外开发的服务列表（接口信息）注册到服务中心中，消费者想注册中心去订阅服务提供者的地址。</p><p>2、 消费者会通过一个本地的代理模块区调用服务提供者，这个代理Proxy模块会将调用的方法。参数等数据封装成网络字节流的形式去传输</p><p>3、在传输之前需要确定发给哪一个服务端，因此会先从服务列表中选取一个服务地址（可以做负载均衡），并将数据通过网络发送给服务端。</p><p>4、 服务提供者接受到消息后，进行解码，拿到要调用的方法和参数。</p><p>5、服务提供者根据解码后的请求去调用对应的服务，然后将返回结果封装成字节流发送给服务消费者。</p><h1 id="服务的注册和发现"><a href="#服务的注册和发现" class="headerlink" title="服务的注册和发现"></a>服务的注册和发现</h1><p>首先最重要的是服务提供者可以去注册到注册中心，消费者可以去注册中心订阅服务。</p><p>为什么要有注册中心呢？传统的分布式系统一般是通过http去调用远端服务，这往往需要知道具体的服务端地址、调用信息等，系统之间的耦合比较严重，为了更好的去洁癖客户端和服务端，引入了注册中心，可以优雅地处理服务的上线和下线。</p><p>注册中心实现服务的注册和发现功能。服务端自行注册服务列表，服务下线的时候需要将自己的服务列表元数据移除，并可通知对应的客户端。客户端发起调用的时候，自己去订阅获取注册中心的服务列表，并通过一些负载均衡算法选择其中的一个实例进行调用，</p><p>那么，如何处理服务下线的问题，服务下线是需要移除注册中心该服务的一些信息的，最能想到的办法就是，服务端主动发送清理消息给注册中心，但是如果服务节点异常退出，比如节点断点了，断网等，还来不及发送消息给注册中心，那么注册中心就一直存在异常服务节点的元数据了，从而可能会造成服务调用失败的问题。</p><p>为了避免上述问题，实现服务优雅下线比较好的方式是采用<strong>主动通知 + 心跳检测</strong>的方案。除了主动通知注册中心下线外，还需要增加节点与注册中心的心跳检测功能，这个过程也叫作探活。心跳检测可以由节点或者注册中心负责，例如注册中心可以向服务节点每 60s 发送一次心跳包，如果 3 次心跳包都没有收到请求结果，可以任务该服务节点已经下线 </p><h1 id="通信协议和序列化"><a href="#通信协议和序列化" class="headerlink" title="通信协议和序列化"></a>通信协议和序列化</h1><p>RPC 是远程调用，必然离不开网络通信协议。客户端在向服务端发起调用之前，需要考虑采用何种方式将调用信息进行编码，并传输到服务端。因为 RPC 框架对性能有非常高的要求，所以通信协议应该越简单越好，这样可以减少编解码的性能损耗。</p><p>RPC 框架可以基于不同的协议实现，大部分主流 RPC 框架会选择 TCP、HTTP 协议，出名的 gRPC 框架使用的则是 HTTP2。TCP、HTTP、HTTP2 都是稳定可靠的，但其实使用 UDP 协议也是可以的，具体看业务使用的场景 。</p><p>客户端和服务端在通信过程中要传输的数据主要有：</p><blockquote><ol><li>调用的接口名称</li><li>方法</li><li>请求参数</li><li>调用属性等信息</li></ol></blockquote><p>这些数据需要在客户端序列化成二进制，通过网络传输到服务端。服务端需要通过反序列化得到调用的信息，然后利用反射调用对应的方法，最后将结果、状态码、异常等信息返回。</p><h1 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h1><h2 id="1、-同步调用"><a href="#1、-同步调用" class="headerlink" title="1、 同步调用"></a>1、 同步调用</h2><p>客户端线程发起RPC调用后会一直阻塞，知道拿到返回的结果。</p><h2 id="2、-异步调用"><a href="#2、-异步调用" class="headerlink" title="2、 异步调用"></a>2、 异步调用</h2><p>客户端发起调用后不会再阻塞等待，而是拿到 RPC 框架返回的 Future 对象，调用结果会被服务端缓存，客户端自行决定后续何时获取返回结果 </p><h2 id="3、-回调调用"><a href="#3、-回调调用" class="headerlink" title="3、 回调调用"></a>3、 回调调用</h2><p>客户端发起调用的时候，将callback对象传给rpc框架，无需等待结果。当得到服务端响应结果或者超时的时候，会执行用户注册的回调函数。callback一般包含onResponse 和 onException 两个方法，分别对应成功返回和异常返回两种情况。</p><h2 id="4、-OneWay单向调用"><a href="#4、-OneWay单向调用" class="headerlink" title="4、 OneWay单向调用"></a>4、 OneWay单向调用</h2><p> 客户端发起请求之后直接返回 ，忽略他的返回结果。</p><h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><p>线程模型是RPC框架重要关注的部分，首先需要知道IO线程和业务线程的区别。</p><p>以Dubbo框架为例， Dubbo 使用 Netty 作为底层的网络通信框架，采用了我们熟悉的主从 Reactor 线程模型，其中 Boss 和 Worker 线程池就可以看作 I/O 线程。I/O 线程可以理解为主要负责处理网络数据，例如事件轮询、编解码、数据传输等。</p><p>业务逻辑如果能够立即完成，也可以使用 I/O 线程进行处理，这样可以省去线程上下文切换的开销。如果业务逻辑耗时较多，例如包含查询数据库、复杂规则计算等耗时逻辑，那么 I/O 必须将这些请求分发到业务线程池中进行处理，以免阻塞 I/O 线程 </p><p> 那么哪些请求需要在 I/O 线程中执行，哪些又需要在业务线程池中执行呢？Dubbo 框架的做法值得借鉴，它给用户提供了多种选择，它一共提供了 5 种分发策略，如下表格所示 </p><table><thead><tr><th>策略类型</th><th>描述</th></tr></thead><tbody><tr><td>all</td><td>所有的请求、事件、心跳等都发送到业务线程池，也就是说Worker线程接收到事件后，会将事件提交到业务线程池中</td></tr><tr><td>connection</td><td>连接建立、断开事件放入队列排队执行，其他所有的消息都分发到业务线程池执行</td></tr><tr><td>direct</td><td>所有事件都在IO线程池中执行</td></tr><tr><td>execution</td><td>只有请求类的消息分发到业务线程池中执行，响应和其他事件消息直接在IO线程池中处理</td></tr><tr><td>message</td><td>只有请求响应消息被分发到业务线程池中执行，其他事件消息都在IO线程池中执行</td></tr></tbody></table><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>服务提供者和服务消费者多实例的，如何保证服务提供者的所有节点的负载均衡呢。主流的方法有以下几种：</p><p> <strong>Round-Robin 轮询</strong>。 </p><p> <strong>Weighted Round-Robin 权重轮询</strong> </p><p> <strong>Least Connections 最少连接数</strong> </p><p> <strong>Consistent Hash 一致性 Hash</strong>。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RPC服务框架架构&quot;&gt;&lt;a href=&quot;#RPC服务框架架构&quot; class=&quot;headerlink&quot; title=&quot;RPC服务框架架构&quot;&gt;&lt;/a&gt;RPC服务框架架构&lt;/h1&gt;&lt;img src=&quot;/2023/09/03/castile-rpc%E6%A1%86%E6</summary>
      
    
    
    
    <category term="RPC" scheme="https://castile.github.io/categories/RPC/"/>
    
    
    <category term="Netty" scheme="https://castile.github.io/tags/Netty/"/>
    
    <category term="rpc" scheme="https://castile.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>算子链</title>
    <link href="https://castile.github.io/2023/09/03/%E7%AE%97%E5%AD%90%E9%93%BE/"/>
    <id>https://castile.github.io/2023/09/03/%E7%AE%97%E5%AD%90%E9%93%BE/</id>
    <published>2023-09-03T06:26:27.000Z</published>
    <updated>2023-09-03T06:26:27.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并行子任务和并行度"><a href="#并行子任务和并行度" class="headerlink" title="并行子任务和并行度"></a>并行子任务和并行度</h2><p>在 Flink 执行过程中，每一个算子（operator）可以包含一个或多个子任务（operator subtask）， 这些子任务在不同的线程、不同的物理机或不同的容器中完全独立地执行 </p><p> <strong>一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）。</strong> </p><p>包含并行子任务的数据流，就是<strong>并行数据流</strong>，它需要多个分区（stream partition）来分配并行任 </p><h2 id="算子间的数据传输"><a href="#算子间的数据传输" class="headerlink" title="算子间的数据传输"></a>算子间的数据传输</h2><img src="/2023/09/03/%E7%AE%97%E5%AD%90%E9%93%BE/1693722079994.png" class width="1693722079994"><p>一个数据流在算子之间传输数据的形式可以是一对一（one-to-one）的直 通 (forwarding)模式，也可以是打乱的重分区（redistributing）模式，具体是哪一种形式，取决 于算子的种类。</p><p> （1）一对一（One-to-one，forwarding） </p><p>数据流维护着分区以及元素的顺序。比如图中的 source 和 map 算子，source 算子读取数据之后，可以直接发送给 map 算子做处理，它们之间不需要重新分区，也不需要 调整数据的顺序。这就意味着 map 算子的子任务，看到的元素个数和顺序跟 source 算子的子 任务产生的完全一样，保证着“一对一”的关系。map、filter、flatMap 等算子都是这种 one-to-one 的对应关系 </p><p> （2）重分区（Redistributing） </p><p>在这种模式下，数据流的分区会发生改变。比图中的 map 和后面的 keyBy/window 算子之 间（这里的 keyBy 是数据传输算子，后面的 window、apply 方法共同构成了 window 算子）, 以及 keyBy/window 算子和 Sink 算子之间，都是这样的关系。</p><h2 id="合并算子链"><a href="#合并算子链" class="headerlink" title="合并算子链"></a>合并算子链</h2><p>在 Flink 中，并行度相同的一对一（one to one）算子操作，可以直接链接在一起形成一个 “大”的任务（task），这样原来的算子就成为了真正任务里的一部分 </p><p>每个 task  会被一个线程执行。这样的技术被称为“算子链”（Operator Chain）。 </p><img src="/2023/09/03/%E7%AE%97%E5%AD%90%E9%93%BE/1693722193555.png" class width="1693722193555"><p>Source 和 map 之间满足了算子链的要求，所以可以直接合并 在一起，形成了一个任务；因为并行度为 2，所以合并后的任务也有两个并行子任务。这样， 这个数据流图所表示的作业最终会有 5 个任务，由 5 个线程并行执行 </p><p> <strong>将算子链接成 task 是非常有效的优 化：可以减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量。</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并行子任务和并行度&quot;&gt;&lt;a href=&quot;#并行子任务和并行度&quot; class=&quot;headerlink&quot; title=&quot;并行子任务和并行度&quot;&gt;&lt;/a&gt;并行子任务和并行度&lt;/h2&gt;&lt;p&gt;在 Flink 执行过程中，每一个算子（operator）可以包含一个或多个子任务（</summary>
      
    
    
    
    <category term="Flink" scheme="https://castile.github.io/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://castile.github.io/tags/Flink/"/>
    
    <category term="Operator Chain" scheme="https://castile.github.io/tags/Operator-Chain/"/>
    
  </entry>
  
  <entry>
    <title>任务和任务槽Slot</title>
    <link href="https://castile.github.io/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/"/>
    <id>https://castile.github.io/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/</id>
    <published>2023-09-03T06:16:45.000Z</published>
    <updated>2023-09-03T06:16:45.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务槽-（Task-Slots）"><a href="#任务槽-（Task-Slots）" class="headerlink" title="任务槽 （Task Slots）"></a>任务槽 （Task Slots）</h1><p>Flink 中每一个 worker(也就是 TaskManager)都是一个 JVM 进程，它可 6以启动多个独立的线程，来并行执行多个子任务（subtask）。</p><p>任务槽（task slot）其实表示了 TaskManager 拥有计算资源的一个固定大小的子集。 这些资源就是用来独立执行一个子任务的 </p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720134334.png" class width="1693720134334"><p>假如一个 TaskManager 有三个 slot，那么它会将管理的内存平均分成三份，每个 slot 独自 占据一份。这样一来，我们在 slot 上执行一个子任务时，相当于划定了一块内存“专款专用”，   就不需要跟来自其他作业的任务去竞争内存资源了。所以现在我们只要 2 个 TaskManager，就 可以并行处理分配好的 5 个任务了。</p><p>slot 目前仅仅用来<strong>隔离内存</strong>，不会涉及 CPU 的隔离。在具体应用时，可 以将 slot 数量配置为机器的 CPU 核心数，尽量避免不同任务之间对 CPU 的竞争。这也是开发 环境默认并行度设为机器 CPU 数量的原因 。</p><h3 id="任务对任务槽的共享"><a href="#任务对任务槽的共享" class="headerlink" title="任务对任务槽的共享"></a>任务对任务槽的共享</h3><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720264738.png" class width="1693720264738"><p>默认情况下，Flink 是允许子任务共享 slot 的。 只要属于同一个作业，那么对于不同任务节点的并行子任务，就可以放到同一个 slot 上执行。</p><p>每个任务节点的并行子任务一字排开，占据不同的 slot；而不同 的任务节点的子任务可以共享 slot。一个 slot 中，可以将程序处理的所有任务都放在这里执行， 我们把它叫作保存了整个作业的运行管道（pipeline）。 </p><p> 我们知道，一个 slot 对应了一组独立的计算资源。在之前不做共享的时候，每个任务都平 等地占据了一个 slot，但其实不同的任务对资源的占用是不同的。例如这里的前两个任务， source/map 尽管是两个算子合并算子链得到的，但它只是基本的数据读取和简单转换，计算耗 时极短，一般也不需要太大的内存空间；而 window 算子所做的窗口操作，往往会涉及大量的 数据、状态存储和计算，我们一般把这类任务叫作“资源密集型”（intensive）任务。当它们 被平等地分配到独立的 slot 上时，实际运行我们就会发现，大量数据到来时 source/map 和 sink 任务很快就可以完成，但 window 任务却耗时很久；于是下游的 sink 任务占据的 slot 就会等待 闲置，而上游的 source/map 任务受限于下游的处理能力，也会在快速处理完一部分数据后阻 塞对应的资源开始等待（相当于处理<strong>背压</strong>）。这样资源的利用就出现了极大的不平衡，“忙的忙 死，闲的闲死”。 解决这一问题的思路就是允许 slot 共享。当我们将资源密集型和非密集型的任务同时放到 一个 slot 中，它们就可以自行分配对资源占用的比例，从而保证最重的活平均分配给所有的 TaskManager。 </p><p>同一个任务节点的并行子任务是不能共享 slot 的，所以允许 slot 共享之后，运行作业所需的 slot 数量正好就是作业中所有算子并行度的最大值。这样一来，我们考虑当前集群需 要配置多少 slot 资源时，就不需要再去详细计算一个作业总共包含多少个并行子任务了，只看 最大的并行度就够了。  </p><h3 id="任务槽和并行度的关系"><a href="#任务槽和并行度的关系" class="headerlink" title="任务槽和并行度的关系"></a>任务槽和并行度的关系</h3><p>假设一共有 3 个 TaskManager，每一个 TaskManager 中的 slot 数量设置为 3 个，那么一共有 9 个 task slot，表示集群最多能并行执行 9 个任务 </p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720541867.png" class width="1693720541867"><p>而我们定义 WordCount 程序的处理操作是四个转换算子： </p><blockquote><p>source→ flatMap→ reduce→ sink</p></blockquote><p>当所有算子并行度相同时，容易看出 source 和 flatMap 可以合并算子链，于是最终有三个任务节点.。如果我们没有任何并行度设置，而配置文件中默认 parallelism.default=1，那么程序运行的 默认并行度为 1，总共有 3 个任务。由于不同算子的任务可以共享任务槽，所以最终占用的 slot 只有 1 个。9 个 slot 只用了 1 个，有 8 个空闲。</p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720650260.png" class width="1693720650260"><p>设置并行度为 2，那么总共有 6 个任务，共享任 务槽之后会占用 2 个 slot：</p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720782089.png" class width="1693720782089"><p>把并行度设置为 9，这样所有 27 个任务就会完全占用 9 个 slot。 这是当前集群资源下能执行的最大并行度，计算资源得到了充分的利用</p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720792252.png" class width="1693720792252"><p> 再考虑对于某个算子单独设置并行度的场景。 考虑到输出可能是写入 文件，那会希望不要并行写入多个文件，就需要设置 sink 算子的并行度为 1。这时其他的算子 并行度依然为 9，所以总共会有 19 个子任务。根据 slot 共享的原则，它们最终还是会占用全 部的 9 个 slot，而 sink 任务只在其中一个 slot 上执行</p><img src="/2023/09/03/%E4%BB%BB%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A7%BDSlot/1693720801175.png" class width="1693720801175"><p>整个流处理程序的并行度，就应该是所有算子并行度中最大的那个， 这代表了运行程序需要的 slot 数量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;任务槽-（Task-Slots）&quot;&gt;&lt;a href=&quot;#任务槽-（Task-Slots）&quot; class=&quot;headerlink&quot; title=&quot;任务槽 （Task Slots）&quot;&gt;&lt;/a&gt;任务槽 （Task Slots）&lt;/h1&gt;&lt;p&gt;Flink 中每一个 wor</summary>
      
    
    
    
    <category term="Flink" scheme="https://castile.github.io/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://castile.github.io/tags/Flink/"/>
    
    <category term="Slots" scheme="https://castile.github.io/tags/Slots/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计04-限界上下文</title>
    <link href="https://castile.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A104-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://castile.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A104-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2023-06-06T15:30:14.000Z</published>
    <updated>2023-06-06T15:30:14.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、-限界上下文的含义"><a href="#1、-限界上下文的含义" class="headerlink" title="1、 限界上下文的含义"></a>1、 限界上下文的含义</h2><p>限界上下文(Bounded Context)， <strong>Context</strong> 表现了业务流程的场景片段。整个业务流程由诸多具有时序的活动组成，随着流程的进行，不同的活动需要不同的角色参与，并导致上下文因为某个活动的产生随之发生切换。因而，<strong>上下文（Context）其实是动态的业务流程被边界（Bounded）静态切分的产物</strong>。 </p><p> 一个复杂系统的领域驱动设计，就是以子域为中心进行领域建模，绘制出一张一张的领域模型设计，然后以此作为基础指导程序设计。这一张一张的领域模型设计，称为“<strong>限界上下文</strong>”（Context Bounds，CB）。  根据<strong>业务相关性</strong>、<strong>耦合的强弱程度</strong>、<strong>分离的关注点</strong>对这些活动进行归类，找到不同类别之间存在的边界，这就是<strong>限界上下文</strong>的含义。<strong>上下文（Context）是业务目标，限界（Bounded）则是保护和隔离上下文的边界，避免业务目标的不单一而带来的混乱与概念的不一致。</strong> </p><h2 id="2、限界上下文的价值"><a href="#2、限界上下文的价值" class="headerlink" title="2、限界上下文的价值"></a>2、限界上下文的价值</h2><p>观察角度的不同，限界上下文划定的边界也有所不同。大体可以分为如下三个方面：</p><ul><li><strong>领域逻辑层面</strong>：限界上下文确定了领域模型的业务边界，维护了模型的完整性与一致性，从而降低系统的业务复杂度。</li><li><strong>团队合作层面</strong>：限界上下文确定了开发团队的工作边界，建立了团队之间的合作模式，避免团队之间的沟通变得混乱，从而降低系统的管理复杂度。</li><li><strong>技术实现层面</strong>：限界上下文确定了系统架构的应用边界，保证了系统层和上下文领域层各自的一致性，建立了上下文之间的集成方式，从而降低系统的技术复杂度。</li></ul><p>这三种边界体现了<strong>限界上下文对不同边界的控制力</strong>。业务边界是对领域模型的控制，工作边界是对开发协作的控制，应用边界是对技术风险的控制。引入限界上下文的目的，其实<strong>不在于如何划分边界，而在于如何控制边界</strong>。 </p><p>  EventStorming 创始人 Alberto Brandolini  对限界上下文的理解： bounded context are a mean of safety（限界上下文意味着安全），如何理解安全呢？</p><p>他的意思是：  being in control and no surprise。</p><blockquote><p> Surprise leads to stress and stress leads to no learning, just hard work. （出乎意料的惊讶会导致压力，而压力就会使得团队疲于加班，缺少学习。） </p></blockquote><p>其实限界上下文并不是大多数人理解的那样，是模块、服务、组件或者子系统，而是你对领域模型、团队合作以及技术风险的<strong>控制</strong>。大领域的模型切割成一个一个小的领域模型是很重要的， <strong>更小的模型为我们的软件设计和开发带来了更多的好处，它使得团队能够根据自己的设计和开发职责确定更为明确的</strong>工作边界 。</p><p>小的模型也为项目带来了更好的可维护性：由于上下文由边界确定，因此对其的修改也不会给整个模型的其他部分造成影响。显然，通过限界上下文对领域模型进行分解，就能保证在其边界内创建的模型<strong>内聚性更高</strong>，在<strong>边界隔离</strong>下，受到变化的影响也更小，反映为团队合作的工作边界，就更容易保证团队之间的沟通与协作。 </p><p>限界上下文是“<strong>分而治之</strong>”架构原则的体现，我们引入它的目的其实为了控制（应对）软件的复杂度，它并非某种固定的设计单元，我们不能说它就是模块、服务或组件，而是通过它来帮助我们做出高内聚低耦合的设计。</p><p>可以把限界上下文看成是一个“自治”的单元。 所谓“自治”就是满足四个特征：最小完备、稳定空间、自我履行、独立进化。如下图所示的自治单元就是限界上下文，映射到编码实现，则<strong>可能</strong>是模块、组件或服务： </p><img src="/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A104-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/1685462880155.png" class width="1685462880155"><p> <strong>最小完备</strong>是实现“自治”的基本条件。自治单元的职责是完整的，不需要依赖别的单元的功能。最小完备是指不要将不必要的职责被错误地添加到该自治单元内。</p><p><strong>自我履行</strong>表示自治单元自身决定需要做什么， 从拟人的角度来思考，就是这些自治单元能够对外部请求做出符合自身利益的明智判断，是否应该履行该职责，由限界上下文拥有的信息来决定。 例如，在当订单上下文履行了验证订单的职责之后，需要执行支付活动时，由于与支付相关的业务行为要操作的信息已经超出了订单上下文的范畴，就应该将该职责转移到支付上下文。自我履行其实意味着对知识的掌握，为避免风险，你要履行的职责一定是你掌握的知识范畴之内。 </p><p><strong>稳定空间</strong>指的是减少外界变化对限界上下文内部的影响。  稳定空间符合<strong>开放封闭原则（OCP）</strong>，即对修改是封闭的，对扩展是开放的，该原则其实体现了一个单元的封闭空间与开放空间。封闭空间体现为对细节的封装与隐藏，开放空间体现为对共性特征的抽象与统一，二者共同确保了整个空间的稳定。</p><p><strong>独立进化</strong>与稳定空间刚好相反，指的是减少限界上下文的变化对外界的影响。 如果借用限界上下文的上下游关系来阐释，则<strong>稳定空间</strong>寓意下游限界上下文，无论上游怎么变，我自岿然不动；<strong>独立进化</strong>寓意上游限界上下文，无论下游有多少，我凌寒独自开。实现上看，要做到独立进化，就必须保证对外公开接口的稳定性，因为这些接口往往被众多消费者使用，一旦修改，就会牵一发而动全身。一个独立进化的限界上下文，需要接口设计良好，符合标准规范，并在版本上考虑了兼容与演化。 </p><p>这四个要素是<strong>高内聚低耦合</strong>思想的体现。我们需要根据业务关注点和技术关注点，尽可能将强相关性的内容放到同一个限界上下文中，同时降低限界上下文之间的耦合。对于整个系统架构而言，不同的限界上下文可以采用不同的架构风格与技术决策，而在每个限界上下文内部保持自己的技术独立性与一致性。由于限界上下文边界对技术实现的隔离，不同限界上下文内部实现的多样性并不会影响整体架构的一致性。</p><h2 id="3、-限界上下文分离了业务边界"><a href="#3、-限界上下文分离了业务边界" class="headerlink" title="3、 限界上下文分离了业务边界"></a>3、 限界上下文分离了业务边界</h2><p>引入限界上下文的目的，不在于如何划分，而在于如何控制边界。  可以说，<strong>限界上下文是连接问题域与解决方案域的重要桥梁</strong>。 </p><p>限界上下文用于区分领域边界，我们在理解领域模型时，是基于当前所在的上下文作为概念语境的， 这样的设计既保证了限界上下文之间的松散耦合，又能够维持限界上下文各自领域模型的一致性，此时的限界上下文成为了保障领域模型不受污染的边界屏障。 </p><h2 id="4、-限界上下文明确了工作边界"><a href="#4、-限界上下文明确了工作边界" class="headerlink" title="4、 限界上下文明确了工作边界"></a>4、 限界上下文明确了工作边界</h2><p> 一个理想的开发团队规模最好能符合亚马逊公司提出的“Two-Pizza Teams”，即 <strong>2PTs</strong> 规则，该规则认为“让团队保持在两个披萨能让成员吃饱的小规模”，大体而言，就是将团队成员人数控制在 7~10 人左右。为何要保证这样的规模呢？因为小团队能够更有效保证有效的沟通。</p><p> 传统的“组件团队”强调的是专业技能与功能重用，例如，熟练掌握数据库开发技能的成员组建一个数据库团队，深谙前端框架的成员组建一个前端开发团队。这种遵循“专业的事情交给专业的人去做”原则的团队组建模式，可以更好地发挥每个人的技能特长，然而牺牲的却是团队成员业务知识的缺失，客户价值的漠视。这种团队组建模式也加大了团队之间的沟通成本，导致系统的整体功能无法持续和频繁的集成。</p><p>特性团队， 是一个<strong>端对端的开发垂直细分领域的跨职能团队</strong>，它将需求分析、架构设计、开发测试等多个角色糅合在一起，专注于领域逻辑，实现该领域特性的完整的端对端开发。 </p><img src="/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A104-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/1686065089311.png" class width="1686065089311"><p>特性团队专注的领域特性，是与领域驱动设计中限界上下文对应的领域是相对应的。当我们确定了限界上下文时，其实也就等同于确定了特性团队的工作边界，确定了限界上下文之间的关系，也就意味着确定了特性团队之间的合作模式；反之亦然。之所以如此，则是因为<strong>康威定律（Conway’s Law）</strong>为我们提供了理论支持 </p><p><strong>康威定律</strong>认为：“任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。” <strong>在康威定律中起到关键杠杆作用的是沟通成本</strong>。如果同一个限界上下文的工作交给了两个不同的团队分工完成，为了合力解决问题，就必然需要这两个团队进行密切的沟通。然而，团队间的沟通成本显然要高于团队内的沟通成本，为了降低日趋增高的成本，就需要重新划分团队。反过来，如果让同一个团队分头做两个限界上下文的工作，则会因为工作的弱相关性带来自然而然的团队隔离。 </p><h2 id="5、-限界上下文封装了应用边界"><a href="#5、-限界上下文封装了应用边界" class="headerlink" title="5、 限界上下文封装了应用边界"></a>5、 限界上下文封装了应用边界</h2><p>在划分上下文的时候，不能值满足于业务边界的确立，还需要从控制技术复杂度的角度来考虑技术实现。高并发系统，功能重用，实时性，第三服务集成，遗留系统等案例从技术层面为系统划分边界，这种边界也是由限界上下文完成的，以形成对技术实现的隔离，避免不同的技术方案选择互相干扰导致架构混乱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、-限界上下文的含义&quot;&gt;&lt;a href=&quot;#1、-限界上下文的含义&quot; class=&quot;headerlink&quot; title=&quot;1、 限界上下文的含义&quot;&gt;&lt;/a&gt;1、 限界上下文的含义&lt;/h2&gt;&lt;p&gt;限界上下文(Bounded Context)， &lt;strong&gt;Co</summary>
      
    
    
    
    <category term="领域驱动设计" scheme="https://castile.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DDD" scheme="https://castile.github.io/tags/DDD/"/>
    
    <category term="领域驱动设计" scheme="https://castile.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="限界上下文" scheme="https://castile.github.io/tags/%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计03-应用领域场景分析提炼领域知识</title>
    <link href="https://castile.github.io/2023/05/25/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A103-%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90%E6%8F%90%E7%82%BC%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/"/>
    <id>https://castile.github.io/2023/05/25/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A103-%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90%E6%8F%90%E7%82%BC%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/</id>
    <published>2023-05-25T15:24:03.000Z</published>
    <updated>2023-06-06T15:30:39.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="领域场景分析的-6W-模型"><a href="#领域场景分析的-6W-模型" class="headerlink" title="领域场景分析的 6W 模型"></a>领域场景分析的 6W 模型</h2><p> 组成场景的要素常常被称之为 <strong>6W 模型</strong>，即描写场景的过程必须包含 <strong>W</strong>ho、<strong>W</strong>hat、<strong>W</strong>hy、<strong>W</strong>here、<strong>W</strong>hen 与 ho<strong>W</strong> 这六个要素。</p><p> 在 6W 模型中，可以将领域功能划分为三个层次，即业务价值、业务功能和业务实现。</p><p><img src="/2023/05/25/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A103-%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90%E6%8F%90%E7%82%BC%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86/1685026515876.png" alt="1685026515876"></p><p>在分析一个需求的时候，要建立场景，识别该场景中的用户角色（Who），通过分析改用户的特征与属性 来辨别该角色在整个场景中参与的活动。这意味着我们需要明确业务功能（What），思考这一功能给该角色能够带来什么样的业务价值（Why）。在不同场景中同一个用户可能代表不同的角色，比如在订单系统中，角色就是买家；在评论系统中，角色变成了评论者。</p><p> 在利用场景进行建模时，还要充分考虑场景的边界，即 6W 模型中的 Where。例如，在“下订单”的案例中，验证商品库存量的业务实现需要调用库存提供的接口，该功能属于下订单场景的边界之外。领域驱动设计引入了<strong>限界上下文（Bounded Context）</strong>来解决这一问题。 </p><p> 业务场景分析的 6W 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。 6W 模型也是对领域逻辑的一种检验，如果提炼出来的领域逻辑缺乏部分要素，就有可能忽略一些重要的领域概念、规则与约束。这种缺失会对后续的领域建模直接产生影响。</p><h2 id="领域场景分析的方法"><a href="#领域场景分析的方法" class="headerlink" title="领域场景分析的方法"></a>领域场景分析的方法</h2><p> 如果将 6W 模型看做是领域分析的抽象，那么这些领域分析方法就是对 6W 模型各种不同的实现。 这些模式主要有：</p><ul><li>用例（Use Case）</li><li>用户故事（User Story）</li><li>测试驱动开发（TDD）</li></ul><p>用例尤其是用例图的抽象能力更强，更擅长于对系统整体需求进行场景分析；用户故事提供了场景分析的固定模式，善于表达具体场景的业务细节；测试驱动开发则强调对业务的分解，利用编写测试用例的形式驱动领域建模，即使不采用测试先行，让开发者转换为调用者角度去思考领域对象及行为，也是一种很好的建模思想与方法。 </p><p>在提炼领域知识的过程中，我们可以将这三种领域场景分析方法结合起来运用，在不同层次的领域场景中选择不同的场景分析方法，才不至于好高骛远，缺乏对细节的把控，也不至于一叶障目，只见树木不见森林。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;领域场景分析的-6W-模型&quot;&gt;&lt;a href=&quot;#领域场景分析的-6W-模型&quot; class=&quot;headerlink&quot; title=&quot;领域场景分析的 6W 模型&quot;&gt;&lt;/a&gt;领域场景分析的 6W 模型&lt;/h2&gt;&lt;p&gt; 组成场景的要素常常被称之为 &lt;strong&gt;6W </summary>
      
    
    
    
    <category term="领域驱动设计" scheme="https://castile.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DDD" scheme="https://castile.github.io/tags/DDD/"/>
    
    <category term="领域驱动设计" scheme="https://castile.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计02-应对软件的复杂性</title>
    <link href="https://castile.github.io/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    <id>https://castile.github.io/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/</id>
    <published>2023-05-17T16:22:14.000Z</published>
    <updated>2023-05-21T02:51:15.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应对软件的复杂性"><a href="#应对软件的复杂性" class="headerlink" title="应对软件的复杂性"></a>应对软件的复杂性</h1><p>需求引起的软件复杂度包含了业务复杂度和技术复杂度：</p><p><strong>技术复杂度来自需求的质量属性</strong>，诸如安全、高性能、高并发、高可用性等需求，为软件设计带来了极大的挑战，让人痛苦的是这些因素彼此之间可能又互相矛盾、互相影响。</p><p> <strong>业务复杂度对应了客户的业务需求</strong>，因而这种复杂度往往会随着需求规模的增大而增加。由于需求不可能做到完全独立，一旦规模扩大到一定程度，不仅产生了功能数量的增加，还会因为功能互相之间的依赖与影响使得这种复杂度产生叠加，进而影响到整个系统的质量属性，比如系统的可维护性与可扩展性。 </p><p> <strong>技术复杂度与业务复杂度并非完全独立，二者混合在一起产生的化合作用更让系统的复杂度变得不可预期，难以掌控</strong>。 </p><h2 id="1、隔离业务复杂度与技术复杂度"><a href="#1、隔离业务复杂度与技术复杂度" class="headerlink" title="1、隔离业务复杂度与技术复杂度"></a>1、隔离业务复杂度与技术复杂度</h2><p> 要避免业务逻辑的复杂度与技术实现的复杂度混淆在一起，<strong>首要任务就是确定业务逻辑与技术实现的边界，从而隔离各自的复杂度</strong>。</p><p> 例如，在电商的领域逻辑中，订单业务关注的业务规则包括验证订单有效性、计算订单总额、提交和审核订单的流程等；技术关注点则从实现层面保障这些业务能够正确地完成，包括确保分布式系统之间的数据一致性，确保服务之间通信的正确性等。</p><p> 业务逻辑并不关心技术是如何实现的，无论采用何种技术，只要业务需求不变，业务规则就不会发生变化。换言之，<strong>在理想状态下，我们应该保证业务规则与技术实现是正交的</strong>。 </p><p> 领域驱动设计通过<strong>分层架构</strong>与<strong>六边形架构</strong>来确保业务逻辑与技术实现的隔离 </p><h2 id="2、分层架构的关注点分离"><a href="#2、分层架构的关注点分离" class="headerlink" title="2、分层架构的关注点分离"></a>2、分层架构的关注点分离</h2><p> 分层架构遵循了“关注点分离”原则，将属于业务逻辑的关注点放到领域层（Domain Layer）中，而将支撑业务逻辑的技术实现放到基础设施层（Infrastructure Layer）中。同时，领域驱动设计又颇具创见的引入了应用层（Application Layer），应用层扮演了双重角色。一方面它作为业务逻辑的外观（Facade），暴露了能够体现业务用例的应用服务接口；另一方面它又是业务逻辑与技术实现的粘合剂，实现二者之间的协作。 </p><p>下图展现的就是一个典型的领域驱动设计分层架构，蓝色区域的内容与业务逻辑有关，灰色区域的内容与技术实现有关，二者泾渭分明，然后汇合在应用层。应用层确定了业务逻辑与技术实现的边界，通过直接依赖或者依赖注入（DI，Dependency Injection）的方式将二者结合起来： </p><img src="/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/1684339034063.png" class width="1684339034063"><h2 id="3、六边形架构的内外分离"><a href="#3、六边形架构的内外分离" class="headerlink" title="3、六边形架构的内外分离"></a>3、六边形架构的内外分离</h2><p> 由 Cockburn 提出的六边形架构则以“内外分离”的方式，更加清晰地勾勒出了业务逻辑与技术实现的边界，且将业务逻辑放在了架构的核心位置。这种架构模式改变了我们观察系统架构的视角：</p><img src="/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/1684339190795.png" class width="1684339190795"><p> 体现业务逻辑的应用层与领域层处于六边形架构的<strong>内核</strong>，并通过内部的六边形边界与基础设施的模块隔离开。当我们在进行软件开发时，只要恪守架构上的六边形边界，则不会让技术实现的复杂度污染到业务逻辑，保证了领域的整洁。边界还隔离了变化产生的影响。如果我们在领域层或应用层抽象了技术实现的接口，再通过依赖注入将控制的方向倒转，业务内核就会变得更加的稳定，不会因为技术选型或其他决策的变化而导致领域代码的修改。 </p><h2 id="4、限界上下文的分而治之"><a href="#4、限界上下文的分而治之" class="headerlink" title="4、限界上下文的分而治之"></a>4、限界上下文的分而治之</h2><p>面对一个庞大的问题域，可以划分一些子系统，这些子系统内部也可以进行分层架构。不同子系统之间的抽象层次是一致的，这种概念在DDD中称之为“限界上下文（Bounded Context）”。</p><p>通过限界上下文“分而治之”的思想对问题域进行分解，有效地控制了问题域的规模，进而控制了整个系统的规模。</p><p> 限界上下文对整个系统进行了划分，在将一个大系统拆分为一个个小系统后，我们再利用分层架构与六边形架构思想对其进行逻辑分层，以确保业务逻辑与技术实现的隔离，其设计会变得更易于把控，系统的架构也会变得更加清晰。 </p><p>在一个复杂系统中，可以将识别出来的限界上下文定义为微服务，并对外公开REST服务接口。</p><img src="/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/1684635011835.png" class width="1684635011835"><p> UI Applications 是一个薄薄的展现层，它会调用后端的 RESTful 服务，也使得服务在保证接口不变的前提下能够单独演化。每个服务都是独立的，可以单独部署，因而可以针对服务建立单独的代码库和对应的特性团队（Feature Team）。服务的重用性和可扩展性也有了更好的保障，服务与 UI 之间的集成变得更简单，整个架构会更加清晰。 </p><h2 id="5、领域模型对领域知识的抽象"><a href="#5、领域模型对领域知识的抽象" class="headerlink" title="5、领域模型对领域知识的抽象"></a>5、领域模型对领域知识的抽象</h2><p>以一个软件项目管理流程来举例子。在一个团队中，使用的软件开发流程大致有如下几类：</p><p>瀑布式开发： 需求、分析、设计、编码、测试、验收 </p><p>RUP（ Rational Unified Process 统一软件开发过程）： 先启阶段（Inception）、细化阶段（Elaboration）、构造阶段（Construction）与交付阶段（Transition）。 每个阶段可以包含一到多个迭代，每个迭代有不同的工作，如业务建模、分析设计、配置与变更管理 </p><p> XP（ Extreme Programming ）： 极限编程作为一种敏捷方法，迭代的增量式开发。先做预研（ Architectual Spike，又被译为架构穿刺 ），初始方案确定后就可以进入每次小版本的交付（Release Planning）。 每个小版本交付又被划分为多个周期相同的迭代。在迭代过程中，要求执行一些必须的活动，如编写用户故事、故事点估算、验收测试等。</p><p> Scrum：确定系统待办项（Product Backlog）、指定发布计划和组件团队、Sprint迭代。 Sprint 迭代过程是一个固定时长的项目过程，在这个过程中，整个团队需要召开计划会议、每日站会（Daliy Scrum）、评审会议（Sprint Review）和回顾会议（Sprint Retrospective）。</p><h3 id="领域分析"><a href="#领域分析" class="headerlink" title="领域分析"></a>领域分析</h3><p> 领域建模就是要从这些纷繁复杂的领域逻辑中寻找到能够表示项目管理领域的概念，并利用面向对象建模范式或其他范式对概念进行抽象，并确定它们之间的关系。</p><p>上面说的几种开发流程在概念上会有差别，比如瀑布模式有六个节阶段，但是没有发布、迭代这些概念。RUP有阶段，有迭代，但是没有发布。Scrum又为迭代引入了Sprint概念。</p><p>除了业务概念外，他们的业务规则也会有不一样的地方。</p><ul><li>首先，从项目管理系统的角度看，无论针对何种项目管理流程，我们的主题需求是不变的，就是要为这些管理流程制定软件开发计划（Plan）</li><li> 计划可以由多个阶段（Phase）组成 </li><li> 阶段（Phase）包含了发布（Release）</li><li> 每个发布又包含了一到多个迭代（Iteration）</li><li> 每个迭代可以开展多种不同的活动（Activity）</li><li> 对于计划而言，我们还需要跟踪任务（Task） </li></ul><p>所以我们可以根据上述分析提炼出统一的领域模型：</p><img src="/2023/05/18/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A102-%E5%BA%94%E5%AF%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/1684637274676.png" class width="1684637274676"><p> 项目管理者更加方便地制定项目计划，产品经理提出了计划模板功能。当管理者选择对应的项目管理生命周期类型后，系统会自动创建满足其规则的初始计划。 在模型中，LifeCycle Specification 是一个隐含的概念，遵循领域驱动设计提出的规格（Specification）模式，封装了项目开发生命周期的约束规则。</p><p>领域模型以可视化的方式清晰地表达了业务含义， 我们可以根据这个模型来指导后面的程序设计与编码实现，当需求有变更的时候可以根据模型进行更新。同时，领域建模可以很好在团队之间传递知识， 有利于让开发人员从纷繁复杂的业务中解脱出来，从而可以在一定程度上控制业务的复杂度对我们软件交付的影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应对软件的复杂性&quot;&gt;&lt;a href=&quot;#应对软件的复杂性&quot; class=&quot;headerlink&quot; title=&quot;应对软件的复杂性&quot;&gt;&lt;/a&gt;应对软件的复杂性&lt;/h1&gt;&lt;p&gt;需求引起的软件复杂度包含了业务复杂度和技术复杂度：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术复杂度</summary>
      
    
    
    
    <category term="领域驱动设计" scheme="https://castile.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DDD" scheme="https://castile.github.io/tags/DDD/"/>
    
    <category term="领域驱动设计" scheme="https://castile.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="软件复杂性" scheme="https://castile.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计01-概览</title>
    <link href="https://castile.github.io/2023/05/17/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A101-%E6%A6%82%E8%A7%88/"/>
    <id>https://castile.github.io/2023/05/17/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A101-%E6%A6%82%E8%A7%88/</id>
    <published>2023-05-17T15:09:03.000Z</published>
    <updated>2023-05-17T15:09:03.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="领域驱动设计概览"><a href="#领域驱动设计概览" class="headerlink" title="领域驱动设计概览"></a>领域驱动设计概览</h1><p>领域驱动设计是一种面向对象的建模方法。</p><p> <strong>将要解决的业务概念和业务规则转换为软件系统中的类型以及类型的属性与行为，通过合理运用面向对象的封装、继承和多态等设计要素</strong>，降低或隐藏整个系统的业务复杂性，并使得系统具有更好的扩展性，应对纷繁多变的现实业务问题。 </p><p> 领域驱动设计的提出，是<strong>设计观念的转变，蕴含了全新的设计思想、设计原则与设计过程</strong>。 </p><h2 id="领域驱动设计过程"><a href="#领域驱动设计过程" class="headerlink" title="领域驱动设计过程"></a>领域驱动设计过程</h2><p> 领域驱动设计强调<strong>领域模型</strong>的重要性，并通过模型驱动设计来保障领域模型与程序设计的一致。从业务需求中提炼出统一语言（Ubiquitous Language），再基于统一语言建立领域模型；这个领域模型会指导着程序设计以及编码实现；最后，又通过重构来发现隐式概念，并运用设计模式改进设计与开发质量 </p><img src="/2023/05/17/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A101-%E6%A6%82%E8%A7%88/1684334923286.png" class width="1684334923286"><p> 这个过程是一个覆盖<strong>软件全生命周期</strong>的设计闭环，每个环节的输出都可以作为下一个环节的输入，而在其中扮演重要指导作用的则是“领域模型” 。这是一个 螺旋式的迭代设计过程。</p><p> 在为问题域寻求解决方案时，需要从<strong>宏观层次</strong>划分不同业务关注点的<strong>子领域</strong>，然后再深入到子领域中从微观层次对领域进行建模。<strong>宏观层次是战略的层面，微观层次是战术的层面</strong>，只有将战略设计与战术设计结合起来，才是完整的领域驱动设计。 </p><h3 id="战略设计阶段"><a href="#战略设计阶段" class="headerlink" title="战略设计阶段"></a>战略设计阶段</h3><p> 领域驱动设计的战略设计阶段是从下面两个方面来考量的 ：</p><ul><li><p>问题域方面：针对问题域，引入<strong>限界上下文（Bounded Context）和上下文映射（Context Map）对问题域进行合理的分解，识别出核心领域（Core Domain）与子领域（SubDomain）</strong>，并确定领域的边界以及它们之间的关系，维持模型的完整性。</p></li><li><p>架构方面：通过<strong>分层架构</strong>来隔离关注点，尤其是将领域实现独立出来，能够更利于领域模型的单一性与稳定性；引入<strong>六边形架构</strong>可以清晰地表达领域与技术基础设施的边界；CQRS 模式则分离了查询场景和命令场景，针对不同场景选择使用同步或异步操作，来提高架构的低延迟性与高并发能力。</p></li></ul><h3 id="战术设计阶段"><a href="#战术设计阶段" class="headerlink" title="战术设计阶段"></a>战术设计阶段</h3><p> 整个软件系统被分解为多个限界上下文（或领域）后，就可以分而治之，对每个限界上下文进行战术设计。领域驱动设计并不牵涉到技术层面的实现细节，在战术层面，它主要应对的是领域的复杂性。领域驱动设计用以表示模型的主要要素包括：</p><ul><li>值对象（Value Object）</li><li>实体（Entity）</li><li>领域服务（Domain Service）</li><li>领域事件（Domain Event）</li><li>资源库（Repository）</li><li>工厂（Factory）</li><li>聚合（Aggregate）</li><li>应用服务（Application Service）</li></ul><img src="/2023/05/17/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A101-%E6%A6%82%E8%A7%88/1684335677898.png" class width="1684335677898"><p> 领域驱动设计围绕着领域模型进行设计，通过<strong>分层架构（Layered Architecture）将领域独立出来。表示领域模型的对象包括：实体、值对象和领域服务</strong>，<strong>领域逻辑都应该封装在这些对象中</strong>。这一严格的设计原则可以避免业务逻辑渗透到领域层之外，导致技术实现与业务逻辑的混淆。在领域驱动设计的演进中，又引入了<strong>领域事件</strong>来丰富领域模型。 </p><p> <strong>聚合</strong>是一种边界，它可以封装一到多个<strong>实体</strong>与<strong>值对象</strong>，并维持该边界范围之内的业务完整性。在聚合中，至少包含一个实体，且只有实体才能作为<strong>聚合根（Aggregate Root）</strong>。注意，在领域驱动设计中，没有任何一个类是单独的聚合，因为聚合代表的是边界概念，而非领域概念。在极端情况下，一个聚合可能有且只有一个实体。 </p><p> <strong>工厂</strong>和<strong>资源库</strong>都是对领域对象生命周期的管理。前者负责领域对象的创建，往往用于封装复杂或者可能变化的创建逻辑；后者则负责从存放资源的位置（数据库、内存或者其他 Web 资源）获取、添加、删除或者修改领域对象。领域模型中的资源库不应该暴露访问领域对象的技术实现细节。 </p><img src="/2023/05/17/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A101-%E6%A6%82%E8%A7%88/1684335927676.png" class width="1684335927676">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;领域驱动设计概览&quot;&gt;&lt;a href=&quot;#领域驱动设计概览&quot; class=&quot;headerlink&quot; title=&quot;领域驱动设计概览&quot;&gt;&lt;/a&gt;领域驱动设计概览&lt;/h1&gt;&lt;p&gt;领域驱动设计是一种面向对象的建模方法。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;将要解决的业务概念和</summary>
      
    
    
    
    <category term="领域驱动设计" scheme="https://castile.github.io/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DDD" scheme="https://castile.github.io/tags/DDD/"/>
    
    <category term="领域驱动设计" scheme="https://castile.github.io/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="战略设计" scheme="https://castile.github.io/tags/%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="战术设计" scheme="https://castile.github.io/tags/%E6%88%98%E6%9C%AF%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Flink之聚合算子</title>
    <link href="https://castile.github.io/2023/05/06/Flink%E4%B9%8B%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/"/>
    <id>https://castile.github.io/2023/05/06/Flink%E4%B9%8B%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/</id>
    <published>2023-05-05T16:11:56.000Z</published>
    <updated>2023-05-05T16:11:56.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聚合算子"><a href="#聚合算子" class="headerlink" title="聚合算子"></a>聚合算子</h2><p> 我们往往需要对大量的数据进行统计或整合，从而提炼出更有用的 信息。比如要对每个词出现的频次进行叠加统计。这种操作，计算的结果不仅依赖当前数据，还跟之前的数据有关，相当于要把所有数据聚在一起进行汇总合并 ——这就是所谓的“聚合”（Aggregation），也对应着 MapReduce 中的 reduce 操作。  </p><h2 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h2><p> DataStream 是没有直接进行聚合的 API 的。因为我们对海量数据做聚合 肯定要进行分区并行处理，这样才能提高效率。所以在 Flink 中，要做聚合，需要先进行分区； 这个操作就是通过 keyBy 来完成的。</p><img src="/2023/05/06/Flink%E4%B9%8B%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/1683215484651.png" class width="1683215484651"><p> 基于不同的 key，流中的数据将被分配到不同的分区中去，这样一来，所 有具有相同的 key 的数据，都将被发往同一个分区，那么下一步算子操作就将会在同一个 slot 中进行处理了。</p><img src="/2023/05/06/Flink%E4%B9%8B%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/1683215525749.png" class width="1683215525749"><h2 id="简单聚合"><a href="#简单聚合" class="headerlink" title="简单聚合"></a>简单聚合</h2><p> 有了按键分区的数据流 KeyedStream，我们就可以基于它进行聚合操作了。Flink 为我们 内置实现了一些最基本、最简单的聚合 API，主要有以下几种： </p><p>⚫ sum()：在输入流上，对指定的字段做叠加求和的操作。 </p><p>⚫ min()：在输入流上，对指定的字段求最小值。 </p><p>⚫ max()：在输入流上，对指定的字段求最大值。 </p><p>⚫ minBy()：与 min()类似，在输入流上针对指定字段求最小值。不同的是，min()只计 算指定字段的最小值，其他字段会保留最初第一个数据的值；而 minBy()则会返回包 含字段最小值的整条数据。 </p><p>⚫ maxBy()：与 max()类似，在输入流上针对指定字段求最大值。两者区别与 min()/minBy()完全一致。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hlz.flink.chapter05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.functions.KeySelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单聚合操作2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-05-04 23:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAggregation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;Event&gt; streamSource = env.fromElements(</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;./home&quot;</span>, <span class="number">1000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./cart&quot;</span>, <span class="number">2000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod?id=100&quot;</span>, <span class="number">3000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./home&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod?id=9&quot;</span>, <span class="number">5000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod?id=2&quot;</span>, <span class="number">6000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;./prod?id=3&quot;</span>, <span class="number">7000L</span>)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按键分组后聚合,提取当</span></span><br><span class="line"></span><br><span class="line">        streamSource.keyBy(<span class="keyword">new</span> KeySelector&lt;Event, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">(Event value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value.user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).max(<span class="string">&quot;timeStamp&quot;</span>)</span><br><span class="line">                .print(<span class="string">&quot;max: &quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><p>max: &gt; Event{user=’Mary’, url=’./home’, timeStamp=1970-01-01 08:00:01.0}<br>max: &gt; Event{user=’Bob’, url=’./cart’, timeStamp=1970-01-01 08:00:02.0}<br>max: &gt; Event{user=’Alice’, url=’./prod?id=100’, timeStamp=1970-01-01 08:00:03.0}<br><font color="red">max: &gt; Event{user=’Bob’, url=’./cart’, timeStamp=1970-01-01 08:00:04.0}</font><br>max: &gt; Event{user=’Bob’, url=’./cart’, timeStamp=1970-01-01 08:00:05.0}<br>max: &gt; Event{user=’Bob’, url=’./cart’, timeStamp=1970-01-01 08:00:06.0}<br>max: &gt; Event{user=’Mary’, url=’./home’, timeStamp=1970-01-01 08:00:07.0}</p><p>看红色这一条数据，第四条数据中的路径应该是/home，但是这里却是原来的/cart，说明max()只计 算指定字段的最小值，其他字段会保留最初第一个数据的。</p><p>把max()换成maxBy(), 结果输出如下：</p><p>maxBy: &gt; Event{user=’Mary’, url=’./home’, timeStamp=1970-01-01 08:00:01.0}<br>maxBy: &gt; Event{user=’Bob’, url=’./cart’, timeStamp=1970-01-01 08:00:02.0}<br>maxBy: &gt; Event{user=’Alice’, url=’./prod?id=100’, timeStamp=1970-01-01 08:00:03.0}<br><font color="red">maxBy: &gt; Event{user=’Bob’, url=’./home’, timeStamp=1970-01-01 08:00:04.0}</font><br>maxBy: &gt; Event{user=’Bob’, url=’./prod?id=9’, timeStamp=1970-01-01 08:00:05.0}<br>maxBy: &gt; Event{user=’Bob’, url=’./prod?id=2’, timeStamp=1970-01-01 08:00:06.0}<br>maxBy: &gt; Event{user=’Mary’, url=’./prod?id=3’, timeStamp=1970-01-01 08:00:07.0}</p><p>第四条数据已经中url变成了本身的数据了。</p><h2 id="规约聚合"><a href="#规约聚合" class="headerlink" title="规约聚合"></a>规约聚合</h2><p> 与简单聚合类似，reduce 操作也会将 KeyedStream 转换为 DataStream。它不会改变流的元 素数据类型，所以输出类型和输入类型是一样的。  </p><p> 调用 KeyedStream 的 reduce 方法时，需要传入一个参数，实现 ReduceFunction 接口， ReduceFunction 接口里需要实现 reduce()方法，这个方法接收两个输入事件，经过转换处 理之后输出一个相同类型的事件；所以，对于一组数据，我们可以先取两个进行合并，然后再 将合并的结果看作一个数据、再跟后面的数据合并，最终会将它“简化”成唯一的一个数据， 这也就是 reduce“归约”的含义。</p><p> 我们将数据流按照用户 id 进行分区，然后用一个 reduce 算子实现 sum 的功能，统计每个 用户访问的频次；进而将所有统计结果分到一组，用另一个 reduce 算子实现 maxBy 的功能， 记录所有用户中访问频次最高的那个，也就是当前访问量最大的用户是谁。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hlz.flink.chapter05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.ReduceFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.typeinfo.TypeHint;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reduce操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-02-16 23:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransReduceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        DataStreamSource&lt;Event&gt; source = env.addSource(new ClickSource());</span></span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;Event&gt; source = env.fromElements(</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;./mary&quot;</span>, <span class="number">1000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./hello&quot;</span>, <span class="number">2000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod&quot;</span>, <span class="number">3000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod&quot;</span>, <span class="number">5000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod1&quot;</span>, <span class="number">6000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">7000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;./prod3&quot;</span>, <span class="number">8000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">        <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>),</span><br><span class="line">                <span class="keyword">new</span> Event(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;./prod2&quot;</span>, <span class="number">4000L</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Event类型转换成Tuple元组类型</span></span><br><span class="line"><span class="comment">//        SingleOutputStreamOperator&lt;Tuple3&lt;String, String, Long&gt;&gt; tupleStream = source.map(e -&gt; Tuple3.of(e.getUser(), e.getUrl(), 1L)).returns(new TypeHint&lt;Tuple3&lt;String, String, Long&gt;&gt;() &#123;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple3&lt;String, String, Long&gt;&gt; reduceStream = source</span><br><span class="line">                .map(e -&gt; Tuple3.of(e.getUser(), e.getUrl(), <span class="number">1L</span>))</span><br><span class="line">                .returns(<span class="keyword">new</span> TypeHint&lt;Tuple3&lt;String, String, Long&gt;&gt;() &#123;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(t -&gt; t.f0)</span><br><span class="line">                .reduce(<span class="keyword">new</span> ReduceFunction&lt;Tuple3&lt;String, String, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple3&lt;String, String, Long&gt; <span class="title">reduce</span><span class="params">(Tuple3&lt;String, String, Long&gt; value1, Tuple3&lt;String, String, Long&gt; value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 每到一条数据，pv加1</span></span><br><span class="line">                        <span class="keyword">return</span> Tuple3.of(value1.f0, value2.f1, value1.f2 + value2.f2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).keyBy(r -&gt; <span class="string">&quot;hello&quot;</span>).reduce(<span class="keyword">new</span> ReduceFunction&lt;Tuple3&lt;String, String, Long&gt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 找最大值</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple3&lt;String, String, Long&gt; <span class="title">reduce</span><span class="params">(Tuple3&lt;String, String, Long&gt; value1, Tuple3&lt;String, String, Long&gt; value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> value1.f2 &gt; value2.f2 ? value1 : value2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        reduceStream.print(<span class="string">&quot;reduceStream&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><p>reduceStream&gt; (Mary,./mary,1)<br>reduceStream&gt; (Bob,./hello,1)<br>reduceStream&gt; (Alice,./prod,1)<br>reduceStream&gt; (Alice,./prod2,2)<br>reduceStream&gt; (Bob,./prod,2)<br>reduceStream&gt; (Bob,./prod1,3)<br>reduceStream&gt; (Bob,./prod2,4)<br>reduceStream&gt; (Bob,./prod3,5)<br>reduceStream&gt; (Bob,./prod3,5)<br>reduceStream&gt; (Bob,./prod3,5)<br>reduceStream&gt; (Alice,./prod2,5)<br>reduceStream&gt; (Alice,./prod2,6)<br>reduceStream&gt; (Alice,./prod2,7)</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>在使用max操作的时候，报错Cannot reference field by field expression on GenericType&lt;com.hlz.flink.chapter05.Event&gt;Field expressions are only supported on POJO types, tuples, and case classes. (See the Flink documentation on what is considered a POJO.)</p><img src="/2023/05/06/Flink%E4%B9%8B%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/1683215675470.png" class width="1683215675470"><p>这是因为我们定义的Event对象不是标准的POJO对象，</p><h4 id="标准的POJO类的要求："><a href="#标准的POJO类的要求：" class="headerlink" title="标准的POJO类的要求："></a>标准的POJO类的要求：</h4><ol><li><p>所有成员变量都是私有的，用private修饰</p></li><li><p>每个成员变量都有对应的getter和setter</p></li><li><p>有一个无参的构造方法</p></li></ol><p>我们Event没有无参构造，因此需要加上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;聚合算子&quot;&gt;&lt;a href=&quot;#聚合算子&quot; class=&quot;headerlink&quot; title=&quot;聚合算子&quot;&gt;&lt;/a&gt;聚合算子&lt;/h2&gt;&lt;p&gt; 我们往往需要对大量的数据进行统计或整合，从而提炼出更有用的 信息。比如要对每个词出现的频次进行叠加统计。这种操作，计算的结</summary>
      
    
    
    
    <category term="Flink" scheme="https://castile.github.io/categories/Flink/"/>
    
    
    <category term="Flink" scheme="https://castile.github.io/tags/Flink/"/>
    
    <category term="聚合" scheme="https://castile.github.io/tags/%E8%81%9A%E5%90%88/"/>
    
    <category term="聚合算子" scheme="https://castile.github.io/tags/%E8%81%9A%E5%90%88%E7%AE%97%E5%AD%90/"/>
    
    <category term="算子" scheme="https://castile.github.io/tags/%E7%AE%97%E5%AD%90/"/>
    
  </entry>
  
</feed>
